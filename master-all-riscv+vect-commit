ef57f7d6b1a0568f58eff04a1b27de4a22a5e07f RISC-V Port: Regenerate gcc/configure
0bd99911eea170dc9c627fd17d55e7c3ab8d4286 RISC-V Port: libgcc
b906c007feeacdeea908ae40bc093ce53dc1ee1b RISC-V Port: libatomic
122e7b4f9d0c2d54d865272463a1d812002d0a5c RISC-V Port: gcc/testsuite
154cc77ea00c46a498f827f8e7d1836313e04afb RISC-V Port: contrib
377ee2e435a6ad525625378597313f5d1b4d86e6 Use two spaces to separate options in the RISC-V docs
7953d566595e759038c4930fe901baa796c66678 Alphebetize RISC-V Options section
a4cf4b647cd239cc57d88ed82f7243e7efdf43f5 re PR tree-optimization/79256 (FAIL: gcc.dg/vect/pr25413a.c execution test)
01726bc97785f6e66d6d882bf2b81077391603c5 [riscv] Fix build due to INT16_MAX issue
f39bad9fd050ea3ba39cb68eb3121915da4936c2 re PR target/78604 (test case gcc.target/powerpc/p8vector-vectorize-1.c fails starting with r242750)
02889d23ee3b02854dff203dd87b9a25e30b61b4 gimplify.c (gimplify_scan_omp_clauses): No special handling for OMP_CLAUSE_TILE.
6a5cdb0e9e1294a72f3be8237f8e48c86c8b8dba re PR middle-end/79454 (c-c++-common/ubsan/overflow-vec-*.c FAILs on some 64-bit BE targets)
da9cd044552cb68f95a0beb2995b17119bb5e962 Fix memory leak in tree-ssa-loop-unswitch.c
ee139af5321d25192e675cc276460d7ab6fcffe9 Properly store 128-bit constant in large model
622f6b642a6c90720becec67d63a7b2f9e40a675 re PR middle-end/79505 (Memory leaks in oacc_loop_discover_walk)
25c99850471c3e5d906712711faeeb3e35c03d7d re PR tree-optimization/79347 (vect_do_peeling is messing up profile)
03108bad95b96d9dad75dc99482d652ea9a749c5 [PR 79579] Avoid segfault on NULL ipa_edge_args_vector
45f7faf0b5bfab05293808a03e76938572475037 re PR tree-optimization/79683 (SLP vectorizer drops gs: prefix)
69a2e8a10b5e80bb696269f7d6365a3efd16c18d re PR tree-optimization/79690 (IVOPTs drops gs: prefix)
57fa080bf6c0ae01bf1643a87e72ca636bde0454 re PR tree-optimization/77536 (Vectorizer not maintaining relationship of relative block frequencies in absence of real profile data)
c7d97b2846c5647a81548caa3264d77c0a595010 re PR tree-optimization/79723 (Another case of dropped gs: prefix)
0f3f4ffeafae6e4ae50bba50fae11ed82ab1b33b re PR tree-optimization/79734 (ICE: verify_gimple failed)
86cd0334f35362b1d8b2f66be156bf34eeadf785 [PR 78140] Reuse same IPA bits and VR info
501815065bca4cc3657f3f7f78f81613277ebeb4 re PR target/79395 (Compile error with -mcpu=power9 and __builtin_vec_vcmpne_p)
eb0e7c34d71173a90a2c48f2acbf4c7995240fa0 re PR middle-end/79756 (ICE in execute_todo, at passes.c:2011)
d36a53d6f20d6f689b4e0cc9485103b8f71fe33f vector.md (vector_ne_<mode>_p): Correct operand numbers.
334b3c4b8400c23382b44c14779a5d789b8cb1d4 mips.c (mips_gen_const_int_vector): Change type of last argument.
522fcdd739e5cc24bd8392f5c00dd5b439804c36 re PR tree-optimization/79824 (Failure to peel for gaps leads to read beyond mapped memory)
a8d25fd0dd7e0feffc395ff1db1f2e9d815fb78a re PR tree-optimization/79887 (ICE in set_uid_loop_bbs, at tree-vectorizer.c:482)
5281a167eaf420235edcd5b47425d54a13ff74af tree-vect-loop-manip.c (slpeel_add_loop_guard): Preserve preheaders.
61fdfd8c51a99f07b59706037cb2946bc793480c re PR tree-optimization/79920 (Incorrect floating point results when compiling with -O3)
91cd87db7e4a053f884f8e10e267e0f8913b988e re PR other/79991 (typo in params.def, PARAM_VECT_MAX_PEELING_FOR_ALIGNMENT)
dce15db61bc8c2dc7a7e1f901903fa966077fa3e riscv.c (riscv_emit_float_compare): Use fallthru attribute rather than comments.
cccfcff414eda67a3c89f57401cfad0fa432cfb8 Use gcc_fallthrough() instead of __attribute__((fallthrough)
778dd3b6277e4a4dda9dd55d1daf9c653c81e2be re PR tree-optimization/80030 (valgrind error in vect_get_slp_defs at tree-vect-slp.c:3360)
34e8234204cb51e65f0e4b325634208a227cc8f3 alias.c (struct alias_set_entry): Pack properly.
a3d514f231af029090ba40ebcdae4226b739433c re PR tree-optimization/71437 (Performance regression after r235817)
d8fe28be762164639c98506f9348f082e5f4b880 re PR target/79951 (ICE in extract_insn, at recog.c:2311 on ppc64le with -mno-cmpb)
3b82a32c3e673743f6bbb911efb8be77a7bb1255 RISC-V documentation cleanups
918112d378787a2227f61225098289a14b1ccd22 Fix *_CST ICEs connected to MPX.
5a05e11d968b8acab584a887d978886bbba4aa1b Add RISC-V Maintainers
3611534e1f90fc05f363cc7b40d45fcd295c26ad Disable test inapplicable to RISC-V
e05a9f8e560a09d920555dec2960497dcb9e9ede Use more conservative fences on RISC-V
801f04e010b85f6f3132476215be3f13e672dd2e RISC-V: Don't prefer FP_REGS for integers
b0ba96c2f1c648533eba004d93a29a11ee51b2f0 re PR target/79963 (vec_eq_any extracts wrong CR bit when compiling with -mcpu=power9)
fe62dd045e7a0c246123792b43a2263fc81fb64e stl_deque.h (deque): Access allocator value_type only if concept checks are enabled.
842392c856b8e15f8105b5fd8c3ed454cfd7c912 p9-options-1.c: New test.
79f512ffebee22885684ff63bc3d66e7e6db9b4b re PR tree-optimization/80170 (SLP vectorization creates aligned access)
a9e4a1a56fb8e99594b65d6640432ba29c705f3e re PR target/80162 (ICE on invalid code (address of register variable))
62f96a79f10e0c6772e5302c076b8c062e42b0d9 Fix calls.c for a _complex type (PR ipa/80104).
3e907b90563ad90752acf1b318bdac33d546c7f7 tree-vect-loop-manip.c (slpeel_add_loop_guard): New param and mark new edge's irreducible flag accordign to it.
9d384e80bda2cf905cd550c8908494210ae11c15 tree-vect-loop.c (optimize_mask_stores): Add bb to the right loop.
de008ec4d69a5f7e9b75b25dc9e1fa937d65ff80 re PR target/80206 (ICE in extract_insn, at recog.c:2327)
6c18efd4e20b8af2e625334c6d58e12decebf62b Fix ICE when expanding MSA constant vectors with replicated values
5764ee3c8491e3ecff855a319f781a66fca2484e Fix numerous typos in comments
4d1a05f13808cc12c09e71e6ca3951e878184bb2 re PR target/79905 (ICE in canonical types differ for identical types __vector(4) int and V4i {aka __vector(4) int})
31a07c8102fa4a7e44118bdacda5f8577ca7218e re PR target/80098 (ICE in curr_insn_transform, at lra-constraints.c:3816 on ppc64le)
067bc855b23fc7351db7030be0c881e3760b7e6f re PR target/57796 (AVX2 gather vectorization: code bloat and reduction of performance)
7fd1a7474a04fdf68e3b1645de16bcfa45a915d0 tree-ssa-loop-ivcanon.c (constant_after_peeling): Do not require sth as strict as a simple_iv but a chrec without symbols and an...
25c28f47f8c909b768cc8aac372f5616fd871e15 Add test-case (PR tree-optimization/66278).
2eb8a34363025d04482a798dec1c885e1e3a3803 re PR target/70799 (STV pass does not convert DImode shifts)
1913c8f63fba23103dff324669f581cb2248d98f re PR target/70799 (STV pass does not convert DImode shifts)
9425300b415916c5474204fa1157c94612d9f8ac Improve tests for vector and deque move-assignment
11775988d5f6db984fb902b7447a5b2817b555b1 [multiple changes]
78f2b7ce3aea49818ea97974cb41029f820d0a99 [multiple changes]
f24745230fe28ddd92d28ff681bd95d10578e3b0 [multiple changes]
119092c17a0c6e947f774692849dedb84acb53f2 tree-vrp.c (assert_info): New struct.
b26f45f0694604745bbb3d269cacecefd28b4faf PR libstdc++/80553 don't allow destroying non-destructible types
c6b9e849c04bfb994b72910346cbe24cf8feabd5 re PR fortran/37131 (inline matmul for small matrix sizes)
815d9cc6641a3eeb6734a98f64ea8b183a495ee5 re PR c++/80038 (Random segfault using local vectors in Cilk function)
49ab46214e9288ee1268f87ddcd64dacfd21c31d tree-vect-data-refs.c (vect_enhance_data_refs_alignment): When all DRs have unknown misaligned do not always peel when...
6fe63fb43f5ff71bbd5ba4b3e6128bfdd5efe37d Canonicalize canonical type hashing
6fe906a33de7ad0679cbc4e070feed5809471462 Use call_summary in ipa-prop and ipa-cp
3862ef76c66219fd7adbbd6e3884bc9c1ba9c606 Cap niter_for_unrolled_loop to upper bound
8acb85754af19a055d7d00248ca869496dd4cda0 re PR target/79038 (Improve PowerPC ISA 3.0 conversion between integers and hardware _Float128)
248710c431b94c250e8356211df6f82c753d7b34 RISC-V: Unify indention in riscv.md
822856928407e34bc10f2aa7d00bc6149b43d7f8 RISC-V: Add -mstrict-align option
0f6ed1211d4e6759a0c35bc8d05fb07e5eab7bea re PR fortran/79930 (Potentially Missed Optimisation for MATMUL / DOT_PRODUCT)
4ca2e6ec7cb634b3f2598026be638b768c926681 vect-50.c: Revert last change.
019bd543a9a7c24396eab29a97e4c30c7931bf4d vect-44.c: Add --param vect-max-peeling-for-alignment=0 and adjust.
43b883a99006138770d42067d385347fbae21334 re PR tree-optimization/80705 (Incorrect code generated for profile counter updates due to SLP+LIM)
1bea0f26630c2c7fc35968a6e646bd67a706bf08 re PR target/80695 (gratuitous use of stxvx to store multiple pointers)
65fdd5e9aca0af40e4cd2d0683149171fb5c7d24 mn10300.c (mn10300_match_ccmode): Fix where we look for cc setter after the compare-elim changes.
a5c9f2b736f0d152289628e2ff14d1888b512244 allow constructing a auto_vec with a preallocation, and a possibly larger actual allocation size
6ce6a84ac6751b38d2200d7ee1f2a0a3aecfab60 re PR fortran/80765 (178.galgel in SPEC CPU 2000 fails to run)
ef6cb4c716b9ceb467282357e5ba0c16fe71c6f6 Add default value for last argument of dump functions.
4fc5ebf12924235c9b88a2c645624bc8b1ea266c re PR tree-optimization/80457 (vectorizable_condition does not update the vectorizer cost model)
1a81741814618bc19d13de0b9e59c0324114cc86 Introduce dump_flags_t type and use it instead of int type.
fd71a9a24da0a52b9a752b4a7d4a6f71d96f5c29 OpenACC 2.5 kernels construct: num_gangs, num_workers, vector_length clauses
3cd211af9989ca33f08c9d9d7c29ba7cb208b645 PR c/80731 - poor -Woverflow warnings
11d6b45d431b0aa30cf5ce3941b01ba4fd342af5 Allow some NOP conversions in (X+CST1)+CST2 in match.pd
f408a6350f28490124ae042207027fa6599af29b re PR tree-optimization/80844 (OpenMP SIMD doesn't know how to efficiently zero a vector (its stores zeros and reloads))
2c8f03adb27b15e9e4665dfe24b04f5516ec2ea4 tree-vect-data-refs.c (compare_tree): Rename and move ...
8d44cf7275527abc86f33e6d6c51fc84fa9c877a tree-vect-data-refs.c (Operator==, [...]): Move from ...
cb4fe4013684c2984b309f799373837af582b24a re PR middle-end/80815 (wrong code because of broken runtime alias check in vectorizer)
f8d0706b24ff84eb0adfa161819e71a80f5a918a tree-vect-loop-manip.c (create_intersect_range_checks_index): Pass in parameter loop, rather than loop_vinfo.
3c9feefc8d6372d0e24070b53b40c2a36026e798 Inline and using namespace representation change.
bbe3927b62ae4318c5319da379642aafbf6d15be re PR fortran/37131 (inline matmul for small matrix sizes)
8d21ff9f66a20e551d52b0759c926660dccb49cd Vector peeling cost model 1/6
71595748a3b193518a6bfb3578e9ff1aa813620f Vector peeling cost model 2/6
1e69cc8f2719f0bca87f29fa03e5a65a944ab659 Vector peeling cost model 3/6
64812d33ac6c0f23a3f4c25bc5497d7bb00e0f24 Vector peeling cost model 4/6
4bfb347c0249384240209d0f414eaef5ac5adc48 Vector peeling cost model 5/6
4d3d23fb7d364ce433cf59b7d36d333567990518 Vector peeling cost model 6/6
1a58f770e487e94227fc75a42eee385d86b7bee9 tree-vectorizer.h (struct _stmt_vec_info): Add reduc_type and reduc_def fields.
c7d7e2227f72d54ce3ec725693a0fac35455c555 tree-data-ref.c (prune_runtime_alias_test_list): Relax minimal segment length for dr_b and compute it in wide_int.
9cbd2d979c5e7095530a6fc290615847d31b549d * tree-vect-loop-manip.c (create_intersect_range_checks_index) 	(create_intersect_range_checks): Move from ... 	* tree-data-ref.c (create_intersect_range_checks_index) 	(create_intersect_range_checks): ... to here. 	(create_runtime_alias_checks): New function factored from ... 	* tree-vect-loop-manip.c (vect_create_cond_for_alias_checks): ... 	here.  Call above function. 	* tree-data-ref.h (create_runtime_alias_checks): New function.
748bbe72024ab2840c6b8ab60cef124c4c83fbeb Alternative check for vector refs with same alignment
046a84762b7954d43d14aa8b7e48bf07b8117270 PR libstdc++/80893 Fix null dereference in vector<bool>
67b8dbacf69243ffc6ac999fd4928af83fbf6c04 Change comment style to one we normally use.
4f14911c80fe5e57068a98bf8f65aef0a27a9494 Fix changelog of previous commit, the correct version is:
052754ea183cd0da87af930ae07355137ca68a81 fold-vec-logical-ors-longlong.c: Update the target to power8-vector.
e7754973ed3f91db45ae9257197966e1030e1e85 tree-vect-loop.c (get_initial_def_for_induction): Inline into ...
643a9684fadd71e0b89bc737e937e22fe621a4e7 tree-vect-loop.c (vect_analyze_loop_operations): Not relevant PHIs are ok.
9186a9d353815352d9625fc765dd0449fb64d8a9 tree-vect-slp.c (vect_detect_hybrid_slp_2): Match up what we consider a relevant use stmt with vect_detect_hybrid_slp_stmts.
e09f2fb0ef4c7a04ea7c1e2270870d1654c79cd2 frame-header-opt.c: Include profile-count.h.
e7baeb396d313ef141f972cdedc19b12ef1b9cfe re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)
6eb2ac659ce3c958b78ec4f2bbdb78b8170df0ae re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)
46c821e74577edde97754def189f8aea92ef51ae re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)
7078979b291419f353804cc32ecfdb22367b6e0d tree-vectorizer.h (vect_build_loop_niters): New parameter.
704c28eeebfa5fc3fb555eb980f149ca76a8b948 tree-vect-loop-manip.c (vect_do_peeling): Don't skip vector loop if versioning is required.
6355150f585e2d746a62df19ae89df7c93e8c3c7 tree-vect-data-refs.c (vect_mark_for_runtime_alias_test): Factor out code checking if runtime alias check is possible to below ...
fb4bc6ff6c08f4e5524fa5e1881b478b0f689155 re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)
01a8cacc96f2b5c1df5be8af746f758006c11511 re PR tree-optimization/66623 (Unsafe FP math reduction used in strict math mode)
225ab2b07b41d0f373efd574e962f90e8b73d46a Add deduction guides for sequence containers (P0433R2, partial)
bae6eef0095c6fb444a547da7a938a2d35a6e3be tree-vect-loop.c (vect_model_reduction_cost): Do not fail, instead get vector type from stmt_info.
c3684b7b86da9b6b01f6fb274227fc6401df053e PR c++/80560 - warn on undefined memory operations involving non-trivial types
7d594224c2375ae5b067b727a46c42b6ddc86de2 stl_bvector.h (__fill_bvector(_Bit_type*, unsigned int, unsigned int, bool)): Change signature.
6a2dfd9a66a678b26c762d0fc614fea267ea706b Make keyed_classes a vector.
14d8a9121242c03ac9b92d131ecc9c1634e8ce10 PR libstdc++/80893 don't run test for C++98 modes
adb7eaa2bac31047b37cc8b9cb7b4121ca0a8fea tree-ssa-loop-niter.h (estimate_numbers_of_iterations): Take struct function as arg.
16122c22dc009696131c250603745b34340b803a re PR target/79799 (Improve vec_insert of float on Power9)
a1aa2599dd85d590f39dbe565cc213c8dab65cae re PR target/81121 (ICE: in extract_insn, at recog.c:2311)
d47d743898d2af37ff24bbc6c5b78fb77020bcef pr65947-9.c: Adjust.
dca19fe10daf00bfef714e3f9f98c63ff70c7a64 Improve dup pattern
85d5b033ae83c37ae0b4dbd4210d463dcacc4842 pr65947-14.c: New testcase.
a78f698034a2ab7fabd0d6ca3d35e688670b6d2f pr65947-14.c: Fix missing brace.
0759db190d979bb4adaeaedd19ab0c823c168691 tree-vect-loop.c (vect_model_reduction_cost): Handle COND_REDUCTION and INTEGER_INDUC_COND_REDUCTION without REDUC_MAX_EXPR...
b6d03af0b128d4a1f923f18aff52549f5fad1453 PR libstdc++/81173 fix undefined memset with null pointer
25853b33482749fb6a07336ea3790a45cc1752f7 re PR tree-optimization/80928 (SLP vectorization does not handle induction in outer loop vectorization)
306b0c920fc691999ecd078f4b1efe015923feea tree-vectorizer.h (vect_get_vec_defs): Remove.
883312dc79806f513275b72502231c751c14ff72 Use ucontext_t not struct ucontext in linux-unwind.h files.
62cf73356918189f84ad9fcc83c1ffe8f86d7595 tree-vect-loop.c (vectorizable_reduction): Move special cond reduction IV var creation ...
6cd83bec4b76e19175a425b7e1841d9c5d0d164e re PR tree-optimization/81196 (Number of iterations found for p!=q but not for p<q)
0630a4ecda602a90e978c3285cf1028e92ff5e8b tree-vect-loop.c (vect_analyze_scalar_cycles_1): Do not add reduction chains to LOOP_VINFO_REDUCTIONS.
357067f243611b9e29367b61a50efe2e78f693c9 asan.c (asan_emit_stack_protection): Update.
4812f0b73c076ead7371785770a1736cf4ed1f49 re PR tree-optimization/81249 (ICE: error: incompatible types in PHI argument 0)
bd2f172f0b67c88ad3dd6126e8ee6fd4e87b6787 tree-vect-slp.c (vect_slp_analyze_node_operations): Only analyze the first scalar stmt.
618400bc14b5c52a450e91d59632d5b08ae1a325 ggc.h (empty_string): Delete.
c7be78e9b3932307536faaedc52e4c553eaf7dd6 tree-vect-loop.c (optimize_mask_stores): Use make_single_succ_edge to update profile.
af2bbc51d3879b6e7a03b4dc2d4ab017a98270ba cfg.c (scale_bbs_frequencies): New function.
c34d09274e72031d768e18d3f2365a1532357879 PR81136: ICE from inconsistent DR_MISALIGNMENTs
bc9f4235bcac6304141c472c94ecedeb9dbbff56 Tweak BB analysis for dr_analyze_innermost
c78e36522d21297b555185f5eeedd6e848eda684 tree-vect-loop.c (vect_analyze_loop_operations): Also analyze reduction PHIs.
b6d447f20948b35804fd780f8f1a237c9d36826f tree-vect-loop.c (vect_create_epilog_for_reduction): Revert back to using VIEW_CONVERT_EXPR.
3f5e8a7690d91daba3d8988318895fe51b7749ec Use innermost_loop_behavior for outer loop vectorisation
e054a1852bf903139a80f34c726453d34338e008 Rename DR_ALIGNED_TO to DR_OFFSET_ALIGNMENT
832b4117d4068670cc9ed496a7ab06104a12dc00 Add DR_STEP_ALIGNMENT
bb64297941f34721c7d4e94e754b454086511cf9 Add DR_BASE_ALIGNMENT and DR_BASE_MISALIGNMENT
25f68d908ff41a912a9bacb88afba665dd59c2ff Add a helper for getting the overall alignment of a DR
6b5e165bd8236e1bcd4e7bc3a6fdc0f63ed9410a re PR tree-optimization/60510 (SLP blocks loop vectorization (with reduction))
80be3333236f4fcb03e15811d4b8487a604bf866 Avoid minimum - 1 confusion in vectoriser
10ea26721d314b7dda7677dea57aad1845d5c9dc * tree-vect-loop-manip.c (vect_do_peeling): Fix scaling up.
542e7230c0dd16977671486414207ef1a3bd52e4 cfgloop.h (struct loop): Add comment.
a7a44c07369631201744422c02dbe59655201865 tree-loop-distribution.c (struct partition): New field recording its data reference.
b8506a8ac0a98ad8d3ece50a6e585e9c72d226d3 Remove enum before machine_mode
dcbf81c94423262b09c3f81e5e1fd3c9b999ff2d Force a dependence distance of 1 in gnat.dg/vect17.adb
5d7b8153b4b0a0f037d13bb9fdaae114b321c5c5 builtins-1-p9-runnable.c (dg-ddo run): Add lp64 && p9vector_hw.
1b68a156d636b8a67e13ac721718c1e1f213f969 riscv.c: Remove unnecessary includes.
1234ee19c9a7b175c154f987d3089d669d17501a tree-ssa-loop-manip.c (tree_transform_and_unroll_loop): Use profile_proability for scalling.
d2e78d766294a5e548c2eaf92f07a8f768120e1c re PR tree-optimization/81418 (ICE in vect_get_vec_def_for_stmt_copy)
ec15a152077b766a2b61c36f86172af05aa03ab5 Fix PR81362: Vector peeling
b267968e676627af45f63c64f4c8c4a0f1939561 re PR tree-optimization/81410 (-O3 breaks code)
1310ff035d548056ad4a0def038a6c5dedd98b47 Add generic v2 vector mode support for nvptx
b98b34b708e321a292886e2dd368223d32a60e86 Add v2si support for nvptx
3717fbe35e288a02ddf97367355b15530745cecb Add v2di support for nvptx
304a15ec643310a4d18521ca36fea5bfed814768 PR libstdc++/81476 Optimise vector insertion from input iterators
f971b2813d7ddbdba210a63290b790a175777679 slp-43.c: Increase loop count to enable vectorization with V64QImode.
891ad31c7b151704de655a1a2b70568830a65086 re PR tree-optimization/61171 (vectorization fails for a reduction in presence of subtraction)
2953b72fdd6c7d812028a636dfadf1c0e89ca314 re PR target/80846 (auto-vectorized AVX2 horizontal sum should narrow to 128b right away, to be more efficient for Ryzen and Intel)
1dae21ad9797ae5cb77db3f2d85e854f3ae121f4 re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
9af7f3731b0ddffb3aa75b78a0ede411d36a3b09 re PR tree-optimization/81500 (ICE with -O3 in process_use, at tree-vect-stmts.c:506)
d629ab44961886947b9ba07b8f26240868904457 re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
8c7331c5563e00e63837d0246f1325371157d46a Add AddressSanitizer annotations to std::vector
4a15d84228ee29d55cd011094f82c8d4fa9a5a76 re PR libstdc++/81064 (Inline namespace regression)
3597188b4b1c0cdc363d0d3965b2cd667d6b448d re PR target/80695 (gratuitous use of stxvx to store multiple pointers)
fdd293743d43c5721e75d951d57d73b50af6738d re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
5ea71a5a7c9f25a7539bdc8c5ed7a92bf2e2115c re PR tree-optimization/81510 (ice in operator[],  at vec.h:749)
ea0638714cacf83107bb886d9cf87f52a32a7ea4 re PR tree-optimization/81410 (-O3 breaks code)
e294f495894cd2d9e217565e340284b2edda4671 re PR tree-optimization/81529 (ICE in vectorizable_induction, at tree-vect-loop.c:6613)
52645850fc57ff68a8a7704f7611b18f5c853cda extend.texi: Update the built-in documentation file for the existing built-in functions...
6cad8c86b86637e9987a02cf84bddb1e8e397319 P0702R1 - List deduction of vector.
0919ce3efe2a0d6a20cb726feabe26dc3503db43 [Patch (preapproved)] Guard Copy Header pass on
9811e84c99df6269baa406c7f42d479b342087c4 re PR middle-end/81502 (In some cases the data is moved to memory unnecessarily [partial regression])
719488f819ceb7e7185bf324f04aa9030ba9c2ad re PR tree-optimization/81571 (ICE at -O3 in both 32-bit and 64-bit modes (internal compiler error: in as_a, at is-a.h:192))
1f9e09b55416098b04b3071549cdd53ab95ff8b5 Add RTEMS support
92e29a5e86c8adc88ee17a483d7284d7bb9e090c re PR middle-end/81502 (In some cases the data is moved to memory unnecessarily [partial regression])
8de33df2783088696d8c426a8467a8e1d70180a0 pr80815-3.c: Require vect_perm.
7488a79fa3675d18da9dc873933ddd4395822875 use C++ for {make,build}_vector_stat
6cc518c6cb819f9c0c7ad1bebad95fba1213e19f re PR tree-optimization/80925 (vect peeling failures)
ff03930a11f3a996e512ed3613eedc1b50ac5b30 re PR target/80846 (auto-vectorized AVX2 horizontal sum should narrow to 128b right away, to be more efficient for Ryzen and Intel)
26d476cd52837de43ed783288af5d4d68bd93c19 Remove flag_tree_vectorize
74cc0b2b66126e4598c4412ccbd879caa287ca81 re PR tree-optimization/80925 (vect peeling failures)
8e1863eca8c8914cc5e05369dacdc5266cdca179 re PR target/80846 (auto-vectorized AVX2 horizontal sum should narrow to 128b right away, to be more efficient for Ryzen and Intel)
636730cadd8be7f6280ea673cf44573bd49c37b0 re PR target/81622 (ICE on invalid altivec code with ppc64{,le})
77eefb7122d544b9e22a7f40a92320742c23e74b re PR tree-optimization/81633 (Incorrect floating point result with tree vectoriser)
04199738b48867d8c1d60e98578340047e3237da tree-vect-stmts.c (vectorizable_store): Perform vector extracts via vectors if supported...
dfbddbeb1ca912c9f9f806d8cff55a6ac2887d89 Handle data dependence relations with different bases
9adee3052156ae36271be28e3ad47dd975c26f42 Use base inequality for some vector alias checks
2c515559f9dbe8bace5f68e2fec7600a9edc7c42 C++-ify vec_info structures
62c8a2cf17cd794241c8f978c8fcfc4682ca4315 Pool alignment information for common bases
08c4c51e365e2957a590db0f4860ad886a6a20e9 re PR target/81593 (Optimize PowerPC vector set from vector extract)
314e6352040016aff26cc2cf0b9eb60c40ca859e trans.c: Include header files.
26d66f28fdb9bea6e05c2c9f9df7870f9d9f76b2 re PR tree-optimization/81723 (fortran build doesn't terminate on 64bit targets)
4261463d962c29bc105f973a8ab4269cf566cd1b re PR middle-end/19706 (Recognize common Fortran usages of copysign.)
b388427bf158402a37a4c966a01cf84eeb60052f vect-xorsign_exec.c: Add --save-temps to the options passed.
47ee1b7c10f2aa90645b0d2a94926fa2a674450c jit: add gcc_jit_type_get_vector
32129a17506ba18a34d07145eb2c1e9f9827034f C/C++: show pertinent open token when missing a close token
adc840379952b3a5649417d1d20d68f0d65e60ba PR81738: Split vect-alias-check-6.c
963aeaad25122bc507f9c72b9af6fc13cbeccde4 PR81815: Invalid conditional reduction
f8c770ddb4b5499780a5e2d58c861a9c903cdd29 Add missing ECF_NOTHROW flags to internal.def
4a89b7e700b9164c2cd9858fd6e1de4d813dfb79 altivec.md (VParity): Remove TARGET_VSX_TIMODE.
953e520dbe6794655602cdecec878d0393404731 jit: fix segfault with autovectorization (PR tree-optimization/46805)
c34960677437197ee2859b243cf185c7f873c83b Move vector_type_mode to tree.c
2be65d9e98a1335e0d948c2de59946e715afcbe5 Add a type_has_mode_precision_p helper function
6e4c6a248b55cad0775c9f47bfcdff79e15b913d Part 3/3 for contributing PPC64LE support for X86 SSE instrisics. This patch includes testsuite/gcc.target tests for the intrinsics in xmmintrin.h.  For these tests I added -Wno-psabi to dg-options to suppress warnings associated with the vector ABI change in GCC5.
d876eb057408fa7904dfc28ae9bc199c69b10858 cp-tree.h (lang_type): Replace sorted_fields vector with bindings map.
faa5399be693b2cdea641b976156f0fc89fa10cf tree-vect-slp.c (vect_bb_slp_scalar_cost): Properly confine life to the active subtree.
a844293de1d30da8ddba7384fc22ae59e857709f Set the call nothrow flag more often
9dc3d6a96167b4c84824be5e472fba4956297033 Make expansion of balanced binary trees of switches on tree level.
2ffc0382ff79b23a6f88113d277842934de258ed 20030926-1.c: Add dg-additional-options.
0d4a1197ba24d4f95b5c5f1face695806075a0c6 [1/77] Add an E_ prefix to mode names
4e10a5a74b2571a72ab944195267334d56b9534b [2/77] Add an E_ prefix to case statements
c94843d2422bdf77e2f86fad0329838f36773b43 [4/77] Add FOR_EACH iterators for modes
490d0f6c91c0c4fef57a5ffe438629b0687113de [6/77] Make GET_MODE_WIDER return an opt_mode
b5f2d801b10c25ef32a80c03d6df8668920a593c [9/77] Add SCALAR_FLOAT_TYPE_MODE
fffbab82e7fd15ef695159746a0ce7b9ac906778 [17/77] Add an int_mode_for_size helper function
304b9962830476dce3fe7632713e5f5ce002c050 [18/77] Make int_mode_for_mode return an opt_scalar_int_mode
b4206259f10455603e0c90825566de1ea777c04a [20/77] Replace MODE_INT checks with is_int_mode
45e8e706e295e7770d02c6d9c9798f4bab7ab524 [22/77] Replace !VECTOR_MODE_P with is_a <scalar_int_mode>
7c61657f68cc45bdbbfcfd762dbfd7021f3acb3f [25/77] Use is_a <scalar_int_mode> for bitmask optimisations
6b9c3decc38f6f852adf16951b9b1b043112cd1c [26/77] Use is_a <scalar_int_mode> in subreg/extract simplifications
c7ad039d8d75666f4f188a913033da36206503b8 [35/77] Add uses of as_a <scalar_int_mode>
e3731c52cf1b60d90f27f81ff0d1e2ad164fed07 [42/77] Use scalar_int_mode in simplify_shift_const_1
22527b59dbb10204626aeb8660a8e262377ac354 [47/77] Make subroutines of nonzero_bits operate on scalar_int_mode
3c84109eae52da59c09e8a91bfb5e79bd0527809 [54/77] Add explicit int checks for alternative optab implementations
b397965cae46d88d4c274fb2ecdde9a4714a4e6a [65/77] Add a SCALAR_TYPE_MODE macro
db61b7f923b769142156eab047c94b04bb7adaae [66/77] Use scalar_mode for constant integers
3bd8f4816fe24ef00641cde33dd13155b83db6e1 [68/77] Use scalar_mode for is_int_mode/is_float_mode pairs
16d2200070f49ed71053b81699e37bd539a0ee69 [71/77] Use opt_scalar_mode for mode iterators
18e2a8b889d520fc3598f74e39e1dbf1ef06ebd1 [72/77] Pass scalar_mode to scalar_mode_supported_p
79d22165ea45e89283ccf147d65cbf66548838da [74/77] Various small scalar_mode changes
18a01e8562aa48e978c0326d3e18fc290c1c9ca6 Revert 2017-08-28 Nathan Sidwell <nathan@acm.org> Restore sorted_fields vector.
db69559bac8ab03ccddfe3a42be630e65c277812 PR82045: Avoid passing machine modes through "..."
792ce29f1cfe2b34a9f081d929e57135f36c3374 re PR tree-optimization/70043 (The compiler hangs in a fortran test-case with -Ofast -g -march=haswell)
f939c3e63c5076205c56fb36e9c7cdc064a189a8 Turn HARD_REGNO_MODE_OK into a target hook
99e1629ff116e2e1aa37a14aa0d15b4533068927 Turn MODES_TIEABLE_P into a target hook
11a82e2597c54016345beb99e5339e37851c7d59 re PR c++/82084 (ICE: constructing wstring with -O3)
f4b316470bf7cccab22fbb97d1b6c541fcfc2855 Make more use of int_mode_for_size
ddc203a7b15306287792a3eed6abfe306e3d26ad Add mode_for_int_vector helper functions
9da15d4097fa2fde5c2a5f1681db8fd04488a563 Make mode_for_vector return an opt_mode
3981fbb65a43dff3a81ebc32c94d6f86bb4f9783 Make targetm.get_mask_mode return an opt_mode
f6bd5664755b207d5bbfedd95231dc62ccfaa1ed 20050604-1.c: Adjust to be a better test for correctness of vector lowering.
1887fb461b2c370aeeedaba95b503fde9b2c70f9 name-lookup.c (count_fields): Rename to ...
edcc77dbd9f95301a8be1a2f2b0d774680b46a1a Make-lang.in, [...]: Find runtime source in libgnat/
635c99aaf7250ef13dbd7a6f02141cb735bdcc2f Make HSA resilient to side-effects of split_edge
cff44c10ae1f4d3dc73abed85dfa785b70a553e1 tree-ssa-threadbackward.c (fsm_find_thread_path): Make GC vectors heap vectors.
dee6fc2b43d2fc004ffe65a0e030fc74facb7c64 tree-vect-generic.c (expand_vector_operations_1): Do nothing for operations we cannot scalarize.
e0bd6c9f0aa67d88bbb20019362a4572fc5fac3c Turn SLOW_UNALIGNED_ACCESS into a target hook
c43f427972be6aecd3c85b854cdf601feb816316 Turn HARD_REGNO_NREGS into a target hook
d681026df10348e1fbede89055cbd395dc66cdd8 PR libstdc++/79433 no #error for including TS headers with wrong -std
2af96386a67a2224abc74e7c2144747240ac4ad5 Define std::__to_address helper
f15643d4ea7103ad1bd9ef893f4c211624e1614d Turn SECONDARY_MEMORY_NEEDED into a hook
bce5091aa995e9faea7c6eb5b11b288bd66bcd98 re PR tree-optimization/80925 (vect peeling failures)
83ada6e8e669d0218771edcc99317b9951431df9 Don't xfail gcc.dg/vect/vect-multitypes-12.c on 32-bit SPARC (PR tree-optimization/80996)
9e822269364f5268b2bdc82530fd6c871f47b1bc Store VECTOR_CST_NELTS directly in tree_node
794e31808f1554d51f0f0357c3a74a6365f0a274 Use vec<> in build_vector
908a1a166dccefa24ae8b3606f4ce1da944eecb0 Use vec<> for constant permute masks
e7c45b6600acfdc0930b980a45a364f77844139a Add gimple_build_vector* helpers
dccf43aed37281a7bb91a7984a75470ad62eb0f1 Make more use of gimple-fold.h in tree-vect-loop.c
e8f142e28262a5048c6f40f4bfb6a612d3da55f0 Add a vect_get_num_copies helper routine
ca09abcb399bcb8cddbda68c75e702cc8989a6ca Add a vect_worthwhile_without_simd_p helper routine
a41a6142df74219f596e612d3a7775f68ca6e96f Add LOOP_VINFO_MAX_VECT_FACTOR
0d803030650a6c671b295d3e7d5161e64b59b2f6 Turn CANNOT_CHANGE_MODE_CLASS into a hook
bb149ca2e912038dce733f95ab1c24ff0d1af280 Turn TRULY_NOOP_TRUNCATION into a hook
7b9361409dda228eedb13a3abe547c3cafbe957b invoke.texi: Document -std=c++17 and -std=gnu++17 and document c++1z and gnu++1z as deprecated.
78d459bbbbadcfe8121106d49e1e6ede3c182c31 PR82228: Move ncopies calculation in vectorizable_live_operation
6b1ce94d31733df9b0055b9e1934704d21973d77 re PR tree-optimization/82220 (SPEC CPU2006 482.sphinx3 ~10% performance regression with trunk@250416)
f64b12bd152735aacb948424766b33303bbeb5f8 omp-offload.c (oacc_xform_loop): Enable SIMD vectorization on non-SIMT targets in acc vector loops.
68a0f2ffff4fdb05cfe110b3828124bcbe6d611f Invoke vectorizable_live_operation in a consistent way
dd25e724a475caffa4372f911d15536d09c342c8 Fix vectorizable_live_operation handling of vector booleans
e009b0558e8dd9bd9b17308104834ef5a1536975 Fix type of bitstart in vectorizable_live_operation
7251b0bfbf09fae831bb5d3d2d7a311e9d37b398 Fix vectorizable_mask_load_store handling of invariant masks
b161f2c927bb7fb70dc0c6d4e9ab22cdba29db6d Include phis in SLP unrolling calculation
ac8936b4677fa10b676e5b12aa682b9d2d42c1e5 Fix an SVE failure in the Fortran matmul* tests
8b7e9dba2bc921c24994129bb9231caa176d6da5 Move computation of SLP_TREE_NUMBER_OF_VEC_STMTS
4d6e2f33a437fc6ead8218bf5f0e2cdb3e834d9e graphite-isl-ast-to-gimple.c (graphite_verify): Inline into single caller.
20bdc473ebd7176544e0c8cdf87750adc6f44a97 Add a vect_get_scalar_dr_size helper function
f702e7d43f2aec71640d0db7ecf1543ba75f37c3 Let the target choose a vectorisation alignment
ea44495d106582b951de1e84d9d7849d3783a56d PR82289: Computing peeling costs for irrelevant drs
d362ac6c6d5a9419d9b7a0db84155a065e113434 re PR tree-optimization/82285 (Optimizing error when using enumeration)
579f368704e340c47957d5fb5aca6ecda6624a69 Update interface to TARGET_VECTORIZE_VEC_PERM_CONST_OK
f39b92e2c485be81ec154d2986495305d5926688 Change permute index type to unsigned short
58e17cf84636d72e3620b5af50b0336d9364ddd0 Turn CONSTANT_ALIGNMENT into a hook
7ba950d31d0cbf135d5fab8da26a37fb580df86e pr65947-9.c: Requires char to be signed by default.
7d6206fe298f420e2292df78ab3480caa98cd1aa Fix libgomp.oacc-c-c++-common/loop-g-{1,2}.c for non-nvidia devices
db6601d2b6e471598716ec7ab88a780bd4676933 crti-hw.S: Add watchdog vector, FT930 IRQ support.
9c53f040cb3c3bc0b86f702af5bd73d904d6cf0f [BRIGFE] Fix (more) crash with calls with more than 4 args.
a46461133eac42da46efe784b5b596c35ebcdafc Testcases using dg-options require at least -mzarch.
c059a92eccd96d00ffd23801d032eba14ff2a244 New target check: vect_long_mult
30d027da83cdcc174747ce19381525a16c4a4503 New target check for double<->int conversions
4f15b6a282bc4c11ee8b32dac4f05aab10ce3e10 New target check: vect_peeling_profitable
6069fe72870e410c08570e94ce2b141c6bc88219 jit: implement gcc_jit_context_new_rvalue_from_vector
8fe3ed4c10e293c69479042667161c79f0accf3e Fix libgomp.oacc-c-c++-common/{loop-red-g-1,routine-g-1}.c for non-nvidia devices
0322303e26cc317970fa311c032121078dab51dc vect-align-1.c: Fix vect_hw_misalign condition.
592fbfb5fb376972c21d88ac57b0a4a38018e79f slp-perm-9.c: Use vect_sizes_16B_8B.
31bee964798d25ac83e513de6858b69c3a9624be re PR tree-optimization/82436 (465.tonto ICE in vect_get_slp_vect_defs, at tree-vect-slp.c:3410)
d20eac1b41b9a86128a80f374e029d9638d14cba re PR tree-optimization/82397 (qsort comparator non-negative on sorted output: 1 in vect_analyze_data_ref_accesses)
2f3914287d4c1c75394d4f101ad5bd4d9d4b66e8 re PR tree-optimization/82434 (-fstore-merging does not work reliably.)
d155a264dfe562806dd2d44aca7e272594a3e92e Committed on behalf of Sudi Das
18b4306c0a150f144cddaf85ed814893b3b44b81 re PR tree-optimization/82397 (qsort comparator non-negative on sorted output: 1 in vect_analyze_data_ref_accesses)
166b87998a85c8c7d6db923bc7c8370af3665381 tree-vect-loop-manip.c (slpeel_tree_duplicate_loop_to_edge_cfg): Skip renaming variables in new preheader if it's deleted.
2fe1a1b888e204fd0ccc4e9c96b7065344e879aa tree-vect-loop-manip.c (rename_variables_in_bb): Rename PHI nodes when copying loop nest with only one inner loop.
8e6cdc90d41633e09a3a34bb8c6f71cf246101b2 Require wi::to_wide for trees
69c328ec60f2ff1858387eaf195119f6976fe99c re PR tree-optimization/78558 (Incorrect loop optimization leads to crash)
1be043a140d516e16930bbc357f5ccb7b98c1db5 re PR libstdc++/82558 (V8 JavaScript engine segfaults since r249235)
cc9fe6bbd78a0b1740c5c1c5713d36e3da6e7165 target.h (enum vect_cost_for_stmt): Add vec_gather_load and vec_scatter_store
ef30ab837c42b9555b3fc290454a5c02cb65487a asan.c (create_cond_insert_point): Do not update edge count.
c274eebe4ebaea9ee9e3dd7e1c0a8a4fb3108472 re PR target/82370 (AVX512 can use a memory operand for immediate-count vpsrlw, but gcc doesn't.)
42a764f76f14ce2718d30459dc140d1410ef118e re PR target/82370 (AVX512 can use a memory operand for immediate-count vpsrlw, but gcc doesn't.)
1031b5772a3f2daee0bf01d7d155955833d05c1b re PR tree-optimization/82603 (ICE in ifcvt_local_dce w/ -O2 -ftree-loop-vectorize)
51e28fffbec42be94bd281b0234a38774bdf6c21 re PR tree-optimization/82473 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1524)
8f8f531f0def95af2eb35265a3e7b6c3aa43ad7c sem_dim.adb (Analyze_Dimension_Binary_Op): Accept with a warning to compare a dimensioned expression with a literal.
f6fd8f2bd4e9a91b4683e2cbb144631ff201f587 pr79683.c: Disable costmodel.
a85cf8e99049f4db8b5868b5df5ef201a9a7b2cb Use scalar_mode in expand_shift_1
3ec43c5e312e368cca5cf0b9727bcbd71f13a704 Use SCALAR_TYPE_MODE in vect_create_epilog_for_reduction
2a31c3216c53ffaeb21ec76e4491611bb40792b4 Convert STARTING_FRAME_OFFSET to a hook
6ab5a6f30f2a3a9db37604195ff4b802779f83bc re PR target/82460 (AVX512: choose between vpermi2d and vpermt2d to save mov instructions.  Also, fails to optimize away shifts before shuffle)
8468bfe8cb065d4d7b17a39a756fed8cb66e3a7a libstdc++.exp (check_v3_target_normal_mode): Add c++config.h include.
bc1a75dda26988781847f00cfc5283eb13418106 re PR libstdc++/81706 (std::sin vectorization bug)
a596f4970ededd424328f7789b4a304e5b3a7338 re PR tree-optimization/82436 (465.tonto ICE in vect_get_slp_vect_defs, at tree-vect-slp.c:3410)
0b661358bcd72a70bbf4b903db1f0f8de98a6bbd RISC-V: Add Sign/Zero extend patterns for PIC loads
c3ef5fda143585ca19dff5a977b6aa87b7a17566 vect-dot-qi.h: New.
c5a92111082b32711635a61a602f1495effe65ff vect-multitypes-1.c: Correct target selector.
957f5feacf2f4c7916e0137ad95d2d9559e06fa4 Deduction guides for associative containers, debug mode deduction guide fixes.
76ff5c2403e918519f441b073a8b7c1053d62217 re PR target/82703 (Wrong addition of std::array components with -O2 -ftree-loop-vectorize -ftree-slp-vectorize (works fine with -O2))
f44d7b243a43db45cedc52ea3bd3f385b8f06f0d RISC-V: Correct and improve the "-mabi" documentation
daff6cdf8ea49dd3a9fbb9120f4b5ef39fe78a9a Part 2/2 for contributing PPC64LE support for X86 SSE2 instrisics. This patch includes testsuite/gcc.target tests for the intrinsics in emmintrin.h.  For these tests I added -Wno-psabi to dg-options to suppress warnings associated with the vector ABI change in GCC5.
c7432e76039d2c4fb7a00f0fbd261eec2238d42b GCOV: std::vector refactoring.
4695d816a37abffa3fae55cbb1c874ec1e62446d GCOV: Vector refactoring II
8a3f457f148b7114dfa37927b73410eecc986a33 GCOV: std::vector refactoring III
59d06c050373919ed36a13b37103b6e069d8ebd3 Add gen_(const_)vec_duplicate helpers
9b1de7e2e8e99eabf2b8d1ef74eb57fbd41bc730 Add more vec_duplicate simplifications
06ec586d2c384ba016c784de3279f3770d9f399d Allow vector CONSTs
ef339d6e2e846ba7ff544def1d79f10762da223d Add a VEC_SERIES rtl code
7aaba298fe122dfd40bb612623df89db08499f8b Add an is_narrower_int_mode helper function
cb8e3dda35164dcb85056556779daa673b40166a Use (CONST_VECTOR|GET_MODE)_NUNITS in simplify-rtx.c
d4b51b8ba058a79d9ef64cd03a3bc88d2c7fc6c6 RISC-V: Document the medlow and medany code models
42fc5a70c3d203c85dd09a40e53b3da24faf78e6 RISC-V: Use "@minus{}2 GB" instead of "-2 GB" in invoke.texi
13e4f305e040097de34481a72756dbe0ebd06dbc RISC-V: Handle non-legitimate address in riscv_legitimize_move
e7a740068ed3cc5961101f07012314d940a97ae5 asan.c (create_cond_insert_point): Maintain profile.
ecc82a8d0551e02afc9bb4d9dff450f6f0098b4e RISC-V: Set SLOW_BYTE_ACCESS=1
caf1c1cd1253a847644744e3d6df3f98051ef024 RISC-V: If -m[no-]strict-align is not passed, assume its value from -mtune
0791ac186bdddf4c52a59ee240ad9c3c9d7f197a RISC-V: Emit "i" suffix for instructions with immediate operands
19520957ad27c591e888a82d8dd30cb5fccb3896 Fix test-suite fallout of default -Wreturn-type.
454f8b2b0c6f9645b3df6be98efe2ca520f2ce82 Fix -Wreturn-type fallout.
962b96688689a73ddf5fb97d9c63514f98b49d27 [gcc]
4d30a85ecee179acc22a213653f4c03028994a6b RISC-V: Define MUSL_DYNAMIC_LINKER
6ed01e6b282fa9eb5d19ab8bc829d821f624103e RISC-V: Implement movmemsi
6432f025b4fccaaca8564e0c2518cdba869c4bf5 Simplify vec_merge of vec_duplicate with const_vector
40757a25d45d47ddc50819bfd32dd6aac595abc2 vec_merge + vec_duplicate + vec_concat simplification
fb5621b1841b56a88f66fb1e08dd87db0009c57b RISC-V: Fix build error
136ca74eb91c225ff18a7b08e0e7fd027b88517c GCOV: support multiple functions per a line (PR gcov-profile/48463)
1eae67f812a0b7b6b7132d0375e662bc6200d68a Base subreg rules on REGMODE_NATURAL_SIZE rather than UNITS_PER_WORD
9b4473b6c4a706cd5d38a50d10a83c549d676ca3 Be stricter about CONST_VECTOR operands
b9680369c3b870031120cda2a92511393e936538 Consistently use asm volatile ("" ::: "memory") in vect tests
a826c5019e1439181a822c2b5079fec22654e37b Add VECTOR_BITS to tree-vect.h
d574e624a9d156600731554133db68dc6868e7b5 Add available_vector_sizes to target-supports.exp
83f15782dde23b068a806b3f7e0c253c49d148a2 Don't assume vect_multiple_sizes means 2 sizes
8b26c5492bf1d4c7acab18eff1e78a239af779a1 Add vect_perm3_* target selectors
4d83db5d73ce3e355f9ac166e04d72ce41decfb5 Add a vect_element_align_preferred target selector
b8353767564e8042ce75d6879e813ce313a0a050 Add a vect_unaligned_possible target selector
32c7bafd50e6553f2f79858cf365907979d5eb2a Add a vect_variable_length target selector
331e1a56adf1a81c3544a8034d9e0a413ea35435 Add a vect_align_stack_vars target selector
c48a8e71c8b5d3e6bdffaec85b1e3b111814cee0 Add a vect_masked_store target selector
4d99a8487287e94b9bd42807cbe864991a0d1d3b Moving parameter manipulation into its own file
2041a23a2ed58c7115bc8a942ee40efda0b72324 [riscv] Wrap ASM_OUTPUT_LABELREF in do {} while (0)
211bea6b40bfa457a9e8619cf653227206736e76 GCOV: introduce global vector of functions
4464b9772d6f2fe927a47f3a3e120ce5938fbfdf GCOV: introduce vector for function_info::counts.
f804ba3e12e03dc1d0130b0ab7e9a792b4892d24 RISC-V: Add Jim Wilson as a maintainer
3ef9e1ec4bcd859fca2e8b80739ec5d98618bb23 altivec.h (vec_xst_be): New #define.
00fa28d1b471a3aca9994a21363ce3f58b6bd2f2 tree-vect-loop-manip.c (vect_do_peeling): Do not use scale_bbs_frequencies_int.
efeee67f4c9fd021d2594e0271c84b7e90e63d3d Set default to -fomit-frame-pointer
c261ba2c8b4244128528f964192ca4f4edf1eef5 Tweak vector::_M_realloc_insert for code size
3d7f09de5a5a4e74fdc25d8f7e2756410383d149 Add nds32 vector modes.
19a30b7123aa90caf7de3e9ec588266e218f8028 vec.h (debug_helper): New function.
f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8 re PR c++/82781 (Vector extension operators return wrong result in constexpr)
ee1c213355f0f9d33568c5118f318f22057d1454 RISC-V: Implement __umulsidi3, umul_ppmm and __muluw3
1af4ebf5985ef2aaac13862654044d84a3cd7ae4 New POINTER_DIFF_EXPR
866e4d3853ccc0bc61e3764911d2a0f69c281f0c PR libstdc++/48101 improve errors for invalid container specializations
a76ef9c5a8447bf3e90ed832ef1286cda205e115 PR83004: Accidental change to pr81136.c for VECTOR_BITS==128
16d24520af1ad5ff832d243f177d88f08a1ba012 Replace REDUC_*_EXPRs with internal functions.
ce95abc41e998c8d1e1b2112a634d5a6cdd9ede0 C/C++: fix quoting of "aka" typedef information (PR 62170)
15b6695ac534148a10dd5a5f266bf2e49316dc32 re PR tree-optimization/82402 (error: SSA_NAME_OCCURS_IN_ABNORMAL_PHI should be set)
5e9d6aa4c2fd245837ec26de1d01ee8eb7786af3 Remove Cilk Plus support.
f7300fff74becf365cdadd23c9447521da852e84 re PR tree-optimization/83202 (Try joining operations on consecutive array elements during tree vectorization)
08539f3e949c37dcfe6e128d78c527db47cc609d Riscv patterns to optimize away some redundant zero/sign extends.
a52206ae28ed3e55d601118bedd52739456401ab re PR tree-optimization/83202 (Try joining operations on consecutive array elements during tree vectorization)
fb0e72c8c06acbc30759e707d807c35758c6961c Cleanup riscv option docs.
fb607032b8009d141409b8dc3c5e4df42c93a231 re PR tree-optimization/83232 (fma3d spec2000 regression on zen with -Ofast (generic tuning) after r255268 by missed SLP oppurtunity)
e034c5c895722e0092d2239cd8c2991db77d6d39 re PR target/78643 (ICE in convert_move, at expr.c:230)
f3abed16a01153c7a72d5795076c392cdb19c9dd Fix typos in riscv register save/restore.
fbdec14e80e9399cd301ed30340268bdc5b5c2eb re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
734914b6e230b78eb6c34fbd5a2d93b1a919d36a New VECTOR_CST layout
5ebaa4774fb6de458422c660ae11f1c3b7d96262 Use tree_vector_builder instead of build_vector
059c18abcb9c88bb5a85eb3ce468ffa7252da230 Use tree_vector_builder::new_unary_operation for folding
b3def403fa7ae89679468b8f986cab7361c1034d Use tree_vector_builder::new_binary_operation for folding
abe73c3d32b68809628eaa3266bf98cb7352851c Make gimple_build_vector take a tree_vector_builder
44e1aae4dbd8198a26ab0ec5958e073e2c9cc772 Make build_vector static
63570af0b58a3c354723bc78b75d76dbb0750f47 Make more use of VECTOR_CST_ENCODED_ELT
6cb0725cdbef47a7486629b7933f51a29a591781 Add srodata section support to riscv port.
8da4c8d83b7a21127cbe464aa54c5f3e7c034feb re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
becb7a366039fe2738d56017cfe9eac74a5512fd re PR tree-optimization/81303 (410.bwaves regression caused by r249919)
3a4c600f389e8c5aa6dcbd6cd14bd0c546af0bb2 Add .type and .size directives to riscv libgcc functions.
0eb952ea5eab6a299283635625cef497e831dae4 re PR lto/83338 (SPEC CPU2017 510.parest_r ICE)
4ded4b230da2408bc6752ca4e4551204bebe806b altivec.h (vec_extract_fp32_from_shorth, [...]): Add #defines.
0242c7f0aac22e47b73046b2d60bb5de68057d6a altivec-12.c (main): Add tests for vec_avg.
36f52e8f0812546e6cb533b384b29f56570624ff [SFN] boilerplate changes in preparation to introduce nonbind markers
12c667b5b449a9c86c763438fb96e6e029533fb7 re PR tree-optimization/80631 (Compiling with -O3 -mavx2 gives wrong code)
555758de9007461daa2638c1c5d5ac35ae3dd234 re PR tree-optimization/83359 (ICE in expand_LOOP_DIST_ALIAS, at internal-fn.c:2362)
c5060cadf030f6517a1552bf0fc263cb03eb96c4 [Patch combine] Don't create vector mode ZERO_EXTEND from subregs
95e5bea0012664d225a40a219f98a9cc1f7f1579 re PR target/83332 (new test case gfortran.dg/vect/pr81303.f fails (r255499))
b8d7e076ed0cf5fde5f5d875e4145d63317a6180 Use C version of multi3 for RVE support.
b72805798ac456709eef4a761b84dd1c4a5780e6 re PR middle-end/83415 (ICE during gimplification of assignment to read-only vector)
be4c1d4a42c5c7dc8bffbc5c9e3250f02be0d922 Add VEC_DUPLICATE_EXPR and associated optab
9adab579d59ea50eeb6877df2292d9d5c7b20e3e Add VEC_SERIES_EXPR and associated optab
8fcc61f8964aa9aa2e6fc08cb961f9dc2a5add77 poly_int: IN_TARGET_CODE
b4d43553e9353de4fefb3a1fde1277eeb1bad7be poly_int: mode query functions
d43568222a4564e22a6ffd370481e11ba031b318 PR tree-optimization/83239 - False positive from -Wstringop-overflow
bcfaa720a25d9f3bc760a993ee1d949f68e777ef re PR ipa/81877 (Incorrect results with lto and -fipa-cp and -fipa-cp-clone)
58cc7d798875aee798ba6a5b07c9324717160a2c re PR c++/83300 (Segmentation fault with template and __attribute__((vector_size (sizeof(int) * N)));)
497742efce59a3296461199c16bbc520154d0e2e re PR tree-optimization/80631 (Compiling with -O3 -mavx2 gives wrong code)
36fd64086542ed734aded849304723218fa4d6fd poly_int: tree constants
74c74aa05ee8757210dfb16f6198024e6dc445d5 poly_int: DWARF locations
fc60a41612bad379060969b6ed3a78eb160aae8a poly_int: extract_bit_field bitrange
91914e56a5e952cc87468bdd6d006e51eaa54294 poly_int: SUBREG_BYTE
f37fac2b74df114c5b3e9c8a3be2cad9acd3f4ca poly_int: get_inner_reference & co.
e7301f5fcbfa649beb05da1e3508db7fc7c4d26b poly_int: bit_field_size/offset
aca52e6f8d29064f4712e5f3f4429a36f918f099 poly_int: MEM_REF offsets
a696bc4fec986318a1765c31ac9ee2db3849934a poly_int: loop versioning threshold
8944b5b36e04894f7a0768440e3253400c3c7857 poly_int: compute_data_ref_alignment
af2e447568c939acf8c55eea529b2ac85c5753a7 Use valid_for_const_vector_p instead of CONSTANT_P
d235d09b7c86a2955bebdcb1991cd21758bcc21b re PR middle-end/83623 (ICE: in convert_move, at expr.c:248 with -march=knl and 16bit vector bswap/rotate)
1bfb3b8bfadf6e4972db74562da5718f014a15a0 re PR tree-optimization/83581 (ICE in expand_LOOP_VECTORIZED, at internal-fn.c:2397)
4aae3cb3559802faee3b5cb58d9315dcc5000bc8 Pass vec_perm_indices by reference
7ac7e2868d450dfb9080166ddc4abcc21b86fab3 Split can_vec_perm_p into can_vec_perm_{var,const}_p
279b805713fd498afb7986698a2e3406bc947d87 Refactor expand_vec_perm
f151c9e1414c00e300c9385bc9512c3d9a481296 Remove vec_perm_const optab
6da64f1b329f57c07f22ec034bc7bc4b0dc9e87b Check whether a vector of QIs can store all indices
e3342de49cbee48957acc749b9566eee230860be Make vec_perm_indices use new vector encoding
736d0f28783f12fa042892bc186866dd5101088f Add a vec_perm_indices_to_tree helper function
d980067b1e9394b2b8482b3fc888ac5e8e3ebe59 Use explicit encodings for simple permutes
1a1c441dbe5933ebf9180831236aa5be7d70a434 Rework VEC_PERM_EXPR folding
d3867483044ae00bac6daaeac6274e95254fb991 Use vec_perm_builder::series_p in shift_amt_for_vec_perm_mask
b00cb3bfa50c5477347082a9450b4a63e4fee263 Use ssizetype selectors for autovectorised VEC_PERM_EXPRs
8eff75e0d2a3495c5bc182324644a080d47205ac Use CONST_VECTOR_ELT instead of XVECEXP
3877c560656f4961cc50952c3bba3c40812c36c3 New CONST_VECTOR layout
3d8ca53dd9b4c42b07ef974f92c3c4553cce3a79 Make more use of rtx_vector_builder
cd5ff7bc323a8fa6eafc4513bc814e4e7fa24120 Make CONST_VECTOR_ELT handle implicitly-encoded elements
f1bdc63a898f2fa164e79528c03e96a21a779e82 RISC-V: Fix for icache flush issue on multicore processors.
0f26839a0a779caa6c81d9fb3c31699f6ca86790 Add an alternative vector loop iv mechanism
d9f21f6acb3aa615834e855e16b6311cd18c5668 poly_int: vectoriser vf and uf
4b6068eadcf9801b9ef4e5f1b7b6354947c27ca8 poly_int: SLP max_units
c5126ce8cae4f14194414e266be91fdc4b756807 poly_int: vect_nunits_for_cost
9d2f08ab97bea3c299cce96a0760904501e002dd poly_int: omp_max_vf
87133c45a06aa9c04cb6bc13b3b0733ec43efcec poly_int: get_mask_mode
86e3672871beff63eebb195642566224c9f80891 poly_int: current_vector_size and TARGET_AUTOVECTORIZE_VECTOR_SIZES
9031b367ac87550552318f6516487c70f3ce9a99 poly_int: vector_alignment_reachable_p
e54dd6d3a791536543d4769aa09508b89d882f37 poly_int: vectorizable_reduction
9fb9293aca4ddbe4d11a334befaa7847b279ed39 poly_int: vectorizable_induction
fa780794692994d63febf4fb187567e245cdd4ee poly_int: vectorizable_live_operation
4d694b27c3697f7eef16a17eb926076bf836575a poly_int: vectorizable_load/store
c7bda0f40e1ddd9fc2c347fafeab93350be036f8 poly_int: vectorizable_call
cf1b2ba4ea9ee4b27e341c3f704416dc77d7172f poly_int: vectorizable_simd_clone_call
062d5ccc1180aa6bca717309d26408a029af1fd7 poly_int: vectorizable_conversion
a23644f23da672210ea6a443cefb7cd17111b160 poly_int: vect_get_constant_vectors
dad55d7014374121fd75112014ccadcfb9653182 poly_int: two-operation SLP
b064d4f9d6cb163da32d19cb172cbc4a5fffb39a poly_int: vect_no_alias_p
22afc2b31b75fa61b9558a9be8c8dbb7d4193b8a poly_int: tree-vect-generic.c
e112bba2fced713f1fa6c7f41c6925ee4573f215 poly_int: brig vector elements
d8f860ef70b33d0c49f31114c433b6c654c5a588 poly_int: omp-simd-clone.c
fece509bf196d58d9b31e04d816bb4ecd3f73e89 poly_int: fold_indirect_ref_1
d34457c138d06e989c871e7b295c06a8b9873703 poly_int: folding BIT_FIELD_REFs on vectors
07626e49a0ad431f8e69fcc472400780f3d98044 poly_int: expand_vector_ubsan_overflow
95fe7b4862dd3250e4d6b3e2c592b440b79613df poly_int: load_register_parameters
6b0630fbe8c34255f2739f63a8d3e5b636020bf4 poly_int: vec_perm_indices element type
0ecc2b7db7480fa33d31d95a114b024809cb6883 poly_int: vector_builder element count
16c78b665aa4ce64af71b6ac7ebaa96c9807be4c Directly operate on CONST_VECTOR encoding
b660eccf9b32ee3b962a77cf5565fa2771792c35 Add a fixed_size_mode_pod class
7b777afa955ad765500dfd53d6da990c84067197 poly_int: GET_MODE_NUNITS
edab8e10e3cc127335ae4fa7a5935a28acfae0a9 poly_int: vect_permute_load/store_chain
928686b1c6d0a8b791ec08b2588a5fb8118d191c poly_int: TYPE_VECTOR_SUBPARTS
73a699ae37a7fe98ad0b8c50ac95f5a882fd97da poly_int: GET_MODE_BITSIZE
cf098191e47535b89373dccb9a2d3cc4a4ebaef7 poly_int: GET_MODE_SIZE
5c0caeb37ff72cfd9153e164e9fd9eec7d56e969 Add support for MODE_VECTOR_BOOL
6ce12f6a1647ec2831f3c5908ecf9c23ae191d02 Allow targets to pick a vector prefix other than "V"
c6561a1af68d6439cedde6dc79d19eda9981a4be Add support for adjusting the number of units in a mode
6a3c127cc4e198bd20ae32c37c93cdf7defb0871 Improve vectorization COND_EXPR <bool op bool, ...>
799d6b901de53dcb43cea2fc10ebde9423d09c52 Improve spilling for variable-width slots
b194a722446f51ffa11ea49affe6893a6361cfac Use extract_bit_field_as_subreg for vectors
e251d3ec013bc46d58470988fc45566051a9030b Move code that stubs out IFN_MASK_LOADs
9ce4345afba69ff793ff4df992fc57ec29a92d93 Make vect_model_store_cost take a vec_load_store_type
aaeefd88f464de0a78fa66c8b5e2755babf0d47f Split mask checking out of vectorizable_mask_load_store
3133c3b628da0e39a3ae9cdbd4973de04b214589 Split rhs checking out of vectorizable_{,mask_load_}store
bc9587eb19f6407f5815d46d68325890e29f076a Split out gather load mask building
c48d2d35a122798c047ca7a0f7e0d64293023c44 Split gather load handling out of vectorizable_{mask_load_store,load}
c3a8f964ab330d8e64bb4d33c462c64f4fa35aeb Make vectorizable_load/store handle IFN_MASK_LOAD/STORE
517d489618b115219cdf8e2dc83085176a55eb7b vect-opt-info-1.c: Moved to ...
da374b5b5bb998311935ef989ed41fed1c16366e PR83675: Restore TARGET_VIS2 check for SPARC vec_perm_const
88654ce63de73fc51a47e7d54070c2c0b6b2f34b Allow VEC_PERM_EXPR folding to fail
ccf206491752abc05c608c8475bd925d3969adde Revert DECL_USER_ALIGN part of r241959
8fec4d222f0a35925bfdc4641612120b06d51c59 re PR rtl-optimization/83682 (ICE in simplify_subreg, at simplify-rtx.c:6296)
9ea52d27eca0c56c88a3941b413ef56950d9f5c3 re PR middle-end/83699 (Many 64-bit SPARC gcc.dg/vect tests FAIL)
3e1b80ff33f3a854e757fad185ee86dc30fb3e6f re PR tree-optimization/83580 (Wrong code caused by vectorization)
647c61f1c4623ec9591cb4f10dd94cff5a7b4fa8 PR target/83663 - Revert r255946
a25811c8858901fe414333c836e622257d1506c0 re PR target/83677 (PPC: The xxpermr instruction is not generated correctly)
c8a0c7b660a96081f320c8155f135a46b2202968 RISC-V: Fix -msave-restore bug with sibcalls.
7ad429a4de1197b4b032da0981a2c91ac5d0dd06 Fix permute handling when vectorising scatters
2072a319569067b9b99154e8d1bbec894034652f Mostly revert r254296
f6aa5171a1a0091bcc3741b1ffff9e8a962e728c re PR target/81616 (Update -mtune=generic for the current Intel and AMD processors)
6737facbb3c53a1f0158b05e4116c161ed9bc319 Don't use permutes for single-element accesses (PR83753)
2025a48d089d09011b60c1f5eb981ef71c79be4e re PR target/83399 (Power8 ICE During LRA with 2-op rtl pattern for lvx instruction)
8cad5b143e23668e4b59596972b2249ce2d2d637 RISC-V: Add naked function support.
1ad6e904d4fbad716bc65ac4d0bbdeecf3f552bc re PR target/83203 (Inefficient int to avx2 vector conversion)
c803b2a92822c57abf5464deaf5be5c31d8a4692 re PR target/80846 (auto-vectorized AVX2 horizontal sum should narrow to 128b right away, to be more efficient for Ryzen and Intel)
b27b31dc2d160453e7b05168f1dd195e73cb176b Fix --enable-gather-detailed-mem-stats build.
825010bb37db90c97c9409d3407c8538e3246577 Allow variable-sized temporary variables in gimplify.c
cf736b092afeabe90680443794eb384a9f930cd5 Handle poly_int vector sizes in get_vec_alignment_for_array_type
c0a465457beb663430257375ba529af74b0e4e56 Handle polynomial DR_INIT
646e47bcd15483fcafcc695efefd7a0ddeb4c716 Extra subreg fold for variable-length CONST_VECTORs
11e0322aead708df5f572f5d3c50d27103f8c9a8 Mark SLP failures for vect_variable_length
779fed5fdb6098e67213a82dfd27f5b326a75e88 Fix folding of vector mask EQ/NE expressions
695da53448dcc40e1e5db83bcf14d16217ffbd4a Give the target more control over ARRAY_TYPE modes
7e11fc7f5cecffe650b672ac1af212d4bd9f1335 Add support for masked load/store_lanes
3ea518f6f63e66e48f2d41cfa41e1efae653a484 Protect against min_profitable_iters going negative
018b2744fc7a4fe6fea1a078eae69c5465585668 Handle more SLP constant and extern definitions for variable VF
f1739b4829105fa95d6ff6244632d5977169277f SLP reductions with variable-length vectors
898f07b0458a48a87df334301ada3414ff08d3de Add support for bitwise reductions
7cfb4d93595da03abb4e6414758dc98eb7532b34 Add support for fully-predicated loops
0972596e6d2573a2c7e922c66b017974ed03ad89 Add support for reductions in fully-masked loops
c2700f7466bac153def05a0e070aa78cd2ffc0ae Allow the number of iterations to be smaller than VF
535e7c114a7ad2ad7a6a0def88cf9448fcd5f029 Handle peeling for alignment with masking
76a34e3f8565e36d164006e62f7380bfe6057154 Add an empty_mask_is_expensive hook
bfe1bb57ba4dfd78f8c1ac7d46cf27e8e7408676 Add support for vectorising live-out values using SVE LASTB
bb6c2b68d6961dfe98bece34e4418d7287ce7089 Add support for conditional reductions using SVE CLASTB
4aa157e8d2aec2e4f9e97dcee86068135e0dcb2f Allow single-element interleaving for non-power-of-2 strides
d1d20a49a788bdb82f09ada6377d932ceac07934 Use single-iteration epilogues when peeling for gaps
b781a135a06fc1805c072778d7513df09a32171d Add support for in-order addition reduction using SVE FADDA
bfaa08b7ba1b00bbcc00bb76735c6b3547f5830f Add support for SVE gather loads
ab2fc782509f934ef0cc22c31d743fcb63063c1b Use gather loads for strided accesses
429ef523f74bb85c20ba60b0f83ab7e73f82d74d Allow gather loads to be used for grouped accesses
f307441ac4d58d5a1690081f95b63b70b3e90b48 Add support for SVE scatter stores
a57776a11369621f9e9e8a8a3db6cb406c8bf27b Support for aliasing with variable strides
fc58f4ae9a4051ba6dabe08f3a243a2d97e0e80a Missing vect_double in gcc.dg/vect/pr79920.c (PR83836)
ff3cc569b2d3ba49fe6e2dc07ad761b5d9431c8a RISC-V: Increase mult/div cost if not implemented in hardware.
453ec1ad7aec7e8b9dfab8678330cc1b277f7c64 re PR testsuite/82132 (FAIL: gcc.dg/vect/vect-tail-nomask-1.c (test for excess errors) due to missing posix_memalign)
82279a515eae2b655eaba39e42e7dded25da5e2c Don't group gather loads (PR83847)
e57d9a82996838e73cc5470a1f3367e9c616b947 re PR tree-optimization/83867 (ICE: Segmentation fault in nested_in_vect_loop_p)
fb2f98bb6c5e016514bc3b93f8f1550e39e7d28f Two fixes for live-out SLP inductions (PR 83857)
84e777839cc458da2c24bda8e7be1665be1f709c vsx.md (define_expand xl_len_r, [...]): Add match_dup argument.
e423d5bc0481ee889c3fa251337978675848b0f4 RISC-V: Mark fsX as call clobbered when soft-float.
271134dd4894140542e38a4dcd8b4a07093d823a Avoid ICE for nested inductions (PR 83914)
09a7858b2c53eccf28f780f5f3e4f2764f440eb1 Check whether any statements need masking (PR 83922)
218e2a54e00f70950f441ded237cba8b07466816 re PR target/80870 (ICE building 7.1.0 sh-elf crosscompiler on macOS)
0d918596ace1f32716143a12fd2738bb0e9b2e20 fold-vec-abs-short-fwrap.c: Add xxspltib to scan-asembler valid instructions list.
97e52238b292ca744368f66980533c578838e94c Disable some patterns for fold-left reductions (PR 83965)
ef57eeb23260872cb601a848493488c24cb309c1 Fix vect_float markup for a couple of tests (PR 83888)
0ce42fe12b8e909f30bd57ab24e739d7d6218650 RISC-V: Add -mpreferred-stack-boundary option.
556d3a2433a6e2207c6f36fe292d89d81f46f924 Remove explicit dg-do runs from gcc.dg/vect (PR 83889)
b254c1a2322532451b419c8ce850ab7347f51469 Fix vect-reduc-or_[12].c changes in r257022
73598b3330377a9970f4489f5c5d517f62b51386 PR84033, powerpc64le -moptimize-swaps bad code with vec_vbpermq
5b55e6e333c97aaefc1db6c9d8411de578d05614 re PR tree-optimization/81082 (Failure to vectorise after reassociating index computation)
ee61fae2b1e8315f016384ab5b76dee796d880cd RISC-V: Add --specs=nosys.specs support.
d3f952c5e03e5eb0382e8b24fe8339728a66b922 RISC-V: Allow register pairs for 64-bit target.
7672aa9bc19e2444c3effa2f12274d60022f7d3c re PR bootstrap/80867 (gnat bootstrap broken on powerpc64le-linux-gnu with -O3)
85bb2f9a302acc28dbae6c368d63680aacb15eb1 re PR target/83008 ([performance] Is it better to avoid extra instructions in data passing between loops?)
31b6733b1628a861de4c545bff40acc97850dbbf re PR tree-optimization/81661 (ICE in gimplify_modify_expr, at gimplify.c:5638)
3ae129323d150621d216fbbcdeebf033ef82416f Use range info in split_constant_offset (PR 81635)
17855935101772b79dea35abb696f205f0215e22 fold-vec-abs-int.p9.c: Add powerpc_p9vector_ok requirement.
24fa220cffc9e6bda80d59fff6270a0d71af4ef8 vec-cmpne-long.c: Add p8vector_hw require to dg-do run stanza.
b210f45f527eb017810af815bbb97a8f6939385f re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)
4253435ecaf28bfc387407dd5a2fb4f4283ed203 re PR target/84154 (PowerPC GCC 7 and 8 have regression in converting fp to short/char and returning it)
3b263f5af20f4ebb92fad0b8797fe59e3cebf828 slp-pr56812.cc: Allow either basic-block or loop vectorization to happen.
414fef4e668856edb8ca885525679c5d5e691fd1 re PR target/84278 (claims initv4sfv2sf is available but inits through stack)
fff2290073cc2d57dcade125227b74cd27c48066 Use nonzero bits to refine range in split_constant_offset (PR 81635)
b5ec4de777870e2d4ff2a5de604eafd1bf0e50df Another fix for single-element permutes (PR 84265)
ebe4bf41d2b96a6b2f1de6a184eb0a7f5c2e5d00 re PR c++/83659 (ICE on compilable C++ code: in tree_to_shwi, at tree.c:6821)
c028d589e94a67795a25763bc95b778e1480f106 vsx-vector-6-le.c: Update CPU target.
5ca8e744641e1b03cc6e4cdbc46e7ece0750240d re PR rtl-optimization/84308 (Memory leak in spread_components)
e519d2e8199746e9d2b6ef70de55f7331df5bc47 re PR fortran/84074 (Incorrect indexing of array when actual argument is an array expression and dummy is polymorphic)
b10bc0d6f9d5e281465c6f8d4197f3158e46e093 Add missing intrinsics for _mm_mask[z]_sqrt_round_[sd,ss]
85c5e2f576fd41e1ab5620cde3c63b3ca6673bea re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)
78604de064490c8c12d2d4efadbd453f7c8c7685 re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)
848bb6fc0e502345536b25e1a110eb7f01eccbc1 re PR middle-end/84309 (Wrong-code with -ffast-math)
9bc5ecf3bcb25abbf868d52e7db076248e0ef174 RISC-V: define _REENTRANT with -pthread
e4c1b7e32283b3886847f9e14b33bda5e5d5d448 rl78.c (add_vector_labels): New function.
43edc4f5ac0d0a679b87338043f5d6a372750533 rl78.c (rl78_attribute_table): Fix terminator and entry for "vector".
316b2a2d842eca1cf1a2f31afba946d6328c5477 Check array indices in object_address_invariant_in_loop_p (PR 84357)
7c102986d6f8205ebc3952344c64edbcd7018fbc gcc/testsuite/ChangeLog:
10789329789fbb5b87883fca029e745a06ded6a0 RISC-V: Change sp subtracts so prologue stores can compress.
be77ba2a461eefdf4a2676b19025f36ec092c598 re PR tree-optimization/84037 (Speed regression of polyhedron benchmark since r256644)
7d6ce202609bd8bcbd8618507cef32e793b477e4 re PR fortran/84381 (replace non-std 'call abort' by 'stop 1' in gfortran testsuite)
73829f90459f40d7362fc3ac2d883ac98f1670a9 re PR tree-optimization/84452 (ICE in expand_simd_clones at gcc/omp-simd-clone.c:1612)
ef7866a3f1395f16872a0d61e111660e302a674d re PR middle-end/82004 (SPEC CPU2017 628.pop2_s miscompare)
9bd958c5f361337b15958be8641d59ad38bd0a2b Fix incorrect TARGET_MEM_REF alignment (PR 84419)
b613cc2e9120ea002f8a0855d2620ee4ba8fbfe5 re PR go/84484 (libgo configure tests fail to find -latomic)
7874b7c5b59923d8a56eaf41f7518c71b910355e re PR target/81572 (gcc-7 regression: unnecessary vector regmove on compare)
6f11ddd8b7dc020545d0d0e8ae20d34b83265ff6 PR c++/84424 - ICE with constexpr and __builtin_shuffle.
8562191ad25bd094d393ef4e65b96542a14e8fab re PR c++/84556 (C++17, lambda, OpenMP simd: sorry, unimplemented: unexpected AST)
d99dcb77bbbfdaf30c5993ea917001da259f47ba Make fix for PR 83965 handle SLP reduction chains
b1ddb654aba3859e025565c0af35d1a704c8e5d0 re PR tree-optimization/84512 (Missed optimization: should be precalculated in compile-time)
e688c1ddef2462da3b0dc86e0ecdab87c77a6829 re PR target/84534 (several powerpc test cases fail starting with r257915)
962e91fcf043edab3684dd0564efd3df219d3cb1 Use loop->safelen rather than loop->force_vectorize
70088b953b22eb6a9878d272e4e2a8add136ebc8 Avoid &LOOP_VINFO_MASKS for bb vectorisation (PR 84634)
74f8705ebe6ebf42bcfb46cf1c9a26a5ab3bace8 re PR c++/84578 (ICE with flexible array member and constexpr)
b79fa2f609c70a70125c979e363176002d1f9acd re PR tree-optimization/84777 (-Os inhibits all vectorization)
0dbacfcfadec514b5ccd4ae70fe53dc589ae7439 Fix PTA info in IPA ICF (PR ipa/84658).
a7af848991809005fee685e3fe15a39110136f3e RISC-V: Add and document the "-mno-relax" option
9bb45a958d5281b3979f538a05ffa80c6833c4f7 re PR c/84853 (ICE: verify_gimple failed (expand_shift_1))
22534ea5549e970de4466fe492dacc61c2ff471f re PR target/84711 (AArch32 big-endian fails when taking subreg of a vector mode to a scalar mode.)
15f0c25f4e9194fd03b2788769b7e1163e5caabd [testsuite] Require vect_int_mult in pr84512.c
ce811fc49bb470856f6c4953c071d5b3db6485bb re PR c/84909 (typo: conversion from %qT to to %qT)
928b965f29f587bb033555f0db646c94afe8e7ef Don't try to vectorise COND_EXPR reduction chains (PR 84913)
8455b50eccdeac648fd0ebd0b7dd60b0e8bbffbb re PR target/84711 (AArch32 big-endian fails when taking subreg of a vector mode to a scalar mode.)
c0d3d1b681f7847299b2e8e14c61cf903d6ee8fd RISC-V: Fix bootstrap failure.
df1f46241d8f1869b492023c9f4e1389a12675c4 [testsuite] Add nvptx xfail to pr84512.c
91d014fffae1fcf1eb750d40e622e5b80cd1a4ec re PR target/83789 (__builtin_altivec_lvx fails for powerpc for altivec-4.c)
5a0729f5a4c323aaee60fa93a1b0823c74e32f4e Fix some libstdc++ testsuite failures
aa1c94299c2b81f7728011ada92eb7761144b854 re PR c/84999 (ICE in make_vector_type, at tree.c:9561)
a199d5e74bf37ee4306c70a03c6c58f9935d54c3 Use SCEV information when aligning for vectorisation (PR 84005)
36a4fb13d88960c9950a2a68b05321422245658a re PR testsuite/84004 (gcc.dg/vect/vect-95.c XPASSes)
b36306e9bc664cdbc2f65ecc33867cb7b6e896b3 re PR testsuite/82847 (gcc.dg/vect/slp-perm-9.c fail)
153dba6cbb3b37ad07d23d212890b2bd055ac05f re PR c++/85077 (V[248][SD]F abs not optimized to)
69c94135fc0d62a7ccb017dcc0e0b79c44d3d26e xmmintrin.h (_mm_max_pi16): Use __vector __bool instead of __vector bool.
7be6ee78d62f0fe1ea00fb6c436b535b391f6d92 re PR middle-end/85090 (wrong code with -O2 -fno-tree-dominator-opts -mavx512f -fira-algorithm=priority)
b7ef9225f7f997a37f96a3a9c2eb31533865822b RISC-V: Fix for combine bug with shift and AND operations.
c23ecd7b27ee7bdb458dacbe0a3f826b4efb4953 re PR testsuite/85154 (gcc.dg/vect/vect-95.c fail)
4304d6180adc0b3ef2c9fe2a63e829d5f518a12d re PR target/85169 (wrong code with vector member insert)
8ab30b9778a46cbf0a0853c78cd799b9afca61c5 emmintrin.h (_mm_cvtpd_epi32): Use __vector rather than vector.
f46de383ed507006d6f1d9737856ad0db81ba470 re PR tree-optimization/85191 (gcc.dg/vect/slp-perm-9.c FAILs)
628a15343e494e457c647347e879c69a62016e0c re PR c++/85146 (ICE with __direct_bases for declared but not defined struct)
61f84e25f6cbfb182bfaa4334d44f3c865c4c0b7 re PR c++/80956 (ICE with abstract class vector)
4d47fe5a8f4a7d0275237c2fb45bad8f654467eb RISC-V: Support for FreeBSD.
eda71a9eeaaf1ea16ba56d8cc5a4eb194f6025f7 re PR tree-optimization/85257 (wrong code with -O -fno-tree-ccp and reading zeroed vector member)
f0caea4872076e02cad511db85a2437317c035c1 re PR fortran/83064 (DO CONCURRENT and auto-parallelization)
eb38d071636da1ea2d0f9a068c86c7ceee2634b2 Add missing cases to vect_get_smallest_scalar_type (PR 85286)
2377345dcef913b6f957e1e27a6c82efede47cfa re PR testsuite/85190 (gcc.dg/vect/pr81196.c FAILs)
ef45fd3ba15237b751b530bff1f2691c4988d02b re PR testsuite/85190 (gcc.dg/vect/pr81196.c FAILs)
65739a688542b637b6a9f99aed2de84d9b84460c re PR tree-optimization/82965 (gcc.dg/vect/pr79347.c starts failing after r254379)
2368eaf95dff456f6527f6d82579af0246141553 re PR fortran/81773 ([Coarray] Get with vector index on lhs leads to incorrect caf_get_by_ref() call.)
34722c3669ee87bd6754d4346e12e822641b0cd7 re PR target/85080 (gcc.dg/vect/costmodel/ppc/costmodel-pr37194.c fails starting with r248678)
035fc2add18c0dd06c22bd158a47bf35b8c1c528 RISC-V: Fix 32-bit stack pointer alignment problem.
f53e7e138cf20f1a10fbcef2c14d838f494d4610 re PR tree-optimization/85446 (wrong-code on riscv64)
19986382015e2aa8dc539bf31065af4bdff5ce84 re PR tree-optimization/84737 (20% degradation in CPU2000 172.mgrid starting with r256888)
18108d94e9aff71811a7923fe67db7626378f565 re PR tree-optimization/85467 (ICE: verify_gimple failed: non-trivial conversion at assignment with -O2 -fno-tree-ccp --param=sccvn-max-scc-size=10)
e91eba31fdc49d928090a9b0424247fd6029f044 [nvptx] Fix calls to vector and worker routines
9b922d6aaf143d35ed5f1c116f0a0702df6ae04c RISC-V: Make sure stack is always aligned during adjusting stack.
559fb136c980cd1d52af43202c3a9dc511ea2240 RISC-V: Pass --no-relax to linker if -mno-relax is present.
062c0a7b2f8dc58f8bb7c6d3448866812bfc75c1 re PR tree-optimization/85478 (ICE with single element vector)
c76d9edb09d262a3badc87d5583abcfbc2e94854 tree-vect-data-refs.c (vect_get_data_access_cost): Get prologue cost vector and pass it to vect_get_load_cost.
af1682fc3aaff288f7ac95cf5585971cef15f0ab Microblaze Target: PIC data text relative 2018-04-30 Andrew Sadek  <andrew.sadek.se@gmail.com>
b94c2dc138c60636e3898b04c1026cbb1b868b26 Add VEC_ORDERED_REMOVE_IF
9e4da9b5d5d3d8e14ab1748fafb08c6b9bfcf629 Tighten early exit in vect_analyze_data_ref_dependence (PR85586)
d6476f90da4bfcb8644da32d3b4c4685a72bc84e re PR tree-optimization/85597 (internal compiler error: in compute_live_loop_exits, at tree-ssa-loop-manip.c:229)
27db01d8039a1a1664bcd1ebd1f66cedcfe72398 deque.tcc (deque<>::_M_assign_aux): Cast to void to ensure overloaded comma not used.
dd17274465724f65c09dc2f654d92f6ba92cd90f bb-reorder.c (sanitize_hot_paths): Release hot_bbs_to_check.
53481a280fa276a7c53e1279e3a58d7e7e736064 vsx-vector-6.h (foo): Add test for vec_max, vec_trunc.
080dc24383a602a5a4095eb05b04100f15ba1ad4 [BRIGFE] phsa-specific optimizations
93249dde869329933da091a355032c95e80daf44 Backport of RISC-V support for libffi
ad088249a266b75343cfa293ae16cc03996f3695 Tighten condition in vect/pr85586.c (PR 85654)
ec332f1b44acfdc8fd08680ea75b9f3c23626cd0 Make std::regex automata use non-debug vector in Debug Mode
90aabc7e9be942324952d8705e753ff02cf631a3 macros.h (__glibcxx_check_valid_range_at): New.
37d57ac9a636f2235f9060e84fb8dd7968abd1dc [PATCH] RISC-V: Use new linker emulations for glibc ABI.
3ba4ff4130903a3ded931d715a2204bd8834fe60 Add clobbers around IFN_LOAD/STORE_LANES
a296d6d3bdd83a617e789641b828ff53f65a4ec6 tree-vect-slp.c (vect_bb_slp_scalar_cost): Fill a cost vector.
f2410266a00a3ebd6db07007aa82333b4f6ee6c2 RISC-V: Add with-multilib-list support.
5a599c460e3846df80aaabd2b4629544337167ba re PR tree-optimization/85692 (Two source permute not used for vector initialization)
b0e01682467a22a00530704669d8c253e6dac522 Remove unused headers from tests
1f3cb66326d724cca10ac6097ab32c53191c53ff Handle vector boolean types when calculating the SLP unroll factor
68435eb293a6b9c161936bccab66e4b1f702372b tree-vectorizer.h (struct stmt_info_for_cost): Add where member.
6747254bbaba5bfdb75c7d24e2d14ffaf7cece3b vsx-vector-6-be.c: Remove file.
110fb19f6c6a4a9dfb9cfe00d3295cccf5b00507 RISC-V: Minor pattern name cleanup.
28a8a768ebef5e31f950013f1b48b14c008b4b3b re PR target/85323 (SSE/AVX/AVX512 shift by 0 not optimized away)
6a03477e85e1b097ed6c0b86c76436de575aef04 re PR target/85323 (SSE/AVX/AVX512 shift by 0 not optimized away)
eb69361d0c5e98423e7ad7a537bc3250e083de4a Allow gimple_build with internal functions
bb4e47476537f6431fbbf29cc804252b1504bbc2 re PR tree-optimization/85793 ([AARCH64] ICE in verify_gimple during GIMPLE pass vect.)
7bbce9b50302959286381d9177818642bceaf301 RISC-V: Optimize switch with sign-extended index.
09baee1ab152afb0466c00ce87f0d681f2a50e21 RISC-V: Add RV32E support.
67e9518e20b8b836bbaa9dc783bd6a4db56c2bcb re PR fortran/85841 ([F2018] reject deleted features)
4515e413cb72d3a71b41d3e85da1be03fa88677d re PR tree-optimization/85863 (ICE in compiling spec2006 fortran test case solib.fppized.f starting with r260283)
927a00917dfdf5585159803211c71910b32da10f re PR fortran/85841 ([F2018] reject deleted features)
aeaa0347e94b1dfa040809b3b098fcc0474d45f7 [Ada] Vectors: spurious error in -gnatwE mode
159440699bf6f97dccc94377d9d69e540a1904dc Fix SLP def type when computing masks (PR85853)
c453ccc2335bf4267a154c9385eb50a8c45235a1 Use canonicalize_math_after_vectorization_p for FMA folds
9d4ac06e0235697c7fa3144b6790b779e6385ea5 Add an "else" argument to IFN_COND_* functions
2c53b149b7476fabd329429b2a6dce090f580ff4 tree-vectorizer.h (STMT_VINFO_GROUP_*, GROUP_*): Remove.
0d2b3bca81acf226e6c10defbc6072de4cf7e75c Fold VEC_COND_EXPRs to IFN_COND_* where possible
8f76f377861b4195487416806c4a0eacabc433c9 Prefer open-coding vector integer division
6c4fd4a9fec0af65249a11e44341b5f3f5b209b3 Add IFN_COND_{MUL,DIV,MOD,RDIV}
8e846c6670b85cd69a5760a604d8f9ce0dbc3730 tree-vect-data-refs.c (vect_find_stmt_data_reference): New function, combining stmt data ref gathering and fatal analysis parts.
b55f342bdd8bec16b727a5889c589dd85c5ca3c3 re PR target/85832 ([AVX512] possible shorter code when comparing with vector of zeros)
27312bf2148af2bea946fcec8f4c2e1231e8d63b tree-ssa-alias.h (refs_may_alias_p): Add tbaa_p bool parameter, defaulted to true.
99dcfb5fc184d4eeb2753ae9475bda4d58266161 Fix test case failures for pdp11 target.
d0ebdd9fce00f5fbfec615d72f1dedf0cd7762a6 RISC-V: Add interrupt attribute support.
70d22cdd77fdd3a11514735a7992b5f07bd50159 re PR target/85918 (Conversions to/from [unsigned] long long are not vectorized for AVX512DQ target)
b29502e735e6eafd451a27422e5c8fe211ad0716 re PR tree-optimization/85934 (ICE: verify_gimple failed (error: type mismatch in vector pack expression))
3b1cffccce40e80eeb5f24893ce4fbd0e242b319 re PR middle-end/85933 (FAIL: gcc.dg/sso/p8.c   -O3 -finline-functions  (internal compiler error))
f8c0baaf31ac987bd1e85a3ba2fa8a2edeff92a8 tree-vectorizer.h (struct vec_info): Add stmt_vec_infos member.
1bda738bab8193f0fb4551672d3be928d2015cd2 re PR target/85918 (Conversions to/from [unsigned] long long are not vectorized for AVX512DQ target)
e379122d1f078d230514ff862c4f9053c2898af4 tree-cfg.c (verify_gimple_assign_unary): Add checking for VEC_UNPACK_*_EXPR.
fec0bf3084f5d5531fcdc81e13b4813db31a1750 tree-vect-data-refs.c (vect_preserves_scalar_order_p): Make sure to use non-pattern stmts for get_earlier_stmt arguments.
5af3ff21594b92c698fdc43269a0020f95a15c23 RISC-V: Fix a comment typo.
3c5d07ab057a1cbe23ca655d172bfb53581be960 [Ada] Spurious tampering check failure
57c454d29c12a948fee4a0b437fd57af870710b4 tree-vectorizer.h (vect_dr_stmt): New function.
fb289175ff675d90d5ab24e60c177e4e943d0ebe altivec-12.c (main): Fix declaration of ucz to make it consistent with the naming convention in the file.
69311919e2f67b5bcf474700dd2c1127553addcb Commit 260294 on 2018-05-16 by Carl Love was supposed to add the following files.
1fc9aa543f41a1485187c96806950795a7966974 re PR target/85832 ([AVX512] possible shorter code when comparing with vector of zeros)
8566678b9da3db996f7566ecb691be07ff376c8f Fix expand_expr_real_1 handling of BLKmode bitfield references
fd1e52dc252b33f918891458774f784e96fdf47e RISC-V: Don't clobber retval when __builtin_eh_return called.
1b58c736db9d28975f596f5175c9f9470723c166 re PR target/63177 (Powerpc no-vfa-vect-depend-2.c and no-vfa-vect-depend-3.c failures)
ec74725ce3ed5c96783b76992940d99563c82a47 RISC-V: Add interrupt attribute modes.
1ac2bdb45faaa455afcb3b77eb824dde429c27fb Port IPA CP to edge_clone_summaries.
4af78ef8695b08bd9b7061b350631d2ca5682470 Convert dump and optgroup flags to enums
adff928a6d5fba623c579898cb92077abc970443 vsx-vector-6-be.p7.c: Rename this file to vsx-vector-6.p7.c.
a14175560cca5da1f9ff776c5c7309473397d43d Define special members as defaulted
058872eaadac43dcf75839ba6b951619fea14fe1 p8vector-builtin-3.c: Add vec_pack test.
87cbbc45a950f382853e2e4cf494cdfab62f0e5b libgo: add riscv and js/wasm as known targets
8fd966327ae16a820143f589dd48b8c17a6f6ae5 Tighten LRA test for reloading the inner reg of a paradoxical subreg
7b76867b211f2db8df2f98926ef47fb8c9ea29ee tree-vect-patterns.c (vect_recog_vector_vector_shift_pattern): Properly set vector type of the intermediate stmt.
4c1d999a7e937da0d417e8153f54b646603bb210 PR libstdc++/83982 fix exception-safety guarantee of std::vector::resize
fa6852317327d978d4069175952109505204f6ae re PR tree-optimization/86159 (g++ ICE at -O1 and above on valid code: incorrect type of vector CONSTRUCTOR elements)
d1ac60d5759dc63e4f03311d6c85cda8c9d12133 tree-vect-slp.c (vect_slp_bb): Dump MSG_OPTIMIZED_LOCATIONS here, also noting vector size used.
8422c296a8cbe0317fd06aace694ed0c01f67d5b [testsuite] Remove xfail from vect-abs-compile.c
adac3a685da705d6811d4069f57e1bc73a95a957 Introduce DUMP_VECT_SCOPE macro
df0aef6d7e755b5150ddd8fe8fa4209461541cf0 re PR tree-optimization/86179 (ice in get_later_stmt, at tree-vectorizer.h:1108)
5b04d77ed52bb0317f9793bc95a1ec0370571f35 tree-vectorizer.c (try_vectorize_loop_1): Split out of ...
d54a098e48987e7368ff190b703efd72aba9e6d9 [1/n] PR85694: Allow pattern definition statements to be reused
e3947d809d75c6bc47e600ce490c238006c2de2b [2/n] PR85694: Attach a DEF_SEQ only to the original statement
ed7b8123fab1de4d6da98774262c123f6d1226f9 [3/n] PR85694: Fix dummy assignment handling in vectorizable_call
44ae7a002c23ff0ab884350b5f05876ece985387 [4/n] PR85694: Remove redundant calls to types_compatible_p
1f78617090283f22825807fcc0533e27e983dcde [5/n] PR85694: Remove dead WIDEN_SUM handling
259273074e86ec82c73a4420c102912de6baeabd [6/n] PR85694: Add a vect_get_internal_def helper
49d8df1b95ac68fee5420a4ad7a0cab006302e0e [7/n] PR85694: Add a vect_pattern_detected helper
1cbfeccc8d5ddade3a1727e18fe31c1e83e81701 [8/n] PR85694: Make patterns check for target support
5fa234669f3882aa2190c916df497259153412e4 tree-data-ref.c (dr_step_indicator): Handle NULL DR_STEP.
31dd69b7ff60979b615e45229f759613873989e6 Update OpenACC testcases
84ee432143874a776a5597f77615db3f39cb7c58 altivec-7.c: Add qualifiers for counts on AIX versus Linux.
8c9632905d39afc3c431d0ff4d318d15c9250344 tree-vect-data-refs.c (vect_check_gather_scatter): Fail for reverse storage order accesses rather than asserting they cannot...
f2227a6696f136a181a208d291eb44769a7721e0 tree-vect-data-refs.c (vect_find_stmt_data_reference): Modify DR for SIMD lane accesses here and mark DR with (void *)-1 aux.
ca823c85882f5a0ca9779d8cd7adfcec02549d3b tree-vectorizer.h (struct vec_info_shared): New structure with parts split out from struct vec_info and loop_nest from...
3685dcd7fb618b8dc7c7352a76a55efa959aae84 PR libstdc++/86292 fix exception safety of std::vector<InputIterator> constructor
9ae91886f6a59fbcba0559299e170ee82fa592cb re PR tree-optimization/86287 (AddressSanitizer: heap-use-after-free on bootstrap with -O3)
4f5b9c803ac4edc639d8bf4a827ba40e4dab4db0 Introduce dump_location_t
d5e545a7cc2c9d5e5ed4534e8f7901723ded4d89 fold-vec-neg-int.p8.c: Specify powerpc_p8vector_ok requirement for this test.
356d53635faecee4b8abfc6b21208432c72eebff Add test case that was supposed to be added in commit 255556 on 2017-12-11.
c2fd033cdf1876ff4ec91c747c6fc569de19b322 tree-vect-data-refs.c (vect_analyze_data_ref_dependences): Assert compute_all_dependences succeeds.
6475e077a091ea57b7442ed35feaf031728bdeb2 dumpfile.c: add indentation via DUMP_VECT_SCOPE
894dd753ca8a4120078324cc6cf0ba01afff9cab [9a/n] PR85694: Reorder vect_is_simple_use arguments
0f8c840c28c11b13e630b55ad3dc6e0670b4f817 [9b/n] PR85694: Make vect_is_simple_use look through pattern statements
7b98e98a98c95029434200cdfc5ad87e204d79b4 [10/n] PR85694: Split out check for vectorizable associative reductions
41949de9de0c8ebabb7adb2701e775ecd671aa72 [11/n] PR85694: Apply pattern matching to pattern definition statements
003479340f5ae6b7407b5c92e3e1915101552377 [12/n] PR85694: Rework detection of widened operations
3330053ecaafe8bca82cc3845be9b2d01a614eb1 [13/n] PR85694: Try to avoid vectorising casts of invariants
666fdc46bc848984ee7d2906f2dfe10e1ee5d535 RISC-V: Add patterns to convert AND mask to two shifts.
d379ac227de025d1d44d43ae0bf892f63e4a324b Fix typo in vect_recog_widen_shift_pattern
eb153f07b3618de080b778ffff5693d94bf785b4 RISC-V: Fix interrupt support for -g.
30f502eddecac8ecfbec4b86f3a80f1859076b6d tree-vect-stmts.c (vect_is_simple_use): Consolidate dumping, always set *dt.
3239dde94019f11e6c1a8c6ae2b3f7d944689148 Avoid matching the same pattern statement twice
370c2ebe8fa20e0812cd2d533d4ed38ee2d37c85 [14/n] PR85694: Rework overwidening detection
4ef79c960aa0967cf0298dc496a30a40d86ebd3c [15/n] PR85694: Try to split existing casts in widened patterns
0267732baeb06ec100c1d610197bb88aae1c5123 [16/n] PR85694: Add detection of averaging operations
ba9728b0349aa6dbfae020b283ed8ca9f073bf1f Clean up interface to vector pattern recognisers
9c58fb7aa5e719a3ce9acd94740371e139c035be Ensure PATTERN_DEF_SEQ is empty before recognising patterns
776bfceac8ba24bacd1e76fc768e9b2b10c0e81c Pass more vector types to append_pattern_def_seq
25d861fef34b44f720de813410f29096d4406b02 Remove "note: " prefix from some scan-tree-dump directives
315aadc8642b72fc2d7172312a35e18074cca85b stl_algobase.h (__niter_wrap): New.
15333be70addf4eb750d82d5e298cd3ad33b711a re PR tree-optimization/85694 (Generation of vectorized AVG (Average) instruction)
c98446bc37da231419f6524d788dc6a4712458c8 [testsuite] Remove 'note:' from scan-tree-dump directives
d6e5a37a0402177713e9496f0d852e2e1147437f Correct subreg no-op handling for big-endian vec_select.
09cff37bfdcc9407a72262cbdd6fd3350488d934 Replace NO_IMPLICIT_EXTERN_C with SYSTEM_IMPLICIT_EXTERN_C.
edace3e2295db80d32b1a77676a3697c5029d71b RISC-V: Add support for riscv-*-*.
8660e7908fb884b5a0dda37f937ecced3da16070 Require sse for testcase on i686.
6cd6119c421211c989f53f6d4e457d7523bdacf5 Makefile patches from initial RISC-V cross/native build.
7cf2b955893a333c6f6e4c60427832e97dd2bff7 RISC-V: Initial riscv linux Ada port.
962b3564e98b2634a2d001eceb946d8f15f9bfae re PR target/84711 (AArch32 big-endian fails when taking subreg of a vector mode to a scalar mode.)
4a669ac35988fa6de5931455fb59c713563bc58b tree-vrp.c (vrp_int_const_binop): Change overflow type to overflow_type.
11fcb8f2a69bfdeeafc4b0594b71b85d4e285242 RISC-V: Finish Ada port.
100291de48d70d56f8ec31e8ba8d9edd1ee95b45 re PR fortran/86421 (OpenMP declare simd linear ref in module causes gfortran to bail out)
6a86928d9882c17b7526d657a38cb314fa0aaba6 Extend tree code folds to IFN_COND_*
b41d1f6ed753bf7ae7e68f745e50c26ee65b5711 Add IFN_COND_FMA functions
0936858f081b77319f8f6e5825dc86d2861d0445 Support fused multiply-adds in fully-masked reductions
2c58d42c3ed599b4c2976fc173eefd8e016ea216 Use conditional internal functions in if-conversion
5249ee4d79855edda91b26bb07c9c8737cdfc96c Implement SLP of internal functions
8528f27bda0fd315eef48827c10a9c488071ceb3 RISC-V: Error if function declared with different interrupt modes.
ac07bbf29aefd11bd0786d954592a424ccf3dfc5 RISC-V: Silence expected Ada testsuite warning.
12af29ab10fb5677cf947bcd7530c5f57c97522e RISC-V: Fix nested function trampolines.
e6de53356769e13178975c18b4ce019a800ea946 Clean up of new format of -falign-FOO.
eb5926451a7873a62de7ef02cba9f671bad14b88 re PR target/86557 (missed vectorization with std::vector compared to icc 18)
ef856020de21b5e66e0aaec2d2b186817ae2829b PR bootstrap/86621 - 'alloca' bound is unknown in tree-vect-slp.c:1437:16
651a79532c8e87ac096419d9852a295f9e284fe4 re PR target/86591 (gcc.target/powerpc/builtins-1.c fails starting with r261904)
ed623edb473d862673fc0bbc6b878074667ca5fb Avoid &LOOP_VINFO_MASKS for bb vectorisation (PR 86618)
e8dce850a7ffcffff4690f62f85e0ed4ede4d82a Fix ceil_log2(0) (PR 86644)
e98edc20cd615f43afce32c5de40d59fa25e40ed optimize std::vector move assignment
2b69e93cd1af407becc58ba5c48252af20d35e44 Remove dg-require-cstdint directive from tests
4cdfee3f206d784f8a502af4f34180a0762df4fe [libgomp, nvptx] Handle per-function max-threads-per-block in default dims
0847049dc7a630e4bfa079767ed42c742ff6276b [01/46] Move special cases out of get_initial_def_for_reduction
ac1359be3a39f4d12342c98c2a2e77bd59a839f4 [02/46] Remove dead vectorizable_reduction code
6e2dd807c2aaaba8906a36766b9f98dfbeddc27d [03/46] Remove unnecessary update of NUM_SLP_USES
83a400d0a57c998508c31389286d6fb427985139 [04/46] Factor out the test for a valid reduction input
79cc8302f73a56dd1e84e87a26d35ed7e5bfea53 [05/46] Fix make_ssa_name call in vectorizable_reduction
4fbeb36361aab0c197c01f6268e442446f2c1fa8 [06/46] Add vec_info::add_stmt
6585ff8f3a55bbfed6a4f2c2addac7a27ed087d3 [07/46] Add vec_info::lookup_stmt
c98d05955ba54fcdbae37f2a9e81b8cca6f1ca59 [08/46] Add vec_info::lookup_def
0d0a4e205bb6da84e9218c483acf7b13453f0698 [09/46] Add vec_info::lookup_single_use
dbe1b846648fad29d105e2e503120a4279a32593 [10/46] Temporarily make stmt_vec_info a class
fef96d8e2a370e826acdf914d51c88aa2657340a [11/46] Pass back a stmt_vec_info from vect_is_simple_use
e1bd72966309ac459a55e2bc64ad355272d402f5 [12/46] Make vect_finish_stmt_generation return a stmt_vec_info
10681ce8cb6227ae5c11cc74ddf48f2fc5e6f87e [13/46] Make STMT_VINFO_RELATED_STMT a stmt_vec_info
1eede195fc02f5198b48d75b3fb7705c4c1493dd [14/46] Make STMT_VINFO_VEC_STMT a stmt_vec_info
16edaeb8a6b1cd72b2eedfe8cac684ac3f4785c2 [15/46] Make SLP_TREE_VEC_STMTS a vec<stmt_vec_info>
542ad08cea053ac4a02729e2f37c67bb50019bc0 [16/46] Make STMT_VINFO_REDUC_DEF a stmt_vec_info
32c91dfcfddc4f3c594aa24e803ee605a259f2a9 [17/46] Make LOOP_VINFO_REDUCTIONS an auto_vec<stmt_vec_info>
b978758186fa187d52d2c4a02cdc8474d361a0dd [18/46] Make SLP_TREE_SCALAR_STMTS a vec<stmt_vec_info>
78e02b3bbb00fc898c550b88161838eb5dd95806 [19/46] Make vect_dr_stmt return a stmt_vec_info
bffb8014d0566af64c3cd5c7afac21c125a14df2 [20/46] Make *FIRST_ELEMENT and *NEXT_ELEMENT stmt_vec_infos
f698fccf099a69415619858062431c9383caf070 [21/46] Make grouped_stores and reduction_chains use stmt_vec_infos
c26228d41bcbb1a8027570cbef7a2c00ed75f2d6 [22/46] Make DR_GROUP_SAME_DR_STMT a stmt_vec_info
7bcbf2d83269394899f27695e19715dca8f098bf [23/46] Make LOOP_VINFO_MAY_MISALIGN_STMTS use stmt_vec_info
211ee39b9d1d7d670dd4885bd1f4f038680a1e90 [24/46] Make stmt_info_for_cost use a stmt_vec_info
95c68311b61f6bbb013d0eb2e4403f01c76bf622 [25/46] Make get_earlier/later_stmt take and return stmt_vec_infos
beb456c375ea71d57e35400e9b7107e09e996965 [26/46] Make more use of dyn_cast in tree-vect*
91987857e694109fa312c9d2d83785aee5fb9c28 [27/46] Remove duplicated stmt_vec_info lookups
86a91c0a7d39103bc26f6a9f6cd0b329c9027161 [28/46] Use stmt_vec_info instead of gimple stmts internally (part 1)
a1824cfdcd12f2c928b2aa00278082c56e818497 [29/46] Use stmt_vec_info instead of gimple stmts internally (part 2)
eca52fdd6c570658e417ab38d25e0874d0c9c044 [30/46] Use stmt_vec_infos rather than gimple stmts for worklists
825702749aee7017548db2075cf225a6ed2e3ca8 [31/46] Use stmt_vec_info in function interfaces (part 1)
32e8e429c685629fc4363138f564f41de47aa7a2 [32/46] Use stmt_vec_info in function interfaces (part 2)
d7609678843a0711cf77b5530149658c3997a906 [33/46] Use stmt_vec_infos instead of vec_info/gimple stmt pairs
e4057a3920490abb69bb22237ebe380ac4fd64f5 [34/46] Alter interface to vect_get_vec_def_for_stmt_copy
cef6cac8bcacc3314760686dfae7b23efdf7db07 [35/46] Alter interfaces within vect_pattern_recog
634e7150449157267db1a1152370b11446acb6d0 [36/46] Add a pattern_stmt_p field to stmt_vec_info
f44fb7aa84e0c1f9c0721a69f7b0f157d6058686 [37/46] dr_aux tweaks
89fa689a9e898ccb81b966477b3ac4e254461b05 [38/46] Use dr_vec_info to represent a data reference
1e5e6ff5e63127a7a6ae4ee64d08a22a41a021c4 [39/46] Change STMT_VINFO_UNALIGNED_DR to a dr_vec_info
f5ae28565e7b0788c6b7a4945c2b67c54f46c45a [40/46] Add vec_info::lookup_dr
b5b56c2a039cd308a9d00fc35baf65c1fb59070b [41/46] Add vec_info::remove_stmt
9d97912b85ac4a86767f4f1b6c47efa1ce0ba6af [42/46] Add vec_info::replace_stmt
458135c0354f19eb2bd032d42c27076def8c31de [43/46] Make free_stmt_vec_info take a stmt_vec_info
6ef709e50228eb23c25d3620ac6eadb6d765d40d [44/46] Remove global vinfo_for_stmt-related routines
dddecc5c01a0cdeb06704ed98eac881ead550664 [45/46] Remove vect_stmt_in_region_p
ddf98a96d0112377361258068a167ba7e51ed345 [46/46] Turn stmt_vec_info back into a typedef
047fba343dc9fba211a10058bc423c6373cc57f8 Fix over-widening handling of COND_EXPRs (PR 86749)
99615cf595266cdbe27fb3caf201fa38bd1f8d8b [01/11] Schedule SLP earlier
8fe1bd30e6e1319cde10ed417abbfe87d3511edc [02/11] Remove vect_schedule_slp return value
b0b45e582f31b496ea37a76a20b1f79b25165635 [03/11] Remove vect_transform_stmt grouped_store argument
211cd1e2358d52d3863f727b650c65650dd5ce89 [04/11] Add a vect_orig_stmt helper function
6e6b18e5fbe6be62334c9007a58224fb3700d43a [05/11] Add a vect_stmt_to_vectorize helper function
2d4bca81bd7dceb0701e5cd87132d8e3892c22ba [06/11] Handle VMAT_INVARIANT separately
beeb6ce8631cd0e23160dbbafd5f43d16a749e02 [07/11] Use single basic block array in loop_vec_info
41b6b80e1a70f3731a45d991a83c5bc4a7f73ea4 Fix remove_stmt in vectorizable_simd_clone_call (PR 86758)
a19f98d5defb7a173725e89b1fed532c66561f61 Fold pointer range checks with equal spans
ca9a1314ec5f2b58921e24abdcebae1482c0e2c6 xcoff.c (struct xcoff_line, [...]): Remove.
0246112a9d59b22cc06165b6586b8dc0d76b72a1 Handle SLP of call pattern statements
1ae45251d9fb6b68046cbe1c6f942e1aacdeaf0a [Ada] Partially revert "Makefile patches from initial RISC-V cross/native build."
4c9291262affd31e66dec1c8af607e07a8ce2904 Fix gcc.dg/vect/no-section-anchors-vect-69.c on SPARC etc. (PR tree-optimization/80925)
4beb66421fe0e19d3310c75af3502018119423c6 Fix invalid assumption in vect_transform_stmt (PR 86871)
3dec9a89d480616a4c11454f4ef4030d15a49773 Restore flow_bb_inside_loop_p tests (PR 86858)
b8d5e148f669d56ccfd294dc396daba607237cdb Allow inner-loop reductions with variable-length vectors
1fc9d0b0e4657b29ff140fa03dca1711aa5a1198 Define aliases for containers using polymorphic_allocator
68d235936bff881b22b6f9a8ab4446c225064454 backport: ffi.c (ffi_call_go, [...]): New functions.
b8eac4d06438eb3dfe3c7d88b4b5b16ee0f9816b Fix experimental::pmr typedefs and add tests
c0c1235622280db4a55cd86daa176b08b72f1210 Merge Ignore and Deprecated in .opt files.
6f795a9239f6029072ac83357e8966c56cd572e0 Formatted printing for dump_* in the middle-end
3ad3b3ac8c3eae606897ceba5811760f030fdac1 Only test STMT_VINFO_STRIDED_P for the first statement in a group
203942b8af64926d787b4a545184866f9572978d Make the vectoriser drop to strided accesses for stores with gaps
3a4da26602da1bd30c4ff2793fed480f180248c1 [1/2] Fix bogus double reduction (PR 86725)
18bc19a7aa4cd08d45d64f6741b8b1e0f48f262b [2/2] Fix bogus inner induction (PR 86725)
e9afbed0d65d7546b05cce3d5b5229b0046933ed re PR libstdc++/68222 (_Safe_iterator provides operators the wrapped iterator can't actually support)
af55b3af33f0a35fecd2117a43ee93468925e98c PR libstdc++/78448 limit vector::max_size and deque::max_size
f73a5316b6f76fa62979c29f4ec3620bf821dca0 Fix tests that fail in C++98 mode
568d5ee44d1d6897a9b7750a3934d4539e1a7ded Define debug mode function for C++98
429ca5b4809f0109ccd84984477b436cd35b677c tree-vect-data-refs.c (vect_grouped_store_supported): Fix typo "permutaion".
ab7e60cec1a6f4185b0428f3a2b3e71df0bae533 Handle SLP permutations for variable-length vectors
8c2f568c9a8375927efede4bfc83d6553da7f9a2 Avoid is_constant calls in vectorizable_bswap
f5cd4f8ceb89596be02801cd11e8dbf78fb10014 Define vect_perm for variable-length SVE
9ca2ac699ab2eee4ef6a2904426fa38f58af5a0b Forward declare debug containers so std::pmr aliases work
acf6214eacc97d0779e73c7ab6539ecb3dd1d524 diagnostics: tweaks to line-spans vs line numbering (PR 87091)
e7289cb45d094d9c538dc978c3fc0ae18e4752bd re PR rtl-optimization/87065 (combine causes ICE in trunc_int_for_mode)
df308f8160051f72679981d45ccbabe6b3f25396 diagnostics: show an extra line of context in line-insertion fix-it hints (PR 87091)
85204e23e2fed09fc07159ab5607e0b760269561 Less verbose fix-it hints for missing header files (PR 87091)
efc3a1a101184a73718bcb034e530e57cd65a543 re PR tree-optimization/86927 (Gcc miscompiles at -O3 on valid code)
463a9e0d31351d1b97f98da03cacb0b1867edad5 Add target selectors to slp-37.c (PR87078)
efc601240c12628df7ec467ac07a322306f80b71 Rewrite pic.md to improve medany and pic code size.
9d36bd3b1763035447bf201542545e8b5dcf962d altivec.md (altivec_eq<mode>): Remove star.
7efe0dd0b43db1ac5070908290a3febfcfb73513 Fix vector::_Temporary_value::_M_ptr
888157af3ef730e1e66c5e84ade11036a09d2205 re PR bootstrap/87225 (tree-vect-stmts.c:3748 error: converting to 'bool' from 'std::nullptr_t' requires direct-initialization [-fpermissive])
3c2a8ed0d9a56a45a67f87c5fa3a093c6852e62b dump_printf: use %T and %G throughout
508a909eca536f7f6a60af9bd7ecea761bd2e8f1 Add missing alignment checks in epilogue loop vectorisation (PR 86877)
2d2ee18641557deba692c286cbc2d8751310f697 Fix PEELING_FOR_NITERS calculation (PR 87288)
512cc0151207de4c7ff3a84f040f730fe0d52458 Remove arc profile histogram in non-LTO mode.
edaaef601d0d6d263fba87b42d6d04c99dd23dba Use vectored writes when reporting errors and warnings.
75902396e6dbed2a3cacb42452992db156c6f32f RISC-V: Fix problems with ilp32e ABI support.
ad117173a0d8a5412bc2b9fb99e2c9b1cb4036af RISC-V: Fix weak symbols with medany and explicit relocs.
01414d53cf3c062ca821de9ae48ba4c3db7d8ad7 RISC-V: Add missing negate patterns.
2bd4ca7ad508ec9b94f8c3442a6e39d5276d7915 Simplify vec_merge according to the mask.
ed2d9d3720adef3a260b8a55e17e744352a901fc dumpfile.c: use prefixes other than 'note: ' for MSG_{OPTIMIZED_LOCATIONS|MISSED_OPTIMIZATION}
041bfa6f07787752743e8c32c7a75a47015ba65a Fix caching of tests for multiple variant runs and update existing target-supports tests.
eb471ba379597d73fcd79986cca5b8351a32770a Add support for SVE stack clash probing.
057cf66ca3d290e0f68f66eba0e43379cb77f870 No a*x+b*x factorization for signed vectors
86920074bfc4f6319edce71b7a11e49417599f0c vector<bool> _M_start and 0 offset
6bd2b8ec8dddadce2fff21c2f22a71192a2e4e43 re PR target/87474 (ICE in extract_insn, at recog.c:2305)
119b4963ea4f68e88eb496f0efcb450e1fbbbe9b RISC-V: Add macro for ilp32e ABI.  Cleanup white space.
7db960c5b6adad2fd11789870aa514985ea0da04 Add -fopt-info-internals
f4ebbd243f887b3c5e01c65ad80a8f64a8261e61 Report vectorization problems via a new opt_problem class
808d8de5a2325bc04709e953328c3377493b0557 constraints.md ("C"): Do not depend on TARGET_SSE.
1fcbfb00fc675ee33b90ae486f3acb5916c93400 RISC-V: Fix -fsignaling-nans for glibc testsuite.
8656dafa39de8e537940433220e8f5db3bf7a614 Don't ICE on vectors of enums (PR 87286)
269ba95042e9fa35f6fa4c8270339bb932e8f7e9 tree-vect-loop.c (vect_compute_single_scalar_iteration_cost): Open a dump scope.
c885142a15687c39f6f46c23d7c40afc817ff7a9 tree-vectorizer.c (dump_stmt_cost): Fix cut&paste missing replacements.
6cdd5aecfb4e062354db8f7253240a371ba418af sse.md (reduc_plus_scal_v8df, [...]): Merge into pattern reducing to half width and recursing and pattern terminating...
1c070612117bce2b8ca4230007c1a62778de75b5 re PR c/87286 (ICE on vectors of enums)
7be65e79f68d862f912de22f1c2c61f31ae8e722 re PR target/87573 (error: could not split insn since r264877)
422a9f77892599ecf8e498d0e5e32b1db3cab559 PR libstdc++/87544 limit max_size() to PTRDIFF_MAX / sizeof(T)
2045ae1d3f511717c2a1223148ce63f71800e1dd Elide repeated RTL elements.
4b186707ee29b3189728731adf0ebdd2e620a26d vector (vector<>::cbegin()): Use C++11 direct initialization.
0df7c778ed50095a0c4b266b4beb8b783de832a8 re PR tree-optimization/87022 (miscompilation with -ftree-loop-distribution)
4124119974fd87380de607a6bc9bfdcffe1702d8 [PR87563][AARCH64-SVE]: Don't keep ifcvt loop when COND_<OP> ifn could not be vectorized.
b57d432bdd7d16e552c24ef80777eb27ecb1f973 Fix tests that fail when compiled without optimisation
7702ab653a903d5131bf72244ae22424ffd2e6c7 revert: [multiple changes]
294973a49751a7fc2d6a7a9f2749ce851a368c04 Simplify subreg of vec_merge of vec_duplicate
aff3ce41c4abecead6d05a0422d912468d2c893c Call simplify_gen_subreg to simplify subreg of vec_merge
28dd75a330e7cc929a6be489ea3c252dd4a8bd8a Limit mask of vec_merge to HOST_BITS_PER_WIDE_INT
6d2648763a1b8a74a85d04139c5d1391056810fa re PR tree-optimization/87657 (SLP ICE in libgfortran matmul_i2_vanilla)
92bab15297a57121317df803c9c688955af30722 Fix testsuite failures due to extra errors in strict dialects
f3245887551932de6aba1aa3e9f911b78a57b5ef Skip tests for GNU extensions when testing with strict mode
fe7f972d6ecc1f1df34f15615b7e3dea6f39e564 Enable AVX512 memory broadcast for FMSUB
5d9c5a966810fdedb072c7fef148bac21a075c14 emmintrin.h (_mm_movemask_pd): Replace __vector __m64 with __vector unsigned long long for compatibility.
36bbc05db8ef71811a7b925bbb862d0b1c3b5b89 Add a fun parameter to three stmt_could_throw... functions
ddec5aea567a131daf0c5741d676d6f4a68ca45d Index...
bc37759a51631f667d1728336c3662751f69b5ba re PR tree-optimization/86144 (GCC is not generating vector math calls to svml/acml functions)
34873d4c8e78350ef17e603efe592c46e225a637 tree-vect-stmts.c (vect_analyze_stmt): Fix typo in comment.
1cab645d3e321132dca5e43d9d5057c60852a17c re PR tree-optimization/87105 (Autovectorization [X86, SSE2, AVX2, DoublePrecision])
bf32992748c9849c38c089477d04b546e43ccdd1 re PR tree-optimization/87665 (gcc HEAD (svn: 265340) breaks elements on resize)
be43a8877e2f2f4590ba667b27a24a0cfdf8141d re PR tree-optimization/87105 (Autovectorization [X86, SSE2, AVX2, DoublePrecision])
28d2dc757edb6728d1a0f706ffc308aadbd082fc emmintrin.h (_mm_cvtpd_epi32): Change deprecated __vector long to __vector long long.
7852940e7bbeae3c40cdc6c61356099216bde688 re PR tree-optimization/87665 (gcc HEAD (svn: 265340) breaks elements on resize)
0f317ef76269a989ae751a808f946d15b740baf9 Relocation (= move+destroy)
303d8f779266535269e443f2fa65a3170a742ff4 tree-vect-data-refs.c (vect_analyze_data_ref_accesses): Initialize ng to silence error with release checking bootstrap.
71c3949eeae32f0c242fa00c48be998b13cfdd7a emmintrin.h (_mm_sll_epi64): Remove wrong cast.
7ea4b8ed7b960e25d81c14842f7458e9f29c2042 re PR tree-optimization/87746 (ICE in vect_update_misalignment_for_peel, at tree-vect-data-refs.c:1035)
a1f072e2441c58f6a486f90bb9a32bd5f6c51cb4 re PR tree-optimization/87105 (Autovectorization [X86, SSE2, AVX2, DoublePrecision])
4bfcf87914b412f8fa56cd46f7c3081365b7e647 tree-vect-slp.c (vect_mark_slp_stmts): Add visited hash_set and wrapper.
b4c522fabd0df7be08882d2207df8b2765026110 Add D front-end, libphobos library, and D2 testsuite.
881eaae68818cab0b3419482586174582c348ed7 48101_neg.cc: Remove dg-prune-output 'std' from regex pattern for versioned namespace...
5d8c32cb86043e388fddc9833d9c2cd90ed05284 re PR tree-optimization/87785 (ICE in dr_misalignment, at tree-vectorizer.h:1245 on 454.calculix with -Ofast and -flto)
6c7e3b1fe2889136348984edeca7f9ae71d40027 re PR tree-optimization/87790 (ICE in vect_get_vec_def_for_operand_1, at tree-vect-stmts.c:1475)
266ef3613ea80da937a9fc782eb5c3ae8dcabb8f re PR tree-optimization/87785 (ICE in dr_misalignment, at tree-vectorizer.h:1245 on 454.calculix with -Ofast and -flto)
22e4f1fb6cda89074fa82ba70dfd757fb9ead5f0 re PR tree-optimization/87800 (CPU2006 416.gamess failed to build with LTO)
c397f267f1d0e8ea286904bc5543829b558e154f PR libstdc++/87784 fix dynamic_bitset::push_back
0321d9fac6eff34ef1cd91610a59070d0e9ff54d PR libstdc++/87809 avoid invalid expressions in exception specifications
187cea947e54d08eaed2587edeb49a5cc1fe8d6a re PR testsuite/87802 (g++.dg/vect/slp-pr87105.cc fails starting with r265522)
aac1c11ce4edd9c2e6af7e9ee8abcaba98d8741f [ARC] Add BI/BIH instruction support.
00e6775a5faa43702e96e315e7a1c22297983f2a Fix vector memory statistics.
733441e2e1d207a1ab0a4a255dea03ee7c6c8774 re PR tree-optimization/87873 (ICE: verify_gimple failed (error: incompatible types in PHI argument 0))
d8564d453161dc5302445d00b0e24b0b9c48206f re PR tree-optimization/87889 (CPU2000 177.mesa failed to build)
bfb9d79805753fd6cc69bb114b5c6597269f3e21 tree-vect-slp.c (vect_slp_bb): Move opening of vect_slp_analyze_bb dump-scope ...
8ae8bad7e558ce916c52e91a4e1879557f287bbc Add support for Loongson MMI instructions.
5a951baaf1b789281bf62b852d24a4ab8cf3e714 re PR tree-optimization/87914 (gcc fails to vectorize bitreverse code)
1c8badf66bec4e0ff73ae24bf4f8cabbef8c137a tree-data-ref.h (lambda_int): New typedef.
222cfefa7199b70e62df020c4768840b4434ac7f Update soft-fp from glibc.
536ecfc44b1fd2db67f669e9bb4c388b13d12045 neon.md (div<mode>3): New pattern.
1dd6990226fd92adf1e3c12a96c5776ec8efcb60 re PR tree-optimization/87621 (outer loop auto-vectorization fails for exponentiation code)
89939ff85a7c2ed0c1eb33e51d241f2a6dda0695 re PR c/87953 (asan: stack-buffer-overflow in vectorizable_reduction)
213fd71709e40dbcf601f765e80a56b1c624e4a8 PR libstdc++/87787 fix UBsan error in std::vector
be2b68e4cd63e50f4dd5fca247b9a919fb0013a0 re PR tree-optimization/87962 (ICE in vect_get_vec_def_for_operand_1, at tree-vect-stmts.c:1485)
ca31798e7bf8f87d78ff1ee66c120b135a1b2ebc [PATCH][GCC] Make DR_TARGET_ALIGNMENT compile time variable
41b32876b8a0b8c19b35b768f942bdad1f96f893 re PR tree-optimization/87931 (ICE in vectorizable_reduction, at tree-vect-loop.c:6193 since r265876)
bbeeac91f96bdcbc3eb40ec68c1fd8cf5d4a038d Ensure that dump calls are guarded with dump_enabled_p
53467b5543100b84ad1bb2392efd989639f01eca re PR tree-optimization/86991 (ICE in vectorizable_reduction, at tree-vect-loop.c:6919)
f711908bf61e39432965db84ed12424cc6f251e1 re PR tree-optimization/87974 (ICE in vect_get_vec_def_for_stmt_copy)
9989a43983116c05aca5c3b5fc30191524b73b94 [Ada] Update signal constants for GNU/Linux
e81d464cafa9815e64674a2e3b3e9d0e5eac6b31 re PR tree-optimization/87985 (Compile-time and memory hog w/ -O1 -ftree-slp-vectorize)
22692f3ce9d00eac18d5582de90dda5ae5c07c77 re PR tree-optimization/88031 (ICE in vectorizable_reduction, at tree-vect-loop.c:6953)
1ec7f4929a286da7aa03d413a0fe99c9c36be915 Handle vectors that don't fit in an integer.
d11be094c716885475a4a1562a967e4a127ecece re PR tree-optimization/87546 (Gcc miscompiles at -O3 on valid code)
b579523b7bcd02739e6f06fe21a7ac6eb24dd6ec RISC-V: Fix epilogue unwind info with fp and single sp adjust.
4cb3570c8c453a830589b717d8519daa31ec7468 re PR tree-optimization/88071 (ICE: verify_gimple failed (error: dead STMT in EH table))
1fd319753c90f05e026e16c2c83af8f1c6687a5f Disable unrolling for loops vectorised with non-constant VF
8c944c97a2e5a264779ad1d448f97319f471275a tree-vect-stmts.c (vectorizable_condition): Do not get at else_clause vect def for EXTRACT_LAST_REDUCTION.
98f08eb8939735c1e9cbc1ec5cadebe79e935c90 c-parser.c (c_parser_has_attribute_expression): New function.
ff2e7f1973807759f52808a2594e0635ced69619 Improve relocation
f7b94dec4876c161d7e97ad0ce19695aa487b04a re PR tree-optimization/88149 (ICE in vect_transform_stmt since r265959)
ef6e6914c8245ca24dae952bc054ae2328e751ab re PR tree-optimization/88182 (ICE in vectorizable_reduction, at tree-vect-loop.c:6465)
27c16e61cb99796a912d491ad5d77ed7873a4eed Tweak directives in GCC tests for msp430-elf
3da39f52ff740ad4263a000c48fd5a6d9afd18fd Fix missing dump_impl_location_t values, using a new dump_metadata_t
0c155f24a945a55c37a963f64e89870f60543e64 [libbacktrace] Avoid realloc with size == 0 in backtrace_vector_release
6d760a0197ece131619ac88f0fe34ce452fd774c [libbacktrace] Don't point to released memory in backtrace_vector_release
facf0354cfdaa555f376311b9d3c8fec79747f09 Support simd function declarations via a pre-include.
cece89d0ddb8b1181f15caa0ef44cd2aa89ec957 riscv (riscv_block_mvoe_straight): Use RETURN_BEGIN in call to move_by_pieces.
98f33efc5a533f66abfb0e263be60e719baf5879 re PR middle-end/87157 (gcc.dg/vect/costmodel/ppc/costmodel-vect-33.c fails starting with r263981)
fc60283c5c7987a120cdadd24024a0319bfe0360 re PR tree-optimization/88182 (ICE in vectorizable_reduction, at tree-vect-loop.c:6465)
188588e443008dd7795947db60b68571ed724fe3 Implement uniform container erasure for C++20.
154fb72b6d8e35b1a97fd665dd43c4f215aea1b1 re PR tree-optimization/88243 (ice in vect_create_epilog_for_reduction, at tree-vect-loop.c:4689)
a62b871d65a5c7ce3114ac095fa5490050f2037d Fix erasure goofs.
b076fecbc240380b25bb25c65aae85c4b5ea9ce5 re PR target/88234 (UBsan and runtime error: signed integer overflow using unsigned vector)
f06e47d7b644b4598a85f89eb76c13298e6e5d9f re PR target/88152 (optimize SSE & AVX char compares with subsequent movmskb)
355c62ce02d7d1a5fb7d28c829ee918df3983ad5 Only include bits/stl_algo.h for C++20.
856f4c6a9cfac1471c323b1783130879e2bbc15f re PR target/87807 (passing float/double vectors as variadic args fails on-64bit SPARC)
518a3a2106e4e8172a1c7628b79b63635857fec3 [libbacktrace] Factor out backtrace_vector_free
eea34f203816e71f2fe261b9b8593a01eb01ec81 Restrict vector extension to use 128bit vectors (PR testsuite/88265).
f44697b78a06bf880ba25e9d4cd721f24282a797 gimple-parser.c (c_parser_gimple_postfix_expression): Parse _Literal (type) { ...
0b44b4b807a2d7bee4d2a0e4c37794db2aeeb44f Pre-emptively support P0646R1 for std container erasure.
c10a94358fb8d0762c9eceb5d26125582fa7971f re PR target/88278 (Fails to elide zeroing of upper vector register)
bcda485bdf8b8e7c645648e124e787f78846b2c6 tree-vect-loop.c (vect_transform_loop): Properly compute upper bound for the epilogue when doing epilogue vectorization.
056775650ac086fb069e00415bf262e22f7579c5 re PR tree-optimization/88315 (SAD and DOT_PROD SLP reductions with initial value != 0 create wrong code)
fa29266c1da984345e0637b7479bbcc4b34cafde tree-vect-loop.c (vect_transform_loop): Fix epilogue iterations for epilogue vectorization.
6c620b0744af235ceb1c07c214772895e0f73c15 re PR tree-optimization/87320 (Last iteration of vectorized loop not executed when peeling for gaps)
f7d5864294f77afeae9aa72b55e3cdfe1c24e5b2 re PR tree-optimization/86637 (ICE: tree check: expected block, have <invalid tree code> in inlining_chain_to_json, at optinfo-emit-json.cc:293)
a1ff7f142078df785548469fe000608c28a8c479 Use unsigned arithmetic for demoted vector plus/minus/mult (PR 88064)
5da8ebe9c61f304107b1bcb5146e068093b72d0d Remove bogus test line from vect-over-widen-23.c
f473762515b29ef24c34f52f6c82e2c8a4c275a6 re PR testsuite/88369 (g++.dg/vect/pr33426-ivdep.cc etc. FAIL)
98900a06642a7c10751720a26f8cbca359d89fa3 re PR target/88418 (ICE in extract_insn, at recog.c:2305 (error: unrecognizable insn))
5f531feff7ed6651354ed5b1cbd2a83cf204d170 [Ada] Spurious errors on aspect specifications in generic units
62ebfa527237ba42c9d93032dc008e82d482d271 [Ada] Uintp: add a new UI_From_Integral generic constructor
0e350f135b11b105ae98a45441115b9a2a3e6fc3 re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with "not suitable for scatter store")
4f87bb8d6e8dec21a07f1fba641a78a127281349 PR libstdc++/71044 optimize std::filesystem::path construction
b1985ca02ea01cd32de23be109672a7ebf593a46 re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with "not suitable for scatter store")
305f1fb78347a0bdf5d6ddd6ac5dead1c6167ea5 re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with "not suitable for scatter store")
13e08dc93941675cd6a7cf5470b437c4f640c996 Add a loop versioning pass
5d17a4763a71cbf10d3d4bb93bed11f832a24683 [nvptx] Add PTX_WARP_SIZE
693ad66b86dcadc9764a2ef4365902b153560dde [nvptx] Move macro defs to top of nvptx.c
34a9bcaf8b71771f93fe1f09e0c060767bcb7601 extend.texi (PowerPC Altivec/VSX Built-in Functions): Describe when a typedef name can be used as the type specifier for a vector type...
dc5b05a07544bbab9e309a45ebcb350a37b69103 re PR tree-optimization/88464 (AVX-512 vectorization of masked scatter failing with "not suitable for scatter store")
0d3d674bcb173e8d694715c1e4fa24937cccc0f3 [PR86153] simplify more overflow tests in VRP
a0b3b5c4af07ba34991c4f253496725a760104c2 [nvptx] Make nvptx state propagation function names more generic
08926e6f5bbf23d1eebc776d84d648f8b5836931 re PR tree-optimization/88533 (Higher performance penalty of array-bounds checking for sparse-matrix vector multiply)
dc355223e465d3a2c090f34afd2ce965d20de199 Restrict a VSX extract to TARGET_POWERPC64 (PR88213)
dfd7fdca2ac17d8b823a16700525824ca312ade0 C++: more location wrapper nodes (PR c++/43064, PR c++/43486)
5a5fe9175eec31bc9cce382e8c7b961fd4cfa1a3 re PR target/88547 (missed optimization for vector comparisons)
1c852d1d7096a8833b4e8dc0755a749314c2113a re PR tree-optimization/84362 (Auto-vectorization regression when accessing member variable through getter/accessor)
c9aa91088d2ab49a29c5588f62657afd7a84139e tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Don't do versioning for data accesses with misaligned step.
6647c1e86f3b311d906a19b85182eed010ec03cf tree-vect-data-refs.c (vect_enhance_data_refs_alignment): Use DR_TARGET_ALIGNMENT on dr_info rather than dr.
d6b612a76f77e7c9ae7712df9312bbcf4a92f048 re PR target/88547 (missed optimization for vector comparisons)
53a52133a5fc74d63ce17b328774706bf1e79e02 [libbacktrace] Fix memory leak in build_address_map
40b8d3b2536246b7449b6c7ce7a972537e5f11e1 [libbacktrace] Fix memory leak in loop in build_address_map
eb33bf0a0a4914eb2a88614cf4041069843018d6 [libbacktrace] Reduce memory usage in build_address_map
ec1faddf89cb8219c426418d7af772655d5ad40e re PR testsuite/87304 (gcc.dg/vect/bb-slp-over-widen-1.c fails starting with r262371)
0d06e8c794f37ded34e902ead35e7c70c3b112d1 [nvptx] Add nvptx_mach_vector_length, nvptx_mach_max_workers
5c571497e1b9b4ac407aa0db359292b0de6cd42e [nvptx] Add vector_length 128 testcases
43493c97a6e8ee3b1e52e3983ac255722cdcfdd4 [nvptx] Fix libgomp.oacc-c-c++-common/vector-length-128-3.c
764ecad43b6cac2d2eded706fccd29cc15481ad2 [nvptx] Eliminate PTX_VECTOR_LENGTH
ccc0d492f109456db8df72938bf39fd03510d2b3 [nvptx] Allow larger PTX_MAX_VECTOR_LENGTH in nvptx_goacc_validate_dims_1
0024c32045a72ef45a64ab5673a2ba587978d9d1 [nvptx] Add support for a per-worker broadcast buffer and barrier
d495b5ccd252fdb01c70a73f145a008555b5a253 [nvptx] Don't emit barriers for empty loops -- fix
f881693c53374c743d3b5d1561708a64dcfe7eb6 [nvptx] Handle large vector reductions
d8fcab689435a29dba2862693689c624b257d1bf re PR c++/85052 (Implement support for clang's __builtin_convertvector)
6e723923df52bdde7c3aebd6bccaae3c7bff19ee [nvptx] Force vl32 if calling vector-partitionable routines
46c66a46aa33077bda821e0428cc7859945c04c8 [1/2] PR88598: Optimise x * { 0 or 1, 0 or 1, ... }
f4bf2aabe36633d75852313caafe7efab71d5ba7 [2/2] PR88598: Optimise reduc (bit_and)
18fd43b95264a7244b50fd34cf983f4d78c208dc Fix ICE in get_initial_defs_for_reduction (PR 88567)
cc770199ded4655756eb98399f6d26f5a0c55f29 Fix IFN_MASK_STORE handling of IFN_GOMP_SIMD_LANE
2c372e81a996e105571e71108f6427c38ec2a71a [nvptx, libgomp] Don't launch with num_workers == 0
5ed895a74a12da82d2adafda7e6196de8221ddd2 re PR middle-end/88758 (186.crafty in SPEC CPU 2000 failed to build)
45a8d80fec060195ef6936e43b4fe70158fb7dc7 Define __cpp_lib_erase_if feature test macro
84df580f073debc208187d1ff2e5cec49989e5a9 re PR target/88785 (ICE in as_a, at machmode.h:353)
052aaaceed25c962791b0b973f66febabaf47574 [nvptx] Don't allow vector_length 64 with num_workers 16
980af7cd8fb385f9bb818e29d08fe4af73cd2788 [nvptx] Verify dimension limits after applying defaults
d6f528e70ad88ddcc9786e6050d92e003d19d0a3 [nvptx] Allow default vl to be overridden in nvptx_goacc_validate_dims_1
af79605ec27c0db7dee9ee001cd7d768eb6fcf02 [nvptx] Apply vector-partitionable routines workaround to default vl
2b9d9e393766d2fa6e2dd5f361d0db14872cf261 [nvptx] Enable large vectors
52d22ece49ac0517d4288d65a5ee6dd8d9441d4c [nvptx] Update insufficient launch message for variable vector_length
8e77f71eda4610040727c69a782b12976dd9228b [nvptx] Enable large vectors -- test-cases
2cb7a501ab0be001dca4bac0d9af9298c0bfabbc [nvptx] Enable large vectors -- reduction testcases
56314b772f0867d81a4f7c7850d460e395563dff [nvptx] Force vl32 if calling vector-partitionable routines -- test-cases
a10577582585850c88b77dbc492eb046c05e79ce [nvptx] Add vector_length 64 test-cases
2c2ff1684dd33a4ec2ea7b91c0ada9cf371bf75f [nvptx] Enable setting vector length using -fopenacc-dim
efb56ae82bd871b64861e991466ce616688a88e9 [nvptx] Enable setting vector length using -fopenacc-dim -- testcases
3f21b8e3f7be32dd2b3624a2ece12f84bed545bb Add dg-require-effective-target exceptions
674931d2b7bd8886d142f31ea3d07a2ab2eb608a Port testsuite to GCN
9d576782a29581c04c60d7b9415bb7d3014b0c8c [libbacktrace] Add find_unit
5928bc2ec06dd4e7b5bd77a5915eb268f7bd5619 Reset proper type on vector types (PR middle-end/88587).
649794ff576fb9a033358799eb43a43addff1aa9 re PR tree-optimization/88903 (wrong-code with SLP vectorized shift)
a766ecb0d488624c0289620785ffe4e2d5cc9971 vector long long and vector double require vsx support.
d715f5543117af088e6d8099806b266aa2dac047 Fix after P0600.
c73e7656f5f64a8ee544270adea13cc39ddae70d re PR tree-optimization/88934 (ICE: verify_gimple failed (Error: mismatching comparison operand types))
4d8516587ac4490634b02e647d04db511660bbcb class_66.f90: Fix a dg directive.
c4d825b5e780cea568317b2ca2c82420b677f119 tree-vect-loop.c (vect_analyze_loop_operations): Use auto_vec for cost vector to fix memleak.
a14e30837f2e90ea075a850609c7076d9615b83a Fix overwide shifts in PR/88903 testcase
df69e824488337a4a85f8a4893e0f0081f45cd72 Fix vect-nop-move.c test
8b5d2c55128d953d1d2d29362ea4522057bc016a re PR target/88965 (powerpc64le vector builtin hits ICE in verify_gimple)
e658669fe18d27bbde85085d648f0392f3f9bce6 PR libstdc++/88840 delay evaluation of constant until type is complete
2e42a52fd1bb913d293d4ccc6cdcf34cf916215e altivec.md (build_vector_mask_for_load): Use MEM_P.
cb1ba35f582f07096a045574b571576bdcc439a9 re PR tree-optimization/89049 (Unexpected vectorization)
1f48525ded40b968792c4dfd9a7614c3e88129a4 Ensure pool resources always use normal mode vector
0058a283e1bfe9130f04a0aef76b9ab863a6b22e doc: showcase a "union of vectors" pattern (PR 88698)
c8010d70be43ae96908bb82000518e03b5b65829 re PR target/89186 (ICE in mark_addressable at gcc/gimple-expr.c:894 since r268138)
2781287255a16b6f2db18c68d02c3f40004332a7 PR libstdc++/89090 avoid C++17 features in C++11/C++14 code
258bd1d63aec54899b12269325eca9712d61adfe PR libstdc++/89130 restore support for non-MoveConstructible types
39bc6f8752102f38d0c0ca86c02d14ee5d1d0b5f Restore previous behaviour of test
959dcbc80a60aed2198dab4853a7492b315de7d6 Fix pr84711.c testcase
4763581763de6049c938ea7129d738d497004a06 re PR middle-end/89210 (ICE tree check: expected integer_cst, have real_cst in to_wide, at tree.h:5600)
12f82acc9e55a16334d303ae2b88609bdcbf13e5 vsx-vector-6.p7.c: Update instruction counts and target.
25b67546a1a5fd49ddcb0a923a8d23d77a91e05f Fix more ICEs in -fsave-optimization-record (PR tree-optimization/89235)
3bdf0b644a3e808d740a3edc32a29d934bf5deea trans.c (Regular_Loop_to_gnu): Replace tests on individual flag_unswitch_loops and flag_tree_loop_vectorize...
5f5d88d82bcc0d7a483c6872368e66e3961df7ff re PR testsuite/89250 (gcc.dg/vect/vect-24.c XPASSes)
a2d0c3bf8c4487249aae1e2b1927d71703bfcda4 re PR tree-optimization/89247 (ICE in expand_LOOP_VECTORIZED, at internal-fn.c:2409)
79e2c811f8fe8b212aeb63ae837f9c3a8289e693 re PR tree-optimization/89268 (r268689 caused FAIL: gcc.dg/vect/pr79887.c)
8ced066037201d2c193560bf7d9cd6e738e26e55 vec-sld-modulo.c: Require p8vector_hw.
a6c723e202ebd5ae388ca04b7be5ff6fbe70439f re PR go/89321 (cross build with riscv64 gccgo compilation failed due to assert in constructor_expression)
990525f659db023bbcaf8d313916e4533843c664 target-supports.exp (check_effective_target_vect_usad_char): Add PowerPC support.
d331c5f10d5e6c9f41a24ff7cb7a8c6493790885 PR libstdc++/89416 fix __is_move_insertable trait
9f0ffb2bdfa04a617ca81e55ab686a80d6ad6c77 re PR tree-optimization/89440 (ICE in vect_create_epilog_for_reduction, at tree-vect-loop.c:5502)
953e25c44acc2458d854b1442d7775d997aaf187 re PR rtl-optimization/89445 (_mm512_maskz_loadu_pd "forgets" to use the mask)
f86624d85f937e03110eb044e438d8316d860501 re PR tree-optimization/89280 (ICE: Segmentation fault (in is_gimple_reg_type))
f2d040abea60db10675e0a5c2f91b7991541df90 Fix mask type choice in vectorizable_call (PR 89535)
8e96621085f2a0364fe87a4019d6cc9bfc52cd11 RISC-V: Generalize -march support, add ELF attribute support.
ea5212b741b5cc751d0d8271a9666c4ad0b4e799 re PR tree-optimization/89570 (ICE in prepare_cmp_insn, at optabs.c:4001)
deeec83de4379e253af4f41eaaf8f45d4db17302 re PR tree-optimization/89594 (ICE: Segmentation fault (in gsi_for_stmt(gimple*)))
5161ffa4f5ae6133167673afc607c07e0be787f8 re PR tree-optimization/89618 (Inner loop won't vectorize unless dummy statement is included)
ec274050c516660c2d23c905dc900bdb98e120f8 RISC-V: Add libstdc++ check-abi support.
04e5c73db8b51c76bff5fb30553089ccfa7bb5fc re PR target/79645 (missing period in microblaze.opt)
03001a351528a1fc35bfe0c70deb08c7e18d314b re PR tree-optimization/89649 (r269458 FAILs g++.dg/pr80481.C, scan-assembler-not vmovaps)
a3f9f006a8e24bfc2a045b918a4f3665407f0018 Wrap option names in gcc internal messages with %< and %>.
b9da0278667b43843b750a1ad35a9d6dbc1d1b54 d/dmd: Merge upstream dmd 19b1454b5
0ee285909bcef729415995e16c68e8713c59996f re PR c++/89652 (ICE during constexpr evaluation)
27814aed3462d6bdce3c653e5e66d5e58cf4a5e7 re PR ipa/89684 (ICE in gsi_for_stmt, at gimple-iterator.c:613)
baa09dc5c951213452446689466ad889656b9936 c-tree.h (enum c_declspec_il): New.
30bb0e44d3893b27c6cd74c72a077e5a0d96a244 re PR target/87532 (bad results from vec_extract(unsigned char, foo) dependent upon function inline)
985a72168a64267df8ad4c73337b3f678787174e re PR fortran/89724 (Fortran diagnostics give wrong line number because of math-vector-fortran.h header file)
4d7dfada8935a362601d1782bd6598e3e1d78d74 gcc/riscv: Correctly ignore empty C++ structs when flattening for ABI
c57546fe94712a723bc2e123445dc5d9b0a0ca1a Fix a case in which the vector cost model was ignored
891cd9e3b9a89b0461fb838d38c51b6fab596337 RISC-V: Fix testsuite regression caused by quotes around options.
026216a753ef0a757a9e368a59fa667ea422cf09 RISC-V: Fix %lo overflow with BLKmode references.
64a40f1320c0edc160796266876958ffae8fdd96 [PR72741] Encode OpenACC 'routine' directive's level of parallelism inside Fortran module files
51e471ae61b6a9fe672fe92e00edacabf69f55a4 extend.texi (Common Type Attributes): Document vector_size.
88108b27dda964afc145e9e5d176a481d1aee707 RISC-V: Add sifive-7 pipeline description.
6461f211e09415edd95315f4f9ff843f4f1d8eff re PR debug/89463 (debug information for iterator of an empty loop is gone (at -O3))
1509905e82c45228d431b41be32fe15fcb469393 pr81740-2.c: Require vect_hw_misalign.
76d4accffd19a094761bf25b2d66435ce6642105 RISC-V: Fix __riscv_compressed regression.
f401d62362d405ea8751b10581cf8eb5921ff4d8 re PR target/89902 (ICE: in extract_insn, at recog.c:2310: unrecognizable insn with -mavx512bitalg)
c51b04ec33fea61e89363fd5c94e38b4df8b12c1 re PR rtl-optimization/84101 (-O3 and -ftree-vectorize trying too hard for function returning trivial pair-of-uint64_t-structure)
904f3daa028eea44c6a591fb1ac746ee81c72be1 Remove usage of apostrophes in error and warning messages (PR translation/89935).
2723350fc6fd336768abd93e568babe032d97228 Fix ChangeLog entries.
10f26de9155b71a2bd5055060004420939cf7a2d PR libstdc++/87431 re-adjust never-valueless optimizations
145f764aae16c101baf41c815abe99353fcf797d Fix expected scanned pattern.
d6366157deac0b526ce7ecfd2821745eecce06c8 re PR middle-end/89725 (ICE in get_fnname_from_decl, at varasm.c:1723)
a265c9a929b4ca727e9b0c93eb98e15244f2735c re PR tree-optimization/90006 (gcc loops indefinitely around vect_get_constant_vectors on -O2 -ftree-slp-vectorize -fno-math-errno)
31215daa9b8099963fc1fb04abd13f6321f02a74 re PR target/90015 (riscv: typo "intterupt" in diagnostic)
6c0b8df123c24ef3c14305698eb2910bcf5979ce SVE fallout from PR90006
765f8786cf6e22aa6309f321f0afd8e7dc79b4bb re PR translation/90011 (trailing space in diagnostic)
e009dfb32037f94447f0547a3930ecccd7fabe37 Hi there,
f95b75977014fbbc919bd7a478bbaab24438b001 tree-vectorizer.h (_stmt_vec_info): Remove same_dr_stmt member.
2fd579ab530ca9ca5682eeba305c4946bf710c25 re PR tree-optimization/90018 (r265453 miscompiled 527.cam4_r in SPEC CPU 2017)
34f02c07fb1a9d966fb7af5a8c28c213e84d89c5 re PR target/87532 (bad results from vec_extract(unsigned char, foo) dependent upon function inline)
3fb82380dcbbc768e2a5bdb5ab4079259ee0e683 PR c/88383 - ICE calling __builtin_has_attribute on a reference
377c9e461130f54ebedb57441be0a0bc371226ef Commit a change missed in r270326:
6c76c0e408765f43253b2457363978f8fd5ca6f3 PR middle-end/89797 - ICE on a vector_size (1LU << 33) int variable
a34d6343a758f651064d81abb1534971fa4170e7 Improve implementation of parallel equal()
d9392bfa032b448839abadb523aff65b8ccb3dba libphobos: Add D support for RISC-V Linux
8a55f9c57a1ffd900262aa2fc2015822dc059331 extend.texi (vector_size): Add missing comma after @xref.
4ef8a24ca5416226d82ca272dea88e460ae2ce86 Add commentary to (SET_)TYPE_VECTOR_SUBPARTS
5117550700dc9b81a0073e8e802be9992a7a59e9 RISC-V: Promode modes of constant loads for store insns.
ad1f4687368ea026a0060969da1edd4dc1abbbfe Add nodiscard to std::vector<bool>::empty()
074084767c9d7c4d52d919c343b65bb61c564096 Remove DDR_INNER_LOOP
379637d5e2d6965cb842a0fe29a9442f1322544d * config/abi/post/riscv64-linux-gnu/baseline_symbols.txt: Update.
9e3501f765540f08aad0bcc0821908181366f177 gnu.ver (GLIBCXX_3.4.26): Change _Lock_policyE2 exports to _Lock_policyE[012].
4f4753914455ad186f7c1f994743abfcb05a7dc9 RISC-V: Short-forward-branch opt for SiFive 7 series cores.
243dd48646beb0de2a2aac8236eef8fa60f5b99d RISC-V: Update last ChangeLog entry to mention Andrew Waterman.
8964432ad6f17cef74aa97c367d2975ba9458f92 re PR tree-optimization/89653 (Missing vectorization of loop containing std::min/std::max and temporary)
1ababc8bd59bcca3bac8c08d367bf0e91c7e11ab Improve docs for Library Fundamentals TS
1770f16993054e140d3cfd288ced4e85389c6787 libphobos: RISC-V: Fix soft-float build errors with IEEE exception flags
a7eb97ad269b6509bd7b31ca373daea98e4d7e85 re PR middle-end/88963 (gcc generates terrible code for vectors of 64+ length which are not natively supported)
419c5f99876d9ee517f6b646dd785cdcaf5cb6fe tree-vect-stmts.c (get_group_load_store_type): Avoid peeling for gaps by loading only lower halves of vectors if possible.
3bc104bdb4b5aa99ff6dceb246beaa65b012c5ac re PR tree-optimization/88828 (Inefficient update of the first element of vector registers)
898758504fa87d9f5e72c2c8b32139b413276a10 re PR tree-optimization/90358 (526.blender_r train run does not finish after r270847 on znver1)
cd0a831ce6d6fe9ff14959b0602ad7deed6d2785 PR c++/90265 - ICE with generic lambda.
9f708a844853eb2fe87e696d27de14cbd68896f8 tree-vect-slp.c (vect_build_slp_tree_2): Bump size whenever we build a SLP node.
d7b6aee8cd346328b6f22fc415ffc28b9cf8a285 [libcpp] Reimplement mkdeps data structures
fcd0566b03e8e22190590bda888b48349639f1a0 tree-vect-stmts.c (vect_is_simple_cond): When vectype is not specified still compute a comp_vectype for invariant compares.
a9fad8fe6c84de272f2a56d462e67d53c9f4a73d This patch adds support to vectorize sum of abslolute differences (SAD_EXPR) using SVE.
5d30228e2b9837e66827acfe95c9a74c90c1d42b re PR middle-end/89765 (Multiple problems with vec-insert implementation on PowerPC)
362e280d10c61bec13c1d02c11a1c4ac0846db7e re PR tree-optimization/90395 (ICE: verify_flow_info failed (error: BB 2 cannot throw but has an EH edge))
e9c54233f7a9b4827702d64034d51db52787a659 stl_bvector.h (operator==(const _Bit_iterator_base&, const _Bit_iterator_base&)): Make hidden friend.
65ecff904b65ee1c0b8d7b642a72cad3222f2ecd darwin, ppc - improve debug for mdebug-stack
6db881be90d9b953ed48c69f6ecbdbb534d8d678 Fix wrong usage of dump_printf_loc (PR tree-optimization/90416).
544be2beb1fa53dfdd6988418ad3b365c289536d Remove Profile Mode, deprecated since GCC 7.1
61021c35c0b3ca3f37ad23002083d4f6c70e1bd1 tree-vect-slp.c (vect_get_and_check_slp_defs): Handle VIEW_CONVERT_EXPR.
cd9cf97bbfdc3b810b408a98cf79e629929dd5f6 Use releasing_vec more broadly.
962372f9f853c582c879f11c0db14973cc8687e0 re PR tree-optimization/88828 (Inefficient update of the first element of vector registers)
066f9ea27960c21b73be820f2bcd62d0c2f3d6b8 Add __gnu_test::NullablePointer utility to testsuite
0b3c00ff3c53818110484f9e295523a0c3c7f324 Make std::match_results::_M_resize more useful
595ffc073bf5b1753e3a18dfa704391ad5fad626 re PR tree-optimization/88828 (Inefficient update of the first element of vector registers)
c221c627cb03585892bbcae2334c013b8fdf4b41 darwin, testsuite, powerpc - handle tests for new processors.
fed2a43c018366566c3b5b73269f863444b06163 omp-low.c (lower_rec_input_clauses): For if (0) or simdlen (1) set max_vf to 1.
1bf2a0b90f2457f6d9301535560eb5e05978261b re PR target/90424 (memcpy into vector builtin not optimized)
8c3f47feb3d7b69e185cfa4897c717292a886c1c re PR testsuite/90502 (gcc.dg/tree-ssa/vector-6.c FAILs)
f7430263c07b4a1bcf3deb708c8c691f233fcb40 gcc: move assemble_start_function / assemble_end_function to output_mi_thunk
4e65deeffb7205dc20b70fdfbce51bc6b381f0db omp-low.c (lower_rec_input_clauses): If OMP_CLAUSE_IF has non-constant expression...
935469daaa5c02ac5104c0d5c04a1f12e23529b1 Move from state of allocators (LWG2593)
bc374246e211608c4cf9732fb814620a5dfe91b1 re PR middle-end/90518 (ICE: in emit_move_insn, at expr.c:3745 in gcc.dg/gimplefe-40.c)
f63445e56c265757ebd50dc12fcd01773341b49f cfgloop.h (struct loop): Add simdlen member.
4f8b89f092467f9550cb2aa873c2e30ac809c08a re PR tree-optimization/90510 (Unnecessary permutation)
c54eb7f40ce09bc22aca2aea7cdde6e286249ada sse.md (VF1_AVX2): New mode iterator.
9ee0fb4c276cc0281ce180917c1bd20600ae7e09 vect-signbitf.c (dg-final): Improve scan-assembler-not string to avoid false matching on 32bit targets.
5879ab5fafedc8f6f9bfe95a4cf8501b0df90edd re PR tree-optimization/88440 (size optimization of memcpy-like code)
1d672917b4b324a6aac3743f21b8c58940a0ceb8 re PR tree-optimization/88440 (size optimization of memcpy-like code)
11a04334157039895d2df8f5eb492064dc5d4608 Remove Solaris 10-only note about -mvect8-ret-in-mem
3aad84a49e51a0cd5bfae5176c5311303ebfb8a7 re PR testsuite/90615 (several vector test cases fail starting with r271553)
b9778c45fc1cd361c3012e30aeb02b53cb3e531c ada-builtin-types.def: New file.
d6b3654a9ace038ddce90f4c671d5edb4b3479e2 re PR tree-optimization/90637 (ICE in vect_loop_versioning, at tree-vect-loop-manip.c:3055)
997636716c5dde7d59d026726a6f58918069f122 Current vectoriser doesn't support masked loads for SLP.
441ed45ca2abe83f78be48e6ca816e9ec6e27222 PR libstdc++/90634 reduce allocations in filesystem::path construction
1585b483236dc2e9a9460a11c14cf3b32a967a84 re PR fortran/90539 (481.wrf slowdown by 25% on Intel Kaby with -Ofast -march=native starting with r271377)
00a0e1f5a3bd62519e4742477e11a32c7df2db98 Fix RISC-V build failure for go language.
3263fb9c6b90b565fc6ca4d2ce9247b97b4027d3 Remove using-declarations that add std names to __gnu_cxx
1ce8fc63a4132b66ced527afd2c88b840ecbb0b9 omp-low.c (lower_rec_simd_input_clauses): Set TREE_THIS_NOTRAP on ivar and lvar.
e7393c8936b9cfb1a28f7e16043c107490491ba4 tree.h (OMP_CLAUSE__CONDTEMP__ITER): Define.
bcde3345ea97aef36f5b4e29f09f71bcd41879b2 Fix ICE in vect_slp_analyze_node_operations_1
3a0afad0d212b3ff213b393728e018caf2daa526 re PR target/88837 ([SVE] Poor vector construction code in VL-specific mode)
ebaf3659632c0d5f45ca86593562c6c8367fda67 Enforce allocator::value_type consistency for containers in C++2a
a9fae4b47ff749ff4d063d60d54b409412ed151e IPA ICF: rewrite references into a hash_map.
e756e900e911fdbc57cd76d6c12d20a9b1892e55 re PR target/78263 (Compile failure with AltiVec library on PPC64le and -std=c++11 flag)
9ea2bfca6a3fd80f14d24557f71efaafae3846a9 omp-low.c (lower_rec_input_clauses): Force max_vf if is_simd and on privatization clauses OMP_CLAUSE_DECL is...
a2dbc0bf2aa42f0f078d0d46f7d9cdafc5383d93 Fix tests that fail in C++2a mode
ad60f42883a5641d4d8e7f5e9017b473cec29f93 Fix more failing tests for C++98 mode
5e664ed0938357392823d2a43be8a196526dd97c RISC-V: Move STARTFILE_PREFIX_SPEC into target OS files.
f75d3701103301d452c02548d48facc2f95613b9 toir.cc (pop_label): Only queue labels in a vector.
7ac9a201848f020a7803c5b3e20dc4768a992c40 fold_real_zero_addition_p for vectors
5a5da48013f29c55bd9a4221ebc72104b80e4982 re PR c++/90810 (Different intrinsics behavior on G++ 7.4 and G++ 8.3)
fa9863e7d34ecd011ae75083be2ae124e5831b64 re PR target/88834 ([SVE] Poor addressing mode choices for LD2 and ST2)
9b884225bfc609606f9b169b021c4da93feba48e re PR target/88838 ([SVE] Use 32-bit WHILELO in LP64 mode)
2778a719bebf7a32c34638cb39e9697c93ed484a tree-vectorizer.h (vect_loop_vectorized_call): Declare.
9a9c7a625d3813d062a6b17d071bd8cc9fe5cb8b Fix tests that fail without PCH
0356aab806921fe5d766d3fc74cf49dffc271d18 omp-low.c (struct omp_context): Add scan_inclusive field.
bce29d65ebe1316d15ec7582a1d257ef1be163f7 [Vectorizer] Support masking fold left reductions
fcae0292de06aeb54c44d26cfb80d798df60e339 Restore correct iv step for fully-masked loops
6a2892a6d3aef8a1ce26386d626f26e6100099f6 omp-low.c (lower_rec_input_clauses): Handle references properly in inscan clauses.
2e83f583c27ef7a9d3b0fb0b5ed372439d6222a8 md.texi: Document vec_shl_<mode> pattern.
36d0dada6773d7fd7c5ace64c90e723930a3b81e Have std::vector printer's iterator return bool for vector<bool>
48b63a31f8c02f262579432fd65f61abfefe4980 tree-vect-stmts.c (enum scan_store_kind): New type.
94872d7f99ceb9da9ecb90064d59d4518c9a6f37 Improve tests for std::vector<bool> printer
ceb76ffc6b65e8e35d6cde1148dc0ac958e4a06c * config/sh/sh.c (sh2a_function_vector_p): Use get_attribute_name.
080c269b61251983df2115b783f749216969d8c8 tree-vect-data-refs.c (vect_find_stmt_data_reference): Handle "omp simd array" arrays with one byte elements.
1612b1febdd5b6b6ad17c96c980a218bfd40c025 omp-low.c (lower_rec_simd_input_clauses): Add rvar2 argument...
b614fca25fac28542b8c6b2df3862688b96e0581 re PR tree-optimization/90913 (ICE in maybe_gen_insn, at optabs.c:7341 since r272239)
c13c129f8f49b41184f5b1c4b64d76d67db90dae tree-vect-data-refs.c (vect_find_stmt_data_reference): Handle even zero DR_OFFSET...
d611cec3de1e54091843019a0d02c23493d288ce re PR target/90972 (ICE in fold_convert_loc, at fold-const.c:2429)
1a3e38aee22d2b6f8f990b05c9fdb5eeb316acfd Properly sum costs in tree-vect-loop.c (PR tree-optimization/90973).
bc2687dd948d74b181f71bf4886f4b8719c51f57 re PR c++/90969 (ICE: tree check: expected array_type, have vector_type in array_ref_low_bound, at tree.c:13570)
44ead50eb657c17ca9113db3212fde8b25e655a2 Fix one another thinko in tree-vect-loop.c (PR tree-optimization/90973).
9f962469cabc7fdc2ee830125a5cb4e61e1632e4 re PR target/89021 (Implement mmintrin.h in SSE)
45309d286c80ecad8b7a4efba0e9aba35d847af6 Remove quite obvious dead assignments.
ef874db611879d5004e1d834543e55d31f2bfe1c Fix various issues seen with clang-static-analyzer.
76715c3216cf6ccd071fc852920af55d6b0054ae builtins.c (get_memory_rtx): Fix comment.
12213acba9cff14bb8e37bbafd5918ba3265f829 re PR tree-optimization/91010 (ICE: Segmentation fault (in location_wrapper_p))
14ec49a7537004633b7fff859178cbebd288ca1d re PR tree-optimization/58483 (missing optimization opportunity for const std::vector compared to std::array)
a7b3509eb6aa51d696be5edba6f4e451ceff03a0 re PR tree-optimization/91033 (ICE in vect_analyze_loop, at tree-vect-loop.c:2416)
8ba6ea878fd0965606ba6cfd74cf7097a40ed6c1 Remove another bunch of dead assignment.
cc49641a7132b66a8fdf26038aa1343e60473eaa re PR tree-optimization/91069 (Miscompare of 453.povray since r272843)
6b150619545449f40d14acb87d636535e1e838ac re PR tree-optimization/91069 (Miscompare of 453.povray since r272843)
75da268e1a563a1a52389cd2ecee12d07c45a655 re PR target/88833 ([SVE] Redundant moves for WHILELO-based loops)
6f01ad76c11eacc9f32539f769e4cb3fd169466a re PR tree-optimization/91063 (ICE in set_vinfo_for_stmt, at tree-vectorizer.c:676)
5cee32399049534903f3ddb0bf55657b909492f4 re PR tree-optimization/90911 (456.hmmer regression with r272239)
584b52902b4b1bbcabc0e5bdd4196bd223d2f5a8 [Ada] Ada.Containers.Formal_Vectors: make vectors always bounded
fe04f57a81366e5aaf0fec054d87919f6c243947 [Ada] System.Linux: fix typos in comments
5d1212877acd3f7a2a6ff23f91dc1a0ed106fdd4 re PR tree-optimization/91096 (Openmp vector max reduction incorrect)
7ef004023510d0c88e1a8bb718ee2848c1358ea4 [riscv] Fix ambiguous .md attribute uses
ace4317affd3068cc01c06f0928e119f1559519c RISC-V: Fix splitter for 32-bit AND on 64-bit target.
b68cae81760cd158ee465466280fc0df58e6a768 Avoid clash with system header declaration.
f069f0f20fb7a8467cb0dd6f01575e9c56aa8bc2 MAINTAINERS (Write After Approval): Remove myself, already listed in RISC-V port maitainer.
6cda84b509af152b2ea2cfc48f896cb7b776548d tree-vect-stmts.c (scan_operand_equal_p): Look through MEM_REF with SSA_NAME address of POINTER_PLUS_EXPR.
1f88cc260c67c8492ac15490184b8faead4b6f62 re PR tree-optimization/91114 (ICE in vect_analyze_loop, at tree-vect-loop.c:2415)
6c1dae73cd2ceb6a326f786f6d4e8674863de45e PR c++/61339 - add mismatch between struct and class [-Wmismatched-tags] to non-bugs
99b1c316ec974a39bdd949f8559bb28861b69592 PR c++/61339 - add mismatch between struct and class [-Wmismatched-tags] to non-bugs
a0aeb7fb93da156b64fd08391c79ff35a69af7ba tree-vect-stmts.c (vectorizable_comparison): Swap operands only once.
2cb7362310288cce61244e39f90fccd75b1c28e1 Fix folding of vector EQ/NE
831e688af50c5f77a2daa3cd3bfd0f27d54d5d72 fold-const.h (get_array_ctor_element_at_index): Adjust.
72ab1c51b607dd5446ee24ff9fce9178d6b811cb Relax vector_builder::elt sanity check
cf91b5997dec281e4b784c163d76d5be3e8569f6 re PR tree-optimization/91145 (ICE: in vect_build_slp_tree_2, at tree-vect-slp.c:1143 with -march=skylake-avx512 -O3)
d64c6837a72def74a510429cc33e279c355829b7 [PATCH] Fix typo in test case.
f2b29269c407f10718bc935b3dd5c7e8641b6847 re PR target/90723 (pr88598-2.c segfaults with -msve-vector-bits=256)
6c2833e74e4e64a71bafaf6e20e65506bbce5a5c re PR tree-optimization/88497 (Improve Accumulation in Auto-Vectorized Code)
d6350f82315a6d811c6dd0910ea37f64524ef07b re PR tree-optimization/91181 (Failing as_as type conversion in vect_build_slp_tree_1)
7eb5baff994b249c0fb5d913e6f7afa7b9fbbc63 re PR tree-optimization/91157 (ICE: verify_gimple failed (error: position plus size exceeds size of referenced object in 'bit_field_ref'))
7921a90e334117206c6bb78bad57e07fb242214c re PR tree-optimization/91178 (Infinite recursion in split_constant_offset in slp after r260289)
bc59a4cf1af79b77e3621b2103efc02c57ac7aec re PR tree-optimization/91207 (Wrong code with -O3)
b6339213ff68ac5a87b7fdda878f26b52d801b76 omp-low.c (lower_rec_input_clauses): Don't force simd arrays for lastprivate non-addressable iterator of a...
ffbb9818b0efd04bff65c372e3e9444fae634363 RISC-V: Add -malign-data= option.
21caa1a2649d586f4f8830aba43b0c132584f2dd re PR middle-end/91166 ([SVE] Unfolded ZIPs of constants)
efab3e3a7326ad503532955ccd31f953851e388a gimplify.c (flag_instrument_functions_exclude_p): Include namespace/class information in the printable name.
4ce6ab6889446984fd7017e2150962eb4550a7ee Implement more rtx vector folds on variable-length vectors
708cc6132bb374e2c5bd1c4f43f9fe7306d20970 Generalise VEC_DUPLICATE folding for variable-length vectors
c1b3d827832f883e0634b18c88eb2bbde335aa42 Handle IFN_COND_MUL in tree-ssa-math-opts.c
2153fa7b60a430970cfebade3b04c6a4dd3e83f6 re PR tree-optimization/91293 (Wrong code with -O3 -mavx2)
285cf766c1309edd7e61bf0dc45754af987d1b26 RISC-V: Raise error on unexpected ISA string at end.
ee9021bc1565655a1cd47039df58f093c7be0324 RISC-V: Fix testcase on rv64
f66e6e2bea4bf5999c972974f4a13044fdeb02dd re PR tree-optimization/91201 (SIMD not generated for horizontal sum of bytes in array)
860edc46624a23e678934a907d8fccb2fad0dcb5 RISC-V: Promote type correctly for libcalls
779724a5913b4e6a7ccccc0b8b415a772144a067 Add a gimple_move_vops helper function
868363d4f52df19d8d5e9529b8906fa25c8d0c95 Fold MASK_LOAD/STORE with an all-true mask
7551a6e467c64b3155d5b8f005cd7ea7143b21f3 RISC-V: Handle extensions combination correctly in multilib-generator.
609d9bdeab1365b04b84891e5d75cd86d003c8e2 RISC-V: Handle g extension in multilib-generator
e98c3ee9712a360b4f470f930ac0c68863db1d3f RISC-V: Fix C ABI for flattened struct with 0-length bitfield.
5b7ed762347ea9e82a3982b57975747de0943eb4 re PR target/91408 (ICE in extract_insn, at recog.c:2310 since r273981)
dfa6d55af715a2b902d6ed30f2c0276b1709dd5b [Ada] Extend range type in search primitives of formal vectors
0b1fe8cf6f1dde656c505dde6d27279dff388962 Optimise constant IFN_WHILE_ULTs
cb1180d547e3b28547134a06ee020163afa59cc3 Protect some checks of DECL_FUNCTION_CODE
4d732405bd91b54c196fdc38191f838bb01f23a6 Use checking forms of DECL_FUNCTION_CODE (PR 91421)
c6521daac82b717bad7e9e90dc8dd3c4e24ba2c2 re PR rtl-optimization/91154 (456.hmmer regression on Haswell caused by r272922)
93cf5515729f526761489ec3892c6f0ea0d7105b re PR rtl-optimization/91154 (456.hmmer regression on Haswell caused by r272922)
20103c0ea9336d2b5286eb7f2605ace3fd49a431 Add support for conditional shifts
eb2211e35713796c5899939d983d9e8c6d037e60 Add missing check for BUILT_IN_MD (PR 91444)
6490e2556dc1ae5346ef73022ff1e415c35742ad PR target/91441 - Turn off -fsanitize=kernel-address if TARGET_ASAN_SHADOW_OFFSET is not implemented.
f386ca413862152954a0ac73a7a2294fd6bbae1a re PR target/91498 (STV change in r274481 causes 300.twolf regression on Haswell)
a7c81bc1fb43366ca1b4332d8a6042b648a84cdc Use function_arg_info for TARGET_ARG_PARTIAL_BYTES
52090e4dbd064f486af606e3f8a283dbddc7c18a Use function_arg_info for TARGET_PASS_BY_REFERENCE
e7056ca417326a70eca05defb6a8b20b737d3417 Use function_arg_info for TARGET_SETUP_INCOMING_ARGS
6783fdb7057d559aa1da8afa2c15a702c532a03e Use function_arg_info for TARGET_FUNCTION_(INCOMING_)ARG
6930c98c69ad695469ee7daa74b3b6d578afdd0d Use function_arg_info for TARGET_FUNCTION_ARG_ADVANCE
0728477991b0a10cdde60ca1b4ae39fce414041a [Ada] Allow for of iteration on formal vectors
8ef64ab95417d6787b9bd2777ac282932b09a530 re PR target/91498 (STV change in r274481 causes 300.twolf regression on Haswell)
20e7012b755427d1db00ba6f236583ff3c24e710 RISC-V: Add testcase for testing li pseudo instruction
48a31a09839b12127ce7c40d7adc4bd5bf1d3407 re PR target/91522 (STV is slow)
b5a6addb5b60ff6232d1e11367b44f969d2a3e8f 2019-08-27  Richard Biener  <rguenther@suse.de>
2bd86b95f76315f102c52a81453ef375c97e8f1b re PR fortran/91496 (!GCC$ directives error if mistyped or unknown)
8a902edbbdb53a00209e88b6182457941ff196a9 Implement P1152R4: Deprecating some uses of volatile.
f48e4da3259d52076f86aa081cece40dfda7b235 re PR tree-optimization/91568 (internal compiler error: in vect_schedule_slp_instance, at tree-vect-slp.c:3922)
61f5cb2313f7a3336264eeabbe9fbaccd00e49a0 PR libstdc++/89164 enforce constraints for uninitialized algos
1ecaf589db96cd981feaa78c9c55244732fb0cad Fix errors in new test
a169f35890152e8a31ef9bdc0d28a2e0a62e866e RISC-V: Disable -msave-restore for shared libraries.
36ec3f57d305e343ad1bbffa53e3484661a176a6 RISC-V: Fix bad insn splits with paradoxical subregs.
2f4d895197e7b137f50624bef58c9b614bf081e5 RISC-V: Re-enable -msave-restore for shared libraries.
44a06a709565805d68994b65d871565a07ebf73e re PR tree-optimization/91665 (ICE in build_vector_from_val, at tree.c:1904)
8bdcbd013538dae97e72ba4c3c54f524daeeac72 misc/cgo/testcshared: restore gofrontend-local changes
a365fa0636886aeda83e57b84d837cfba13597fe Add call_used_or_fixed_reg_p
26d815a3e587ac04dbd63eec3fb5aecb04db7242 re PR tree-optimization/91723 (builtin fma is not optimized or vectorized as *+)
debae5232b81f4f0adcdc25ad8c8d2645a6ea376 golang.org/x/sys/cpu: define doinit when needed
58cc98767aa1d8136d36467b892dc4adaf427acc Vectorise multiply high with scaling operations (PR 89386)
bdc91a3299f955ed6b862adf0f2fea6d5496bc31 re PR tree-optimization/91750 (Induction vectorization introduces signed overflows)
d6ecb707cc5a58816d27908a7aa324c4b0bc67bb re PR tree-optimization/89386 (Generation of vectorized MULHRS (Multiply High with Round and Scale) instruction)
a6fa2e83e958802036ad9ed558bee1988299e0e7 gnatmake: Accept the `--sysroot=' GCC driver option
8054d17a735e4e1a35e9a24556eea100249345ed re PR tree-optimization/91790 (ICE: verify_ssa failed (error: definition in block 2 follows the use))
defc6f266c1dd625cc64ad1ecfbd1eacbcd66e4f Handle variable-length vectors in compute_record_mode
22b6299199da4efd3944cdaabca1d095d19ff901 Don't treat variable-length vectors as VLAs during gimplification
5fdd6038147e4ba30c8c01332dae8ab0d717bc14 tree-vectorizer.h (get_initial_def_for_reduction): Remove.
31de92e39bbeffb9f1641d292e94b48f70809ae1 tree-parloops.c (report_ploop_op): Copy from report_vect_op.
901083b9bdf69a7b1382f9682c6fd1d5759667dd tree-vect-loop.c (vect_is_simple_reduction): Remove operand swapping.
a923a4639434f9c845db002c8445e61cf5dda545 RISC-V: Fix more splitters accidentally calling gen_reg_rtx.
a7268fd7652406b41707af0c4b49e8523b667360 tree-parloops.c (parloops_is_slp_reduction): Do not set LOOP_VINFO_OPERANDS_SWAPPED.
f24f4c15884bf1ee65a10e2f959842eec4198876 Rework constant subreg folds and handle more variable-length cases
c449d3ae28ff4e133114fb67dbf7dcc7a95ca5d5 Enforce correct COND_EXPR order for EXTRACT_LAST_REDUCTION
b3c4d0dd309b7027f6e0f0b9a84829fcd53f7d64 tree-vect-loop.c (vect_is_slp_reduction): Remove.
ff6686d2e5f797d6c6a36ad14a7084bc1dc350e4 New IPA-SRA
6e222b2a3aede20f3093802d1649e75848e3bd2b re PR tree-optimization/91822 (FAIL: gcc.dg/pr88031.c (internal compiler error))
d63eadac7db10d4846bdffa93fd164cb035fb102 re PR testsuite/91821 (r275928 breaks gcc.target/powerpc/sad-vectorize-2.c)
9f635bd13fe9e85872e441b6f3618947f989909a Avoid adding impossible copies in ira-conflicts.c:process_reg_shuffles
193410e311002ebe1013a7b18ad30c0c2e8f31b1 * config/abi/post/riscv64-linux-gnu/baseline_symbols.txt: Update.
d469a71e5a0eb512b522248841c56496abca8cd6 tree-vect-loop.c (get_initial_def_for_reduction): Simplify, avoid adjusting by + 0 or * 1.
a7701dd16103048432ec8051e4773760c0e2cf90 tree-vectorizer.h (_stmt_vec_info::const_cond_reduc_code): Rename to...
fadb01364d36a50836201bc9a6a03e525d267967 re PR tree-optimization/91896 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1687)
704bc4bb36a0b091c42955608c47aee4d43faf8d Add TODO_update_ssa for SLP BB vectorization (PR tree-optimization/91885).
9593e8e5e391e77bb065d4689b7511bed6a640a3 tree-vect-loop.c (vect_analyze_loop_operations): Also call vectorizable_reduction for vect_double_reduction_def.
8eb60b2f2254eee16d44ed5169837743b0debd5a Remove include directives for deleted Profile Mode headers
1b4dbccc1f828fa00e6acc8b88d24301c65552df tree-vect-loop.c (vect_analyze_loop_operations): Analyze loop-closed PHIs that are vect_internal_def.
0bfc204142439b8167bf3447d7d12b65d1da82f8 re PR tree-optimization/91896 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1687)
18908a56e18f15f84a91a4529923dd0878b2294f Fix reduc_index==1 handling for COND_REDUCTION (PR91909)
29f26978866f32bddd656847441a3a953ffd7a21 tree-vectorizer.h (_stmt_vec_info::reduc_fn): New.
b19d2e5e1a895ee5e331c20f7eec02f3081b3d79 vec_perm cost to 1 for non-Power7 VSX architectures
61362d9d18916bd5b694385982cf4a02b7537b0e gimple.c (gimple_get_lhs): For PHIs return the result.
8209db250f305cc79fd751c3ed056fb9ff551a83 [C] Improve diagnostics for vector types
c7ea76ea5629e9f0357de49847274cf80e35f2f8 tree-vect-loop.c (vectorizable_reduction): Move variables to where they are used.
0b92cf305dcf34387a8e2564e55ca8948df3b47a invoke.texi (early-inlining-insns-O2): Document.
8951374df1e7139b163129c9e18161c5253d0fe2 libada: Remove racy duplicate gnatlib installation
61e619b4fd1252d0fee7f4bfc821824031c52dc5 Disable tests that aren't valid in parallel mode
291fa23ac04e317877c1e102937532f080180bb2 tree-vectorizer.h (stmt_vec_info_type::cycle_phi_info_type): New.
9ff9a0a5e6edd8729f559bf86ca06f781c4da246 re PR tree-optimization/91940 (__builtin_bswap16 loop optimization)
9f4d9a366b3299c276043ab987234c7bed7d29f2 tree-vectorizer.h (vect_transform_reduction): Declare.
806bdf4e40d31cf55744c876eb9f17654de36b99 re PR tree-optimization/91975 (worse code for small array copy using pointer arithmetic than array indexing)
dcd2ca63ec5c467decb70db983fc19a8329f67dc Introduce can_vcond_compare_p function
69f8c1aef5cdcc54d5cb2ca4f99f4f26c2f822a9 tree-vectorizer.h (_stmt_vec_info::v_reduc_type): Remove.
f78347996e02a8a767a525bfb764e769afe29d67 tree-vectorizer.h (_stmt_vec_info::reduc_vectype_in): New.
4a8841c0413d52261a8d024577381582d07a866a tree-vect-loop.c (vect_is_simple_reduction): Simplify and allow stmts other than GIMPLE_ASSIGN in nested cycles.
247afa98ba2512c7d90f3e9e05af41067ef756a3 re PR middle-end/92046 (Command line options (that are per-functions) are affecting --params which are global.)
1e99e6fe6bb61ad2011030324cfdf84d2a67e75d vec_promote_demote cost to 1 for non-Power7 VSX architectures
9d99596e3289766c392466eebb8b2f2d2f4f1bc1 re PR tree-optimization/92066 (Many vectorization tests FAIL)
bd01f4da3ecc88b25712e2d2a8f5c7ab3ed1b0e3 tree-vect-loop.c (vect_analyze_loop_operations): Adjust call to vectorizable_live_operation.
56898e437a538c7edc0724a3650f5cb81c9d5721 [C] Avoid exposing internal details in aka types
7bd8bec53f0e43c7a7852c54650746e65324514b re PR tree-optimization/92069 (ice in vect_analyze_scalar_cycles_1, at tree-vect-loop.c:560)
4236e880ee7902f789f8b99e21faea33ecb8a6dd mips.c (mips_cannot_force_const_mem): Reject vector constants.
c30587c0200f52f8845a5aea21bd7bef6cbe0bf4 re PR fortran/92094 (ice in vect_transform_stmt at tree-vect-stmts.c:10921)
c1d781707eb611d65aa4e1275f246debba557a3d [C++ PATCH] clone_function_decl breakup
bf78ed91a445d188e4368adc30dd5c32d973ed6e re PR tree-optimization/92119 (ICE: SIGSEGV in contains_struct_check (tree.h:3380) with -Os -fno-tree-dce -fno-tree-dse -ftree-slp-vectorize)
aab8c2fd6542a52663243eec160b80bdd61516d5 tree-vect-loop.c (vect_valid_reduction_input_p): Remove.
3599dfbaa22b95ecabd3da9ba68ad4bb4f1124a4 RISC-V: Include more registers in SIBCALL_REGS.
7ca9ca86bd43ab86cb023c1a7cf1dc465b2e2c25 re PR tree-optimization/92129 (ICE in vectorizable_reduction, at tree-vect-loop.c:5869)
aa9dffac731d0359a0e7a925ff8f4a1bef182eac tree-vect-loop.c (needs_fold_left_reduction_p): Export.
a421fe9e610b5dbfce1913cd724c8ba193addd47 [vect] Refactor versioning threshold
31b35fd503e1c6713839db24044812d237aba5f1 [vect] Outline code into new function: determine_peel_for_niter
f261d4808cc28a2dfd47fe06c97364c0869bb78f [vect] Be consistent in versioning threshold use
58baf7ab85cbb1068a651c96f7d56e2902ead6cc tree-vect-loop.c (check_reduction_path): Compute reduction operation here.
47519a5687d48af4b932d54b0525fafcdc0e48d6 PR libstdc++/92124 fix incorrect container move assignment
c11cccc0285f02f117a1e80924fb7673b6486ce9 tree-vectorizer.h (_stmt_vec_info::cond_reduc_code): Remove.
fa0c8df71d4f0476834db0b7cd88524878b46cf7 Avoid recomputing data references in BB SLP
1d778697b37aec23db5b6003dfe08d2d78bd9424 Move code out of vect_slp_analyze_bb_1
da157e2ee9e12348df78246ee33b244b7cc334df Avoid setting current_vector_size in get_vec_alignment_for_array_type
a5c3185a503fbdbc1bf05efe8ab9d12850a211c1 Pass a vec_info to vect_supportable_shift
dcab2a0d1d4b2c0b4bba6f5e3834ec0678a2a5c8 Pass a vec_info to vect_supportable_direct_optab_p
1bd5196c9b1a0cd7280adadd6d788f81a82ca023 Pass a vec_info to get_mask_type_for_scalar_type
7ed54790da87bbb4a134020a9fb8bd1b72fd0acb Pass a vec_info to get_vectype_for_scalar_type
cdbe6e9bb4ae2882f77f94993783085fa342a9f9 Pass a vec_info to duplicate_and_interleave
43fdde5738ea0554fa000987e9769add027f4876 Pass a vec_info to can_duplicate_and_interleave_p
6c261c667801eee46a6221d3681d17493c0bbd65 Pass a vec_info to simple_integer_narrowing
db8374a63fd0ea84f72ac76cc899be44df36df6a Pass a vec_info to supportable_narrowing_operation
b0dab10e71b03441beefbbf951c0812056413cd3 Pass a loop_vec_info to vect_maybe_permute_loop_masks
830e90dab3dee5c8129c7760ff09ab112c2cd271 Pass a vec_info to vect_halve_mask_nunits
8d1473958808fe4714ec24991ac83ee6cbf45397 Pass a vec_info to vect_double_mask_nunits
ba7f76dd6bbf038948bbe516764a8bb0c851f750 Replace current_vector_size with vec_info::vector_size
d2db7f790194ac690beae00f2f7956e3fe865cac [vect] Only change base alignment if more restrictive
ae7f3143a3876378d051e64c8e68718f27c41075 re PR tree-optimization/92161 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1687)
30c0d1e3cf8b03992e08cfd00ccf1fcb638d3c03 tree-vectorizer.h (_slp_tree::ops): New member.
53b15ca96116544a7a3ca8bc5f4e1649b74f3d45 re PR tree-optimization/92162 (ICE in vect_create_epilog_for_reduction, at tree-vect-loop.c:4252)
87121696fb2ddbec5f33daa359234850f7fd306d Fix use after free in vector_size change
9107d6526b938eba8168025c0d90d06ad3634e69 re PR tree-optimization/92173 (ICE in optab_for_tree_code, at optabs-tree.c:81)
6c7b0df8029d01e05577668333660d0bc58a3023 re PR tree-optimization/92173 (ICE in optab_for_tree_code, at optabs-tree.c:81)
2cae56bd61a048b0fac5c2829283744abc44c545 Remove redundant std::allocator members for C++20
f99d62629933adf91e7e0bc1b1ff344ffb68e1a2 tree-vect-slp.c (vect_build_slp_tree_2): Do not build op from scalars in case there's a constant operand in its definition.
6bd7e7069504668eb37b2b9c976f4f0942666ef2 re PR tree-optimization/92179 (r277288 causes ICEs compiling several test cases)
82e8e335f917b9ce40801838c06f7945cf88da43 re PR tree-optimization/65930 (Reduction with sign-change not handled)
603aec6775d5191fafd57412364578db68432f74 Adjust extension types to use allocator_traits
85f241149328ce8e677cbdfa7fa8592aca155066 PR c++/91369 Implement P0784R7 changes to allocation and construction
0214d31a48f867b9b00134cea7223d35ed7865aa tree-vect-slp.c (vect_analyze_slp): When reduction group SLP discovery fails try to handle the reduction as part of...
0caece2c6b3fe5d48104db170e72cf3660f825db re PR tree-optimization/65930 (Reduction with sign-change not handled)
3574e5df1f2a483b992b272ec57080472c24f0cb re PR tree-optimization/65930 (Reduction with sign-change not handled)
e227594789d909fbad56f6036910938678738f92 re PR tree-optimization/92205 (ICE in vect_get_vec_def_for_stmt_copy, at tree-vect-stmts.c:1688 since r277322)
4352288a3df915575a2b820f702242908740106f tree-vect-slp.c (vect_get_and_check_slp_defs): For reduction chains try harder with operand swapping and instead of putting a...
bf037872d3cd0928bea72335dc7a138a0b2fb43c ipa-sra-19.c: Avoid unprototyped function
ea3628bdeb9a5411aaa1aa567fa6bc005057482f symbols-summary.h (fast_function_summary<T *, [...]): Free m_vector.
f8cb8bcde13df2f2b1a996567c849ec512eec210 arc.c (hwloop_optimize): Add missing space in string literal.
ea133b14f48ed5730748a7e02e322fb07ccc2d85 tree-vect-loop.c (vectorizable_reduction): Verify STMT_VINFO_REDUC_IDX on the to be vectorized stmts is set up correctly.
89d0345ad7b8d84045813972ee60557a6b511c57 Fix reductions for fully-masked loops
77100812a3bf4c693cb24c65be54ea367f17a246 tree-vect-slp.c (vect_get_and_check_slp_defs): Only fail swapping if we actually have to modify the IL on a shared stmt.
7098ab48b08782af5016dc8ac6d10215994447a4 re PR tree-optimization/92222 (ice in useless_type_conversion_p, at gimple-expr.c:86)
8bbf3dea78325c39d7750e815024eef960415592 Adjust predicates and constraints of scalar insns.
ffbdd78a4a84d80a5303d4f7a20553cf96954db9 Fortran] OpenACC – libgomp/testsuite – use 'stop' and 'dg-do run'
e0c4f7fbd6a4ee8e3a1468514044bd941fa28522 tree-vect-loop.c (vect_create_epilog_for_reduction): Use STMT_VINFO_REDUC_IDX from the actual stmt.
97c6bea819ec0a773041308e62a7c05c33f093b0 re PR tree-optimization/92241 (ice in vect_mark_pattern_st mts, at tree-vect-patterns.c:5175)
96d9d1620f28517de0464ab636662d9a35a92993 re PR tree-optimization/92252 (ICE: Segmentation fault (in vect_stmt_to_vectorize))
fa03d5763a91f5061152842c92fbb4e446a3b75f re PR middle-end/91272 ([SVE] Use fully-masked loops for CLASTB reductions)
e18a6d1441cfb5d43d3193a2643207fc3f95fd5a gcc/riscv: Add a mechanism to remove some calls to _riscv_save_0
891966480630f58f115825c31badc59dd18d5eb9 re PR tree-optimization/92241 (ice in vect_mark_pattern_st mts, at tree-vect-patterns.c:5175)
b7ff7cef5005721e78d6936bed3ae1c059b4e8d2 re PR tree-optimization/65930 (Reduction with sign-change not handled)
1d149b7260bcc4c0c6367b3aea47a8b91a1cf345 Fix reduc_index calculation in vectorizable_condition
97c146036750e7cb3966d292572ec158a78f356e [vect]PR 88915: Vectorize epilogues when versioning loops
318bd8c60d83ca294b237559908dd9f88ee7c300 re PR tree-optimization/92260 (ICE in exact_div, at poly-int.h:2162)
b4673569c2a8b974e3f84ffaa547941c5d40cfe5 re PR tree-optimization/65930 (Reduction with sign-change not handled)
b81f2dafdbd2c5aa49213b35dc12d4610834e39e re PR tree-optimization/92275 (ICE: error: definition in block 11 does not dominate use in block 15 since r277566)
9aeb3bef2cae234dbb90609392e536bafc09365c Apply C++20 changes to various iterator types
1297712fb4af6c6bfd827e0f0a9695b14669f87d [vect]Make vect-epilogues-nomask=1 default
d9a6144c87bd4c15c855785ced57907d66754861 [testsuite] Fix wrong order of dg-additional-options
271da732841345d3834cf458d47f8242ac5ef513 PR testsuite/92127: Disable unrolling for some vect code model cases
8dc56a2244cfe35cbdb53e0f586c16f90a2677e4 RISC-V: Build soft-float divide routines for -mno-fdiv.
360386c7ef1c3fa30de216b1d68ed6a27296fd80 ipa-fnsummary.c (inline_read_section): Set vector size ahead of time.
b76f4e6c06bd494d2383c4c16d1e1a034da74641 re PR bootstrap/92301 (Wrong vectorizer code since  r277566)
a6ba623777513e31721030092e4d786f461a0f06 re PR tree-optimization/92345 (ICE in vec<_stmt_vec_info*, va_heap, vl_embed>::space (vect_get_and_check_slp_defs))
818b3293f4545d899148810f4f7d676b81e989dd [SLP] SLP vectorization: vectorize vector constructors
494d6c28c53d0852bb6468b1f1ca189159775fcc [vect] Clean up orig_loop_vinfo from vect_analyze_loop
0ec77a6c25cbe321d9712e41a3aa04dff97eaaa6 SLP: Initialize variable to fix bootstrap after r277784.
a1b680597178df866e6de80444695fab82b90492 [D] Remove unchecked to_constant in VECTOR_TYPE handling
f340142b839ca1ed576013b4dba3d34245bac7d0 re PR tree-optimization/92324 (ICE in expand_direct_optab_fn, at internal-fn.c:2890)
02bf7e6fa219f939b3225c54fbe8bab2133b1aeb re PR tree-optimization/92371 (ICE in info_for_reduction, at tree-vect-loop.c:4106)
a81ffd93b83c4be250514ff385b5b88fa5c3835b Allow libcalls for complex memcpy when optimizing for size.
2e7a4f579b1157754ea20a03431b4fa80cd4567a [vect] PR92317: fix skip_epilogue creation for epilogues
72d6aeecd95ec49fff1d258e4631167a03351cbb Restructure vect_analyze_loop
8ec5b16a9a3dbd6d825596c22f1bc32646de28fe Check the VF is small enough for an epilogue loop
feba3d8838118d3c41b8e25f13beaa6a15b38302 Use scan-tree-dump instead of scan-tree-dump-times for some vect tests
06af1f1a0def9de076ec629ea634122f15882ce6 tree-vect-loop.c (vectorizable_reduction): Remember reduction PHI.
4b205bf82d06c4d9d0ae7b78e54c712d79d5b021 Don't vectorise single-iteration epilogues
1aeecaf58fa1fb33a08fba9b62f007740e9cb843 Fix inefficient vector constructor.
09eb042a8a8ee16e8f23085a175be25c8ef68820 Generalise gather and scatter optabs
f486280c53be53136f0bb9b578f43dc6c9c5acea [C] Opt out of GNU vector extensions for built-in SVE types
f1e1ed3314b7c6308f64cbbcf6d1916e239c8e35 re PR tree-optimization/92324 (ICE in expand_direct_optab_fn, at internal-fn.c:2890)
be5f7eccf766a4c3a59b821f77ce320001df838f Handle POLY_INT_CSTs in declare_return_value
714fc568abfd02d7dc28607ff60301902f830917 re PR tree-optimization/92324 (ICE in expand_direct_optab_fn, at internal-fn.c:2890)
b602712b3ea2a0729a2eda61bd9ee795aba6138f [vect] Disable vectorization of epilogues for loops with SIMDUID set
4e9d58d16767b1bc686f0c4b3bd2da25dc71e8f3 [vect] PR 92351: When peeling for alignment make alignment of epilogues unknown
d308ca27c71e43625b378dc6c2774105867d4fa7 Use correct vector type in neutral_op_for_slp_reduction
87b47251924c7539a9a8e191587d118a14496473 [vect]Account for epilogue's peeling for gaps when checking if we have enough niters for epilogue
599bd99078439b9f11cb271aa919844318381ec5 Fix SLP downward group access classification (PR92420)
6e9a85d5052607c8ed31940ce2794323df9463cc * typeck.c (cp_build_binary_op): Sorry about <=> on VECTOR_TYPE.
f03099371687f3f087e4949a68daccf76c8d18bc re PR tree-optimization/92347 (ICE in vect_get_vec_def_for_operand_1, at tree-vect-stmts.c:1537)
62aee289e4791fd68aace01accf433fb26b3eeae Add OpenACC 2.6 `serial' construct support
028d409252058d88805341a3f6dc0ff1553f5bdc Apply mechanical replacement (generated patch).
0c29cac4a8cc840a0a597313147a7e0df0064c54 Remove gcc/params.* files.
830d1b18526dd1f085e8a2e1467a6dde18fc6434 re PR tree-optimization/92461 (ICE: verify_ssa failed (error: excess use operand for statement))
41098a37444b69d7b3b3072fde52e2785bef7012 re PR tree-optimization/92460 (ICE: verify_ssa failed (error: definition in block 13 does not dominate use in block 22))
3f446c27195400aea98ff9c37ed2651ab54f7c03 Fix vectorizable_conversion costs
e4020b28d02a00d478a3a769855ae6a8d9cc6b26 Don't assign a cost to vectorizable_assignment
6eed64b96d886da2518d86eae5bc0a5ed66cabe0 Avoid accounting for non-existent vector loop versioning
61e5f2df0345bcc1f7675125922692d727e20603 Account for the cost of generating loop masks
4a96e1c4dd7ab3bd412ba5b8b1206efd8feb4155 Enable libsanitizer build on riscv64
eb270950acbae6f70e3487a6e63a26c1294656b3 Support extended aggregate jump function in ipa-cp
9773f69c1161677e68f693562da82c92fd3821da [testsuite] Fix PR92464 by adjust test case loop bound
f09552335030433018fd5f7f6b9848339b5ca2da Add a targetm.vectorize.related_mode hook
d083ee47a9828236016841356fc7207e7c90bbbd Replace mode_for_int_vector with related_int_vector_mode
0a0ef2387cc1561d537d8d949aef9479ef17ba35 Add build_truth_vector_type_for_mode
e8738f4e9686203451fd11f05b268b8a31b95ebd Remove build_{same_sized_,}truth_vector_type
10116ec1c147a76522cafba6b6a5b4ed1cb37b77 Pass the data vector mode to get_mask_mode
95da266b86fcdeff84fcadc5e3cde3d0027e571d Use build_vector_type_for_mode in get_vectype_for_scalar_type_and_size
0203c4f3bfb3e3242635b0cee0b9deedb4070a62 Use consistent compatibility checks in vectorizable_shift
e021fb865564b62a10adb1e98f75b5ea05058047 Replace autovectorize_vector_sizes with autovectorize_vector_modes
1c84a2d25ecd4c03dde745f36a4762dd45f97c85 Replace vec_info::vector_size with vec_info::vector_mode
2df4150075c03f8a292c40afd3bb25febb673578 Make less use of get_same_sized_vectype
7f52eb891b738337d5cf82c7c440a5eea8c7b0c9 Require equal type sizes for vectorised calls
df7c22831f1e48dba49479c5960c1c180d8eab2c Support vectorisation with mixed vector sizes
a55d8232df3dd4f7a3f5b70025074c3919b802a6 Avoid retrying with the same vector modes
05101d1b575a57ca26e4275e971da85a0dd1d52a Allow mixed vector sizes within a single vectorised stmt
9c437a108a14b9bdc44659c131b0da944e5ffeab Vectorise conversions between differently-sized integer vectors
60838d634634a70d65a126166c944b159ac7649c Consider building nodes from scalars in vect_slp_analyze_node_operations
3771033244b3ee1b53a8a00d734580b16384fdd3 Tweak gcc.dg/vect/bb-slp-4[01].c (PR92366)
d03431d0f59f5aa5c2a8e2e5ea94ea1660b240f8 re PR tree-optimization/92324 (ICE in expand_direct_optab_fn, at internal-fn.c:2890)
b9f71c51cd578c6ab6ad2986edb80ba48aa477bc re PR tree-optimization/92512 (ICE in gimple_op, at gimple.h:2436)
f31e515fd519fe6ec3dc0b5cf5b1388fd1373ba4 Fix vector/scalar to vector/vector conversion (PR92515)
9b75f56d4b7951c60a656396dddd4a65787b95bc Apply maximum nunits for BB SLP
f884cd2fea62eebe71b422e1c97e550958dd42ae Extend can_duplicate_and_interleave_p to mixed-size vectors
bcc7e346bf9b5dc77797ea949d6adc740deb30ca Optionally pick the cheapest loop_vec_info
1fb2b0f69ee849142b669ba1b82264ce6d0f75f9 Move canonicalisation of dr_with_seg_len_pair_ts
e9acf80c96d681917d930869b7cbfb7d2fa54d51 Add flags to dr_with_seg_len_pair_t
52c29905259363ce2b78dd7aa8a25cf531cddb3a Record whether a dr_with_seg_len contains mixed steps
cad984b289e2b3aca786314c673339eb0500fefa Dump the list of merged alias pairs
b4d1b635737a4780e5be247f8be9550eaf83dae5 Print the type of alias check in a dump message
f9d6338bd15ce1fae36bf25d3a0545e9678ddc58 Use a single comparison for index-based alias checks
5be106b86006e00c80bf846a172b2b69b40d10ef re PR tree-optimization/92558 (Miscompare of 554.roms_r with -Ofast -march=znver2 -flto since r278289)
10a73df76280e12886cb20b028727436d73724c5 re PR tree-optimization/92516 (ICE in vect_schedule_slp_instance, at tree-vect-slp.c:4095 since r278246)
1aeffdce2dfe718e1337d75eb4f22c3c300df9bb LRA: handle memory constraints that accept more than "m"
8489e1f45b50600c01eb8ed8c5d0ca914ded281c Optimise WAR and WAW alias checks
13c247d6f2a75b7e7a11546e897489716bc31506 Handle VIEW_CONVERT_EXPR for variable-length vectors
78930e4b4867c0558cf347778591a67a0b235ca0 Add an empty constructor shortcut to build_vector_from_ctor
58c036c8354e4d14551ceaeffaa1dda2fe445640 Add optabs for accelerating RAW and WAR alias checks
e89a689f0a1b94083af100314373a6c2ef2c280e Initialize a variable due to -Wmaybe-uninitialized.
f1e0c7e0eb3eafb122fc3d00242828c82a9286a2 re PR tree-optimization/92555 (ICE in exact_div, at poly-int.h:2162)
04c4599d30b1eb7c21d39b15a685aa1d9b8bf968 re PR tree-optimization/92554 (ICE in vect_create_epilog_for_reduction, at tree-vect-loop.c:4325)
ef8777c14ce8694f53eab7a88d24513cbf541ba4 re PR tree-optimization/92581 (condition chains vectorized wrongly)
2439d584d5def75d705f33218bb3b97fca4c11a1 re PR tree-optimization/92537 (ICE in vect_slp_analyze_node_operations, at tree-vect-slp.c:2775)
140ee00a961fda084c1b4b3f0e7e489a917858f7 tree-vect-slp.c (vect_analyze_slp_instance): Dump constructors we are actually analyzing.
516fd7cedb025b09000563cdba6214461621400d Add pool_allocator for fibonaci heaps.
83115e9eb8a54893088eb556fb4cc9194c0c5926 libgomp/test: Add flags to find libatomic in build-tree testing
be12e7c72676a25cf1cd2fef513066283887760a Adjust expected output for bb-slp-21.c (PR 92527)
28cebdb178ecfad17726711c78e1aa669cb5393c Restrict bb-slp-40.c to targets with VnQI addition (PR 92366)
0f6e9b2946bfde1086263f4457ef9f11b0edded3 Restore stmt def types after scheduling two-operation SLP
a877996fa38034348c569f2fe1651e88a99df737 revert: re PR tree-optimization/91790 (ICE: verify_ssa failed (error: definition in block 2 follows the use))
d78b70959f334699bf556e9b8d4e0a8c12a64b46 cfgloop.h (loop_iterator::~loop_iterator): Remove.
b0d5547612f08d7112d9284a7b5a862df3373570 ipa-fnsummary.c (evaluate_conditions_for_known_args): Be ready for some vectors to not be allocated.
9c572192f0019c3dec3ef8c00c00c809e355820f Fix previous commit.
7c327e2d4d04966c8c5dc19cee9e242befdff6ef re PR tree-optimization/92596 (ICE in exact_div, at poly-int.h:2162 since r278406)
934f135b967c7501be6e2e10a2c3c03c54a198d3 Add missing VECTOR_MODE_P checks (PR 92595)
91f161b03b649984991573c2f2605555da4a678c Add more markup to vect-alias-check-{1,18}.c (PR 92543)
557532d1728af193d47867dabbe26bd556fb8586 Reject versioning for alignment with different masks (PR 92526)
27071013521b015d17a2666448f27a6ff0c55aca Move EXTRACT_LAST_REDUCTION costing to vectorizable_condition
aa5521f298fc8042e11e7b352270a33e6c454cb4 Fix markup in gcc.dg/vect/vect-cond-reduc-3.c
f2f3dbc67b85af0f1b6c6feb529a67baf011939c Disable epilogue loop vectorisation for vect-widen-mult-u8-*.c
204b0bebee5343b5bd07e2a7be6fd74d6698b937 re PR tree-optimization/92618 (error: type mismatch in binary expression in reassoc since r273490)
9340d34599e6d5e7a6f3614de44b2c578b180c1b Convert inliner to function specific param infrastructure
1e83bd7003e03160b7d71fb959111e89b53446ab Convert inliner to new param infrastructure
f10d2d85c90c9c649675c248cd5a99f66288f81f cfgloop.h (get_loop_exit_edges): Add extra parameter denoting loop body, defaulted to NULL.
c6aef8d8009e324c971b892e8fa3c163bfdf6ba1 tree-vect-slp.c (vect_detect_hybrid_slp_stmts): Add assertion.
f4a74d2786ec812e40cfd0b3b7fa3cbeb2093444 re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
e4c935cb98add40d0a6350a798a8258951dfc9d9 Update vect_char_add target selector to use its own cache
1fa715db5490fb44668e0a37f9a5927d9030a50e re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
1f9fae28095488a9accd1e7688116ed4d145b03f [PATCH] Fix PR91790 by considering different first_stmt_info for realign
88feafba3cb5b186d53080c4958474065c4bd5d2 re PR tree-optimization/92690 (vector CTOR optimization performs invalid conversion)
477daf831aea18923733772d686eb1ed448d96e7 target.def (TARGET_VECTORIZE_BUILTIN_CONVERSION): Remove.
78307657cf9675bc4aa2e77561c823834714b4c8 re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
68578d6efa09a5e5d3e7eca4de48f03b21f701c0 re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
34b43828f840640f8275712867fc52ef6c2714dd Handle C2x attributes in Objective-C.
438d9c4afa635c7a1475feebbc220fe8d335c664 re PR tree-optimization/92715 (error: position plus size exceeds size of referenced object in  ‘bit_field_ref’)
60178a322b4e8d0dc6cf50f57f8fa1fdf624a1f0 Testsuite: Turn off vect-epilogue-nomask for slp-rect-3
3edaed39583aeb49cfda7093ed4c0f9fed3fbea0 Don't pass booleans as mask types to simd clones (PR 92710)
ce19a4822794992097deab96bf15bf78ff481ea1 Improve tree-vect-patterns.c handling of boolean comparisons
4177e933b309408e69eb5561fee7a3cc5e6f8899 Make vectorizable_operation punt early on codes it doesn't handle
1c5d68a677b076262c5508e6d4fbdb765cba2d2f Make vect_get_mask_type_for_stmt take a group size
0c3ea6b3424ee4d32d97ca5d7453891b587b3132 Record the vector mask precision in stmt_vec_info
02d895504cc59be06fc3f7ec0cfd4eb160561211 Don't defer choice of vector type for bools (PR 92596)
7e99af4816cfad578094fcf08e2377f3ed76e201 Fix DR_GROUP_GAP for strided accesses (PR 92677)
d005f61e7a0dbb2c991f13b4b61b1a27ca2d8b73 re PR fortran/91003 (ICE when compiling LAPACK (CGEGV) with optimization)
7a4f45d7e61e651330931df9d09fe6299874929d driver: Do not warn about ineffective `-x' option if no inputs were given
65ef05d0b7fb429c5760189e638c441dc3da33f4 [C] Add a target hook that allows targets to verify type usage
2679730bab0202e7591adc6ac0ea1347b8954983 re PR tree-optimization/92742 (ICE in info_for_reduction, at tree-vect-loop.c:4367)
fddcfa5b84bf8a063e3e1347d787df5a36beceb2 Tighten check for vector types in fold_convertible_p (PR 92741)
3d109462bdd666cc5ce2d0b6b0c3b7a3c19b0b4c re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
89ee3a872fdf460402d1fc137e5cdce20f62bc8e re PR tree-optimization/92751 (VN partial def support confused about clobbers)
5105b576dfdcae0c6cc30a89a68b4ef3cbf56a1c re PR tree-optimization/92645 (Hand written vector code is 450 times slower when compiled with GCC compared to Clang)
577f4a0e5e7f7ef9b5729a3eed79e523cba9dfa9 re PR target/92758 (r278833 breaks gcc.target/powerpc/fold-vec-splat-floatdouble.c)
2c98350fcb269a653b11f73ca0175679aa29977a Mark constant-sized objects as addressable if they have poly-int accesses
ee1de08d4d22648cf3168caa60e283135755da85 re PR c++/91369 (Implement P0784R7: constexpr new)
6f1e966874de23d7e47cbaebfb5a9de6759cb089 [C++] Opt out of GNU vector extensions for built-in SVE types
7b86aaf45c00ec038a0da003f41d5334a00e603c Fix VIEW_CONVERT_EXPRs for VECTOR_BOOLEAN_TYPE_Ps
a3408fa3fbf20455eb3b17b5c78397f9d66065c7 re PR tree-optimization/92803 (error: type mismatch in 'vec_perm_expr' since r278764)
b0a71a184c6e2ec2cdf5eed90308d4e96fb1beda re PR tree-optimization/92818 (Typo in vec_perm -> bit_insert pattern)
56b4b16eb18e8af5615a9c7b56c6b5e7f9c3adf0 Check for bitwise identity when encoding VECTOR_CSTs (PR 92768)
8575d5925226a8f92ee644d6d59a2b1b93840d94 [Patch, GCC] Fix a condition post r278611
81884594ce15b7117d136380c8d0661b57ab558c re PR tree-optimization/92768 (Maybe a wrong code for vector constants)
2ef278569f60a2c1556f1752aeba39c586521371 re PR tree-optimization/92819 (Worse code generated on avx2 due to simplify_vector_constructor)
ea1ff9e46c7ec5e49ec671616cfcf405ef665054 Avoid quadratic behaviour in prune_runtime_alias_test_list
2b99bed8443f97550962e6e994b7395534a38e0c Enable QI/HImode vector moves
6d8fd122c4f856e9c6037adc310505f2d65347d9 Fix overflows in -fprofile-reorder-functions
8b905e9b0c09530c0f660563540257f3d181c2ac Enable mask movement for VCOND_EXPR under avx512f for 128/256-bit vector when integer mask is available.
8e03b21e84e4b6a3c806bb48bb5eceac1f7ed273 re PR tree-optimization/89007 ([SVE] Implement generic vector average expansion)
49647b7b25673273262fb630598027c6d841690f re PR tree-optimization/92834 (misssed SLP vectorization in LightPixel)
e3126e5f649c8eebe07fc517d86f10d6867b7eec [GCC, Vect] Fix costing for vector shifts
ca6932ad0ccbbbe3c788cd71595d9a25b8ae0d20 typeck.c (check_for_casting_away_constness): Add location_t parameter and use it.
ca49c831ca9c042db6cea746c21040c1ada18abb Disallow EXTRACT_LAST_REDUCTION for reduction chains
9ec35478ccf0f3539988a054b7996278706a7710 Fix EXTRACT_LAST_REDUCTION handling of pattern stmts
f1c13d6ddeecc9da5f53643b6b6b715546d670fe Record the loop masks needed for EXTRACT_LAST_REDUCTIONs
b78500ecb86ef800509270d2d2f161e4eb9aadd0 Add missing conversion in vect_create_epilog_for_reduction
b78d005e8fa47fd698f103ee62d145c01f05de38 Make dwarf2out punt for MODE_VECTOR_BOOL
6004c17b4d1a2dd1e1936b2e705a5ccfb6e48ab2 libstdc++: Rework std::copy/copy_backward/move/move_backward/fill/fill_n algos
f5c03155aa77bdb065fed3c5a0031db45a850493 re PR target/92723 (ICE in expand_shift_1, at expmed.c:2635)
d878b2c9819e0ae9e942c87c3eb547b0bfb30dc5 [Ada] Use correct subtype for call to Last in formal vectors
666b46c6106dbd3ad6a27be4bf1844ccbaa8e67d [Committed, testsuite] Fix PR92870
1a4c0446c0b38d86e7385a114cd99af591eece05 re PR target/92908 (wrong code with -Og -fno-tree-fre -mavx512bw and vector compare)
070fa48b0a4fbdc754e18962d586f41cc263dad7 Fix PR92950: Wrong code emitted for movv1qi
8354bb0ebe5be8427c3795d0a32ad0564bf71489 Add pointer to PR92772
ed0eca5e631a1652c42a7f91b6c557aea887e1ce Don't mangle attributes that have a space in their name
14818f987abbb15c203043838e4ef9fbb20c783e PR c++/92745 - bogus error when initializing array of vectors.
d42b84f427e404e6deca78a4cc76c40ab506d737 testsuite: Fix run-time tracking down of `libgcc_s'
c8e759b4215ba4b376c9d468aeffe163b3d520f0 libgomp/test: Fix compilation for build sysroot
96bea935c08ab0773b02cdeed7a2c066744fe861 [C++] Fix ICE for binding lax vector conversions to references (PR 93014)
b8c9cc5100a8ba3aa56a6ffdd58d370cbb0134a4 [C++] Make same_type_p return false for gnu_vector_type_p differences (PR 92789)
cd8aa0d1a5e9547cf3d47ab3bd53f63ec3920b36 Add missing target check for fully-masked fold-left reductions
4bbd661e9937d46cc66182423f1946761a4f31c9 Check for a supported comparison when using EXTRACT_LAST_REDUCTION
f0657516067909d688dc2424a876c1c894cbc182 Unshare DR_STEP before gimplifying it
5d8ccdc9a4d2e339a37df401a940bbc9d8bfec2e undefine OFFSET in testsuite/gcc.dg/vect/tree-vect.h
e3969868d63b2930a0714ca3cb466831fd4be634 Fix SSA update when vectorisation adds a vdef to a read-only loop
dc176c3ccd6a8cd3f809f3c1549ad00674061eb5 Fix EXTRACT_LAST_REDUCTION segfault
46e6341fc824ee10bdd4975a2841f945017609dc re PR target/93089 (Force mprefer-vector-width=512 in 'e' simd clones)
1609beddb1bac416456743dff136b486f54a572c re PR target/93089 (Force mprefer-vector-width=512 in 'e' simd clones)
8a0ae3c130cd1e6beb0087a6967d33d8203f0dce Check mask argument's type when vectorising conditional functions
a0643f028e43aa2a5b09907295ecaadedac2d295 Require equal shift amounts for IFN_DIV_POW2
dfef3500361057392f3c17e1f97883222347c0ef Add support for large prefixed address in adjusting a vector address.
3d53551b8809a2a673530aad9c7b5ccf2c26bbd3 Fix bad code of vector extract of PC-relative address with variable element #.
1b02c8c34c9668d05fa42a9779c0824d9de4d03f Refactor some code for a future change.
c4b30920c7427fc57181d91f17e9998502fe1866 Don't mangle attributes that have a space in their name
ab341f5003f8ad9f5ee30ce566d68d8284a31f00 Add a generic lhd_simulate_enum_decl
dca7e570a58f88596267d57cd32ce11b4681252b RISC-V: Disable use of TLS copy relocs.
a0ab54de0ec3e0d48b2a681f7f78fe14bc4099eb re PR inline-asm/93202 ([RISCV] ICE when using inline asm 'h' operand modifier)
2b5d3dc22c321e1c8928735c47733806a1163827 PR middle-end/93200 - spurious -Wstringop-overflow due to assignment vectorization to multiple members
482b2b43e5101921ad94e51e052a18b353f8a3f5 Add a compatible_vector_types_p target hook
9ecb4221263c5416a73a8afe5ef16a8dce07a72d Fix tree-nrv.c ICE for direct internal functions
160e95dc3d73329d2367fb405ef9f0e12bd2cc7b libstdc++: Fix undefined behaviour in random dist serialization (PR93205)
67723321fb917e94acf5844c2524ca3d9655ff7b [vect] Keep track of DR_OFFSET advance in dr_vec_info rather than data_reference
9c158322b6fdb47666f49c001dc54ea9f5c853e9 [vect] Add missing comment
ac190fcea1bebf87a2c8c3963548a0e5272c42ec Fix gather/scatter check when updating a vector epilogue loop
d29c7f605fc6b531eaf351bf5909e7c551fc6b9e Use get_related_vectype_for_scalar_type for reduction indices
7ca50de02cf12c759f4f8daf60913704782b7d45 hash-table.h: support non-zero empty values in empty_slow (v2)
86c3a7d891f9f175d09d61f5ce163c6dc5ce681f Fix type mismatch in SLPed constructors
711421af001b8f4f044f485c78f1d07ed5201656 PR tree-optimization/93247 - ICE in get_load_store_type
f7dff7699fd70d3b8c3e637818e18c86f93ccfec PR tree-optimization/92429 do not fold when updating epilogue statements
dc9ba9d045d0cfc06207806fd64b06ab3304b196 vect: Fix ICE in vectorizable_comparison PR93292
9c4f0d311810eba3f4faab1295c47eb57e695fcc tree-optimization/93094 pass down VECTORIZED_CALL to versioning
e0a5b313c1a3edfb33a28b8d8fea92e01490ebb3 RISC-V: Disallow regrenme if the TO register never used before for interrupt functions
bd0a3e244d94ad4a5e41f01ebf285f0861cb4a03 riscv: Fix up riscv_rtx_costs for RTL checking (PR target/93333)
0501b74264e93bf9ebf45cf10a624a549dc474f1 RISC-V: Fix rtl checking enabled failure with -msave-restore.
7c46e71d016c86971ac26c6fa38d76482859f296 cfgexpand: Update partition size when merging variables
bf91504dc23f17248df6302f7bad849f3ddedee7 Fix a couple of memory leaks in the C++ frontend
9085381f1931cc3667412c8fff91878184835901 Allow tree-ssa.exp to be run by itself
83b0448980f894b527ed8df588a0ae12510f06d5 Revert "Allow tree-ssa.exp to be run by itself" and move some testcases
1e156d9b214b275dc8b98c0ab5330b788a688f0f internal/cpu: don't define CacheLinePadSize for riscv64
1442bc31da61a7f6c7d7c526e0449cfd9a917cd5 tree-optimization/93397 delay converted reduction chain adjustment
6cedf5d8e23c862db147e71d5767ca57e6b4f433 predcom: Fix invalid store-store commoning [PR93434]
1ee3b380dfb479b335f3b50039ce26abcbffe59a forwprop: Tweak choice of VEC_PERM_EXPR filler [PR92822]
1e26ff7391c54c6d30760aea427b6bc2bdb46124 vect: Pattern-matched calls in reduction chains
148018bc3fe7ce47d005a1c5f7b6dd044024a4af tree-optimization/93428 - avoid load permutation vector clobbering
bba18325a1021ef8690334e349c242cde23ce92a dump CTORs properly wrapped with _Literal with -gimple
5910b14503dd82772dfeca5336a0176f9b1d260a testsuite: Fix up pr91838.C test [PR91838]
19e43cbce353b63a05c3b7c39d83a2e32c9f911f Add some gcc_asserts for vector extract processing.
e7f3e075282bda5c5df03e01932cf8d8e9b55cfc Adjust how variable vector extraction is done.
fb47dc28d2d38f56af65e9f244af8870bd568b0b Rewrite convulated code to avoid adding r0.
e181ffc92a355d1854a413f27354e519f93e126a Optimize vec_extract of vectors in memory with a PC-relative address.
79530f94e9c53153c4fae3b50a8c938f89db0c32 syscall: fix riscv64 GNU/Linux build
fc98d038618b792c413212759057b2125507d3ef tree-optimization/92819 restrict new vector CTOR canonicalization
9847df2c9573f1e4b948b5a7272c6aadf8e01c22 testsuite/92177 fix for SLP build changes
d10cddeaad2a315c114063b7c1ff11c6a356ab65 Fix PR 93568 (thinko)
5a8ad97b6e4823d4ded00a3ce8d80e4bf93368d4 c++: Mark __builtin_convertvector operand as read [PR93557]
a66219dce7fcba068a0998dd926e2ffc6857f149 Fix PR 93569.
c7c09af8ef0fe6671c7733d4d67bb73ecf10fc1b c++: Handle CONSTRUCTORs without indexes in find_array_ctor_elt [PR93549]
b780f68e025b2cf5631183e199ebf672ea463af6 RISC-V: Improve caller-save code generation.
e87deb37649cfe480217fc83c8d56fe925600f93 analyzer: handle vector types (PR 93350)
55b00d14f4daf671b865550c119dafdeb3139672 libstdc++: Update __cpp_lib_erase_if macro (P1115R3)
be7c145ad52e76a1a0fd201dd96bc92e8d3a275d tree-ssa: Fix ICE in build_vector_type [PR93780]
bfe78b08471fa6daffb8e8e8e70bd5b1d3071ff6 RISC-V: Using fmv.x.w/fmv.w.x rather than fmv.x.s/fmv.s.x
f91aa3e6cb808f8dfc6b45fa135f7583a7549161 vect: Fix offset calculation for -ve strides [PR93767]
b150c838d9dcf2aa9a50bffdc1eb3012200a4d21 testsuite: Require vect_mutiple_sizes for scan-tree-dump in vect-epilogues.c
9069e9484cec2ff981c87c75b226ad738847ca07 RISC-V: Adjust floating point code gen for LTGT compare
81c833b311b16cfd87a947374d5ffbbd48facd03 tree-optimization/93868 copy SLP tree before re-arranging stmts
b6268016bf46dd63227dcbb73d13c30a3b4b9d2a optabs: Don't use scalar conversions for vectors [PR93843]
759bd406a2b900dd323571c3855a64f885e6b3b7 dump load permutations and refcount per SLP node
15fc2e04a592f8bfcc3eafead71d0313566d8372 PPC64, fix documentation for __builtin_crypto_vpmsum* builtin functions.
e840185b31e40466e1575507200e1600e2343454 tree-optimization/93953 - avoid reference into hash-map
46788c65f93c61a06764b284b4656dd9024e88d2 work-around system header namespace pollution
10a32d479861c3a39987d3468f6a400e907499a2 libstdc++: -D_GLIBCXX_DEBUG fixes in the constrained algos tests
c9d92a575c98057d4bdc2058f0df417634cba860 Update comment to reflect optimization.
0ab503d34f2a8c22262ceefea6c882ae2ff75230 explow: Fix ICE caused by plus_constant [PR94002]
8cc59ac591256f8899e137db7633fd7d1a2164ba PR target/93995 ICE in patch_jump_insn, at cfgrtl.c:1290 on riscv64-linux-gnu
22a75da901ba18110638abc497f56fecd11895d2 [PATCH][testuite] Fix pr80481.C after epilogue vectorization
46275300312b44e1388b86a45f1600a5a1722303 re PR tree-optimization/90883 (Generated code is worse if returned struct is unnamed)
120070973425d785734837c06800dba3da4d1ac3 RISC-V: Fix testsuite regression due to recent IRA changes.
191bcd0f30dd37dec773efb0125afdcae9bd90ef Fix mangling ICE [PR94027]
d5114529228f97c2a433fa72ddea3fadeb6465b3 [testsuite] Fix PR94023 to guard case under vect_hw_misalign
cb2c60206f4f2218f84ccde21663b00de068d8c7 [testsuite] Fix PR94019 to check vector char when vect_hw_misalign
5fea87cc7902c7c03c0d3c8cf7784cd99db8315d RISC-V: Fix testsuite regression due to recent IRA changes.
4069adf4bbc90d16b603e0308b48499c36b2b637 c++: Tweak reshape_init_array_1 [PR94124]
43d513af3f2026420312cc709dd729c81862de0c [testsuite] Fix PR93935 to guard case under vect_hw_misalign
700d4cb08c88aec37c13e21e63dd61fd698baabc Fix up duplicated duplicated words mostly in comments
3d42842c07f4143042f3dcc39a050b262bcf1b55 fix CTOR vectorization
1aa22b1916a493ac46453d96e0c78ca47bcaeda3 c-family: Tighten vector handling in type_for_mode [PR94072]
a89349e664ff420f33612d47e486954de5848e49 adjust SLP tree dumping
4dcc4502f316a7320fe72b62c60af12c77e1c96c tree-optimization/94261 - avoid IL adjustments in SLP analysis
f1154b4d3c54e83d493cc66d1a30c410b9b3108a sccvn: Fix buffer overflow in push_partial_def [PR94300]
eeb0c7c07133634eb5e98ba0348392684a763c95 Fix vector-compare-1 regressions on sh4/sh4eb caused by pattern clobbering T reg without expressing that in its RTL.
48817fbd7616f086ac7bb1dd38b862f78762c9b8     Fix vector-compare-1 regressions on sh4/sh4eb caused by pattern clobbering T reg without expressing that in its RTL.
8d689cf43b501a2f5c077389adbb6d2bfa530ca9 Fix PR90332 by extending half size vector mode
75defde9fb56157d5f0279720d48866925b71b19 c++: Replay errors during diagnosis of constraint satisfaction failures
ec919cfcef8d7fcbaab24d0e0d472c65e5329ca6 Fix vextract* masked patterns [PR93069]
3a9db91bee496712656e0f8aecf55f39cffd8413 Fix scan pattern of vect-8.f90 dump.
48e331d63827a0500670d685c0fe7d609e0a807a Define TRY_EMPTY_VM_SPACE for riscv64-linux
1dcffc8ddc48f0b45d3d0d2f763ef5870560eb9a fold-const: Fix division folding with vector operands [PR94412]
e06cde870edc7ec21736145b6857565d4b2f0e85 Library-side tests for parenthesized aggregate init
f14b41d27124601284347a10d496362c8b4b8e1c vect: ICE: in vectorizable_load, at tree-vect-stmts.c:9173 [PR94398]
bd0f22a8d5caea8905f38ff1fafce31c1b7d33ad Fix PR94043 by making vect_live_op generate lc-phi
81ce375d1fdd99f9d93b00f4895eab74c3d8b54a Fix PR94401 by considering reverse overrun
879bc686a0aac4277532fc2aa18704c125fb0c45 doc: RISC-V: Update binutils requirement to 2.30
4441ecedc3d74114683761901075085651928c52 Fix PR94443 with gsi_insert_seq_before [PR94443]
37244b217a7329792f4ec48027f63cf5010b0ea8 c++: Fix constexpr evaluation of self-modifying CONSTRUCTORs [PR94219]
5ff06d762a88077aff0fb637c931c64e6f47f93d libatomic/test: Fix compilation for build sysroot
542f73539db1433303a4dd16bd2cfc5e7e12eda8 update polytypes.c -flax-vector-conversions msg
f52eb4f988992d393c69ee4ab76f236dced80e36 vect: Fix up lowering of TRUNC_MOD_EXPR by negative constant [PR94524]
e7c4084d11b957d925ba586f86db2f346fb3bfe0 [testsuite] Fix PR94079 by respecting vect_hw_misalign [PR94079]
2111d5406a4ec56d6335bde779a995914d0a36d1 sra: Fix sra_modify_expr handling of partial writes (PR 94482)
bd2420f8faaf4bb33310e82f7dd45c5e33476c87 libstdc++: Add comparison operators to sequence containers
77aecf92a2c47af6e8fda93b020f75c7de48b84c vect: Tweak vect_better_loop_vinfo_p handling of variable VFs
85353e24ca90282e1d3620682841f524de20475c forwprop: Fix ICE when building a VEC_PERM_EXPR [PR94683]
0fe9eaaa083b6cc032cbd3ad1286b1dd73ccdf54 libstdc++: Improve tests for __cpp_lib_erase_if macro
413232a55b960c9b207abf14eea4a8dd247c3e90 forwprop: Fix ICE when building an identity constructor [PR94700]
901f5289d9465d4c388ae288f850ad4f29e99a2c vect: Fix comparisons between invariant booleans [PR94727]
bca558de2a24b2a78c6a321d6cec384e07759d77 tree: Fix up get_narrower [PR94724]
f51be2fb8653f81092f8158a0f0527275f86603b Shortcut identity VEC_PERM expansion [PR94710]
018730326d878d98b85b1256ff220e76665ed97e d: Merge upstream dmd 09db0c41e, druntime e68a5ae3.
a0b48358cb1e70e161a87ec5deb7a4b25defba6b libffi/test: Fix compilation for build sysroot
d15edd9dc1df4d5eff664a089e46b22a1f94328b testsuite: Add -Wno-psabi option for ipa-sra-19.c on AIX.
5328710be314dee43da8027dbff547d48b85e35e forwprop: Fix ICE when building an identity constructor [PR94784]
e62a820d686d1fa97a9eefdc65ca07d8f96ac9f4 vect: Fix COND_EXPRs involving variant booleans [PR94727]
162c40a4c127cc55d701bb8760e17708d0ca2fe0 libstdc++: Fix regression in std::_Construct (PR 94831)
691eeb65a01dab3084b6ce381737adf097bd2e65 diagnostics: Add %{...%} pretty-format support for URLs and use it in -Wpsabi diagnostics
e33a1eae25b8a8744db2fea72e739d64799ca61f --with-{documentation,changes}-root-url tweaks
3af3bec2e4d344bd54a134d8b2263f44d788c3d8 internal-fn: Avoid dropping the lhs of some calls [PR94941]
308bc496884706af4b3077171cbac684c7a6f7c6 add vec_info * parameters where needed
144aee70b80de50f96a97ee64edd2f1c237c4906 match.pd: Canonicalize (x + (x << cst)) into (x * cst2) [PR94800]
3fbf43b9bc060e2904abe64e870868b9a4bfce13 testsuite/92177 - adjust expected patterns for gcc.dg/vect/bb-slp-22.c
fae545fb033970348210c52597a246445efe4160 rewrite hybrid SLP detection
d2148424165849ac9fe413b7a8d7cd198959bebf Merge dg-options and dg-additional-options if len <= 120 chars.
b776bdca9322977cbb8aced2fe24ecd317a6f16b c-attribs.c: Fix warning about use of uninitialized variable nunits
b4ace720e004f736f1ee46b374c12f9826aad630 riscv: Fix up riscv_atomic_assign_expand_fenv [PR94950]
380a681518c3b387476be1064097f24b0847726d tree-optimization/94965 - fix typo in vec_info * passing
4e849a74a8512cb313831a5929501ac2a735b7e1 Prepare removal of SLP_INSTANCE_GROUP_SIZE
72a54e5e8157508c87594d1a6b53de90b76524ce libstdc++ std::fill overload for std::vector<bool>::iterator
eb72dc663e9070b281be83a80f6f838a3a878822 extend DECL_GIMPLE_REG_P to all types
f8a4141bae53f9125d374e5873dcda3f75392f1f Fix various dg directives.
3807f286eff75cb0e4af924c3ee9e02add23e12e Check alignment for no peeling gaps handling
bc484e250990393e887f7239157cc85ce6fadcce move permutation validity check
ad00a297ec4236b327430c171dfbe7587901ffd7 Small housekeeping work in gigi
d8bd9d32e8b3e7c2a1bb6fc920efe6691fb5e8b6 tree-pretty-print: Handle boolean types
d17a896da1e898928d337596d029f0ece0039d55 tree: Add vector_element_bits(_tree) [PR94980 1/3]
14605b6bd8c37fffd8065c5c3fe6b1b9d7b2a294 tree-vect-generic: Tweak build_replicated_const [PR94980 2/3]
4c0283b9ad75b128b79c507d78d678123fe9f471 tree-vect-generic: Fix bitfield widths [PR94980 3/3]
de6320a81695800de0f0f5fc3e4c6487a52cd430 RISC-V: Add shorten_memrefs pass.
adce62f53d8ad00e8110a6a2de7962d7a850de16 RISC-V: Make unique SECCAT_SRODATA names start with .srodata (not .sdata2)
f6e1a4cd83190746b6544917f7526fa480ca5f18 Add missing unit dependence vector in data dependence analysis
ab5934a8fe1dc70030fd73703c0fb6c68e96b086 Remove SLP_INSTANCE_GROUP_SIZE
78db0e093e69f360ac1ef871ca08895a4d2bec06 add vectype parameter to add_stmt_cost hook
584a3c080bbd6e64131fa53771c7424bcf9d21fa tree-optimization/92260 - improve fix
cfaf0edbb123958e84d296354152294f167db9f3 fixup BB vectorization constant generation place
24f68831d25bad739a6fe167a58b5b4c0c3cbf9a pr94833, fix vec_first_match_index for nulls
a4b48fc47c3406b6f41be093c4615879b7006710 cost invariant nodes from vect_slp_analyze_node_operations SLP walk
ca1a9763a1f635d2687ebd5009dd61d4fd0ab5fb RISC-V: Update march parser
f908b69cfd71b85a602424e9fea882108e02cb8a RISC-V: Handle implied extension for -march parser.
92ea8e1bccc6a703407570471f6323bfa554af99 TESTSUITE: Fix tests for 16-bit targets
dfa4fcdba374ed44d4aa1a22b2738f3f5c5b37af Fix alignment for local variable [PR90811]
b2f26af32b5b031fce761aa090de9476a53e6e5a tree-optimization/95219 - improve IV selection for induction
f8fb2ea2b17d38518a9ef9c8774bf4adc726e508 add ctor/dtor to slp_tree
79f0451c67e8ed564b86a38581d5f3d57c5074d8 enfoce SLP_TREE_VECTYPE for invariants
e740f3d73144abbca1ad98a04825c6bd63314a0b Add missing vector truncmn2 expanders [PR92658]
94c0409717bf8bf783963c1d50bb8f4a4732dce7 Add missing expander for vector float_extend and float_truncate.
d31694544d2d805151899ab0a0bc654767035ad6 tree-optimization/95297 - handle scalar shift arg for SLP invariant vectype
c0e27f72358794692e367363940c6383e9ad1e45 tree-optimization/95271 - fix bswap vectorization invariant SLP type
dc0c0196340f7ac58b10d0042d7cea776d6f7864 tree-optimization/95309 - fix invariant SLP node costing
9d0dc47de6ed9609fe7445ea0941a6a822c80f88 Fix non-comforming expander for floatv2div2sf2,floatunsv2div2sf2,fix_truncv2sfv2di,fixuns_truncv2sfv2di.
1d72079ba3a370d6751953312f0de76d1a1c555d tree-optimization/95327 - fix another vectorizable_shift const SLP op
f61f9b28793d94060ce858e5f8a080db91785779 Add debug (slp_tree) and dump infrastructure for this
a5d8d86e8a72736bfd8a2ce8aa427dec896a442e tree-optimization/95335 - fix SLP nodes dropped to invariant
764ef40ba185ef9245a209ba9260d1e50bec6934 tree-optimization/95356 - fix vectorizable_shift vector types
fe7ebef7fe4f9acb79658ed9db0749b07efc3105 Add support for __builtin_bswap128
07d77cc23953335c3539e2a86fc4a052d9845524 testsuite/95363 - fix gcc.dg/vect/bb-slp-pr95271.c for ilp32
09df85393ce5501a28359d159670fd05c4d70abf tree-optimization/95273 - more vectorizable_shift massaging
b0aae85bd689cf581ac85d02a7e84eae0015dbe5 make vect_finish_stmt_generation work w/o stmt_vec_info
e31cd607e999ca6ab47b7e65a7045b1594e4fba4 Code generate externals/invariants during the SLP graph walk
00cd57389767b9a81125f999d33d509cba0ebaaf remove obsolete code from SLP invariant costing
07852a81f58532c63a57631d7c3757fc6bcea17d tree-optimization/95393 - fold MIN/MAX_EXPR generated by phiopt
233ecb5e2c5a769429279afbbf7d275cb3940cde tree-optimization/95403 - guard vect_init_vector_1 against NULL stmt_info
ddf90b72d2a723decc487db6d3131846b9a618de tree-optimization/95356 - more vectorizable_shift massaging
c735929a2503a7d03ac4739bba5b25336bf954c3 tree-optimization/95272 - add SLP_TREE_REPRESENTATIVE
33e23881aae0549572cc23a2520c5094a2ffede9 Simplify tree streaming.
d5cdcd5cf2b2920b44836005baceb59d046b6e5a RISC-V: Optimize si to di zero-extend followed by left shift.
ff7da2b5d621d0aaf4a467344d0621eefd4aa78f Cleanup global decl stream reference streaming, part 1
2b11374cb8d864dff3792e7c84188ba7e8f136e7 testsuite: Disable colorization for ubsan test
4b490c1ec51c276069c29f23406164803587bd06 [Ada] Bump copyright year
eca833b81289438ec5ae3ed4c77ffb49cfb65f34 libstdc++: Make debug containers prefer copy ctor to base ctor (PR 90102)
4013baf99c38f7bca06a51f8301e8fb195ccfa33 RISC-V: Make __divdi3 handle div by zero same as hardware.
f05c84ac139ccd5398542369aad2b5ff3059ced4 simplify visited flag unsetting in SLP scalar cost computation
779ae320bfadc5d867ecaeddf394838d546b57b9 tree-optimization/95495 - use SLP_TREE_REPRESENTATIVE in assertion
887c45fb5b047171e82710baa51108d5c210eb42 tree-optimization/95487 - use a truth type for scatter masks
a3a70bf6690e310fb1d4afa4b3dd1b19ddd0e2f4 Simplify SLP code wrt SLP_TREE_DEF_TYPE
a0dae768c6f78eba6997930065b55184202d87ba Add explicit SLP_TREE_LANES
b15369e2538086c95250ac57c56a4c2590f922f4 add vect_get_slp_vect_def
9758d196f57950ea89baa5cdf6ebd7125b5056e0 tree-optimization/95539 - fix SLP_TREE_REPRESENTATIVE vs. dr_info
ae9293fb8e1895006ce33069eaabdecfe65c46a2 [Ada] Silence spurious warning on instances of formal vectors
8be374e02761c9d63d2753d71e4bd4874a1577b1 forwprop: Ignore scalar mode vectors in simplify_vector_constructor [PR95528]
ac22e651efe0da924925ac33a31e5c8d73e11fef Remove dead code
ec34277611416aacdfdf3b8469b8e6ed43f623e6 Remove dead code
b05d5563f4be13b4a0d0951375a82adf483973c0 Introduce STMT_VINFO_VEC_STMTS
f25161bdcc2b098a4678a42bb2c581ac47625b17 Make {SLP_TREE,STMT_VINFO}_VEC_STMTS a vector of gimple *
36e95a9e539a08275a0a6ef542a7fae5baa5710f tree-optimization/95576 - fix compare-debug issue with SLP vectorization
371cc683371bedb0e53ebcee0c0e89604a1e74b1 avoid stmt-info allocation for debug stmts
d0e0c1300f9f08608873df5571e14a61308dd0c0 RISC-V: Describe correct USEs for gpr_save pattern [PR95252]
dcf41a4e6033213f5e5f80da23080df961d83996 RISC-V: Unify the output asm pattern between gpr_save and gpr_restore pattern.
042f4082979aa22e08c008ed4c5b4bab3915a9c2 vect: Rename can_fully_mask_p to can_use_partial_vectors_p
b3372425ecf3e225d7a2b3c73e061e11498b6f74 vect: Rename fully_masked_p to using_partial_vectors_p
37478789dc446a28ffc642ee121e8c3959e5fe47 vect: Rename things related to rgroup_masks
04f0546e3e468e67dcd8cd20265796887805de3e vect: Factor out and rename some functions/macros
135a8ad3a59972ea64b1244b0e221cdded9a6ec6 fix vectorizable_condition ICE with EXTRACT_LAST_REDUCTION
d30846a02eb9ea43b61311e74fbf05692ffefba2 vect: Fix an ICE in vect_loop_versioning [PR95570]
4544793ef618484b2cc753a4635ab79b361f8df8 testcase for shared DR alignment
82a3008e56c620008b4575a97e459e2769df54db RISC-V: Suppress warning for signed and unsigned integer comparison.
8df82de27b5f16d5089b135d718e9ed15557ae8d vect: Use LOOP_VINFO_DATAREFS and LOOP_VINFO_DDRS consistently
47ad09cb086715182eff01ef3da2fb7d79b0a396 internal/syscall/unix: use getrandom_linux_generic.go on riscv
beaf12b49ae030505194cdcac18b5c8533a43921 RISC-V: Fix ICE on riscv_gpr_save_operation_p [PR95683]
668ef28fbb44c1e51d9c5a35b421903c98d87b03 c++: Clean up previous change [PR41437]
12df77ab6df4b91d4770240bcc4ab443e4bb18b9 OpenACC/Fortran: permit 'routine' inside PURE
502d63b6d6141597bb18fd23c87736a1b384cf8f Lower VEC_COND_EXPR into internal functions.
d0909f5858ad81e6d8b73fa6193be19cb5e6ed7b tree-optimization/95717 - fix SSA update for vectorizer epilogue
8a9e230f41eb406380ab0d9c2b73031133d54259 Use SLP_TREE_VECTYPE consistently
4a31a8add56d49867c187d90b3a89e97634543c2 vect: CSE for bump and offset in strided load/store operations.
632183ddcc8f3aead8b4fc63c4ab59a42ef9ad00 libstdc++: Avoid stack overflow in std::vector (PR 94540)
d11c9841d54ed74978f8d0e0f352631f90504dd5 Add missing check for gassign.
da2b7c7f0a136b4d00520a08d4c443fc2e3a467d remove SLP_TREE_TWO_OPERATORS, add SLP permutation node
9a875db43cd4210843c480c8df26a1d6624d057d forwprop: simplify_vector_constructor follow-up fix [PR95713]
eccc3d432669ba272229d49f015cb986df21eb0a middle-end/95739 - fix vector condition IFN expansion
72cb486456a39524c6f822327ba8654b0221ff4c vectorizer: add _bb_vec_info::region_stmts and reverse_region_stmts
e54353a72a0fd780a2f233a057f3f8121b476192 vect: Use vect_relevant_for_alignment_p consistently
f8f5715606a4a455327874847ccc91f4617bb4de tree-optimization/95761 - fix vector insertion place compute
6d8b2ee568bd17a398781d86aab140b8121aad30 Handle SLP_TREE_LANE_PERMUTATION in scalar costing
33d9794b7277a64543914bfbbfd567505e72da6c RISC-V: Fix compilation failed for frflags builtin in C++ mode
f4670347f10d36816e7da08796f96f087094ba58 RISC-V: Normalize arch string in driver time
cf07eea8429c923b7eb884ffc1b267c80a0a839c tree-optimization/95770 - fix SLP vectorized stmt placement compute
d63fbcf80081d6fc6b746667fcacc8eb6e34f306 Fix memory corruption with vector and variant record
d32708e796504eaeaad7d19990909204d74f9ba3 tree-optimization/95856 fix vect_stmt_dominates_stmt_p at BB region boundary
6924b5e6bd3c89e229c52eafb1353bcbe17ab405 emit SLP vectorized loads earlier
c78907d514d65483c7ddfb4cb1f5c57f23da73d9 tree-optimization/95866 - avoid vectorizing uniform SLP subgraphs
a8d8caca0cbfde0317ca96bfea75a7f047152dad VEC_COND_EXPR: clean up first argument
86ce59b4f05d8f68ec4d9a14a7732acb370412db tree-optimization/95866 - avoid using scalar ops for vectorized shift
d2adb79eac663874593a28387db593fb4bb2995f Always use SLP vector defs to determine insertion place
628b78f9794a2eefcbc578011806bfa8e09b9ef7 tree-optimization/95839 - allow CTOR vectorization without loads
5b959c22bc0158faa359a5899bf46e815dc65290 tree-optimization/95897 - fix fold-left SLP reduction insert place
0801f419440c14f6772b28f763ad7d40f7f7a580 c++: Change the default dialect to C++17.
ef8d1da1b585e0de4b2a0e7721fc13974c00134e IFN: Fix mask_{load,store} optab support macros
e712ef9eee7f9dea4cc0b8df40d9eae9adb15f1e Use gsi_bb instead of iterator->bb.
008842d741e5a88b8f46c692cf09e83d1f51252c do not include <utility> from tree-vectorizer.h
9a4a52e359ba16a2516a735dca838af512b19336 tree-optimization/95916 - treat scalar ops explicitely
1aa696678e45e63f8d59479d593f80f6f0db6b9d testsuite: remove SPE tests.
f58cc0132df4ff6e7f7c2b13324a9fd807af12d7 testsuite: Remove restrictions on VSX tests.
34c8c2139f2339c3151d1c5e8e4a06178d8e757b testsuite: p8vector-int128 require int128 not lp64.
83c25f27c442ce567829491fc1b4703f51b9bea6 RISC-V: Preserve arch version info during normalizing arch string
7b3adfa7bb47e4ebde91634caa5a7e13175558f1 tree-optimization/95839 - teach SLP vectorization about vector inputs
cfdc729d3c64535ae95e068ff33daa27544e95b5 testsuite: Restore lp64 for some gcc.target/powerpc testcases.
a4b531b21339af47c4bdd69384e4a0b5289ffc64 RISC-V: Handle multi-letter extension for multilib-generator
224682ffa19a6817e4d0bde59200169c3413b532 testsuite: Ignore line no. for BB vectorization message
5c9669a0e6cbf477a03024522943197bdb2682d4 vect: Fix an ICE in exact_div [PR95961]
d5d9f7834ab809841c4ccc90bca74808b4bcaf8d tree-optimization/96022 - fix ICE with vectorized shift
1ac9258cca8030745d3c0b8f63186f0adf0ebc27 VEC_COND_EXPR: do not expand comparisons feeding it
105ecbea5f402713130fef4d41bb000e2d23493b tree-optimization/96028 - fix bogus externalizing of SLP node
26b538cd81b9692eaf519fa1743ca8c282048793 nvptx: Fix ICE in nvptx_vector_alignment on gcc.dg/attr-vector_size.c
9e5508c2d006f2d4f8670e6c3fed770ac1c85e64 refactor SLP constant insertion and provde entry insert helper
9bc2c2347d5d782c7362efe180ab002759e296c8 fix scalar BB vectorization costing
59cc32acc8dde3b8719b9b4f90d33e8c3e3f17bb tree-optimization/96037 - fix uninitialized use of slp_op
dccbf1e2a6e544f71b4a5795f0c79015db019fc3 tree-optimization/96075 - fix bogus misalignment calculation
f75211822f8d84bb706421d3692e6c1cdbdfc3a8 fix detection of negative step DR groups
d496134a6b1ef1314c18bd316d8c1900158beae9 IFN/optabs: Support vector load/store with length
30fdaead5b7880c4e9f140618e26ad1c545642d5 compute and check alignment info during analysis
4c0d1322033ce979532425d336530b217f6b5fd3 RISC-V: Disable remove unneeded save-restore call optimization if there are any arguments on stack.
1073b500e5d33af8b75567108a8c04fe2598df2b RISC-V: Implement __builtin_thread_pointer
23fb9e7c1c403a256b158fdfc97f7f32f636d3d0 vect/testsuite: Adjust dumping for fully masking decision
2a39c42a42cdea4a8962b9e140b88e0051894f38 vect: Enhance condition check to use partial vectors
a1e25d0008791118dd58eaddff5f4c3691f8750e remove premature vect_verify_datarefs_alignment
9ddea9306251b7d4e4fd1d67a5941ef7448b2e66 fixup BIT_FIELD_REF detection in SLP discovery
08a94a95d10f311d2a83e6f4c076babd8afd6a3e vect: Use adjusted niters by considering peeling prologue
c19f95fb1b8f15090eb1d1682e86de425fbd3c78 RISC-V: Fix regular expression in target-specific test
c4facd483de2d5b6b4d20e6ad74c85b9f1eba41a tree-optimization/96163 - fix placement issue with SLP and vectors
7efc03fd2cb69fa0f790d32627a3e8131724e7e1 __builtin_shuffle sometimes should produce zip1 rather than TBL (PR82199)
c9c87e6f9c795bb36e4570a07501fc182eaad035 vector creation from two parts of two vectors produces TBL rather than ins (PR 93720)
9fb832ce382d649b7687426e6bc4e5d3715cb78a vect: Support length-based partial vectors approach
138b1d4f58af17986e856e665ffbd561c2c8740e vect: Fix an ICE in vectorizable_simd_clone_call
c850a642e1dfd3a15335d86976015c4a5064b5df testsuite: Add signal checking for signal related testcase in analyzer.
cd91a084877dabcc53aec57ab70ca4fc32f3d985 Generation of adjusted ldp/stp for vector types
2ca1b6d009b194286c3ec91f9c51cc6b0a475458 PR target/96260 - KASAN should work even back-end not porting anything.
ead2be56f0e1d60ffcc519efb33c1ca7b78c23ba ivopts: Handle vector with length IFNs
f3772283350336ad3dc7d36ffc475931ae47ba02 gcc.dg/tree-ssa/vector-4.c: Adjust for mmix.
55c9695cbe91c406805ac0cd342949f32f13b779 Do not expand vector comparison with VEC_COND_EXPR.
0ff959e0a2214fa553ac2d06ed66ede62602fc9a vect: Refactor peel_iters_{pro,epi}logue cost modeling
f1660ceb0d3b0076555058087307f88b80619a6f vect: Fix infinite loop while determining peeling amount
883eec6653b4dd89f7ed0cdad2b0b1010e045e12 more SCEV cache clearing
8240f2f498c38437c213ae1186a5420316413af5 nvptx: Provide vec_set<mode> and vec_extract<vmode><mode> patterns
4c27c6584d0c15926f57ac40f931e238cf0b3110 libstdc++: Make testsuite usable with -fno-exceptions
c931e8d5a96463427040b0d11f9c4352ac22b2b0 RISC-V: Add support for TLS stack protector canary access
8bd062e8ad44e70be04108232e1ef597fc3b3e3e Do not allocate huge array in output_in_order.
c89366b12ff4f36253bae125b794cbe687f7e40b vect: Don't consider branch costs if no peeled iterations
6f00ccbad3d72a39d9e2bc0d500dbd62d1abc60f libstdc++: Fix and improve std::vector<bool> implementation.
9fa4023c7aa0ab126b00fe7e640ed9858b249c77 RISC-V/libgcc: Reduce the size of RV64 millicode by 6 bytes
7d599ad27b9bcf5165f87710f1abc64bbabd06ae c: Fix bogus vector initialisation error [PR96377]
5e97638b0adfb822d3b156c07da27d41091ce137 doc: fix a typo in tm.texi
95f5a3258dd8a9584f2b10304f79441ef2d4c64c veclower: Don't ICE on .VEC_CONVERT calls with no lhs [PR96426]
344f09a756ebd50510cc1eb3db111fd61c527702 [nvptx] Handle V2DI/V2SI mode in nvptx_gen_shuffle
6aec53ee4f75a64cc9c35577e8d785ba2b692270 refactor LIM a bit
229752afe3156a3990dacaedb94c76846cebf132 VEC_COND_EXPR optimizations
ea858d09571f3f6dcce92d8bfaf077f9d44c6ad6 vect: Skip epilogue loops for dbgcnt check [PR96451]
85245bda63ab4cdad0a7cb0f94e06ad4b9a121d2 ipa-fnsummary: Include <vector> the proper way
a1ee6d507b0c26466be519d177f5a08b22f63647 Disable some VEC_COND_EXPR transformations after vector lowering
99e4891ed552aca4ca147671701edd0b31015f66 Using UNSPEC for vector compare to mask register.
82c4b78dbef6f03838e3040688c934360a09513f Replace std::vector<> usage in ipa-fnsummary.c with GCC's vec<>.
c2fb0a1a2e7a0fb15cf3cf876f621902ccd273f0 libstdc++: Make self-move well-defined for containers [PR 85828]
1b0be822208349b2795381deace2352e998c1ad0 analyzer: fix ICE on unhandled tree codes in gassign [PR96640]
1bc4e811aa7249ec972ee7ea5b9bb23e8a0cd69e Adjust testcase.
fc02b568e2cd3f6a28d4b7c1063bbf8842c89aad analyzer: fix ICE on folding vector 0 [PR96705]
2f5951bd95e334d611f4be7bbe1a136c580f9c20 analyzer: fix ICE on vector comparisons [PR96713]
cdb2e365fc0dba2ee052827e5ca65234ca82d605 SLP: support entire BB.
9f2f79df19fbfaa1c4be313c2f2b5ce04646433e gimple-fold: Don't optimize wierdo floating point value reads [PR95450]
24f2764521d8f27760f03f626a4f20f4c82b7c73 libstdc++: Remove tests for self-move debug assertions
55290635d10ea3d18b0a45aa2e6f59405b8c1f54 Adjust testcase.
71b6257e3a90995e1c1d3d2716a0eec5eef243db tree-optimization/96783 - fix vectorization of negative step SLP
2130efe6ac7beba72d289e3dd145daa10aeaed54 tree-optimization/96698 - fix ICE when vectorizing nested cycles
6b3034eaba83935d9f6dfb20d2efbdb34b5b00bf lra: Canonicalize mult to shift in address reloads
cb3874dcf82bc80c2552ef62f57cf08c28fc686a vec: add exact argument for various grow functions.
d0939f42dd84ca03212caf0b6937cf201a16a44f testsuite: Update some vect cases for partial vectors
0106300f6c3f7bae5eb1c46dbd45aa07c94e1b15 varasm: Optimize memory broadcast for constant vector under AVX512 [PR54201]
1aa71af09350b9ff4d2fad88a440b682545682ec Refine expander vec_unpacku_float_hi_v16si/vec_unpacku_float_lo_v16si
f089569851ca9c8a81400dd8a159f86636ed20ec tree-optimization/96854 - testcase for SLP reduction of two-operator
73a2b8dd17dbc02c0c7e6286e90f17833aa50906 c++: Implement P1009: Array size deduction in new-expressions.
b61eaa25b0812a5996024e0ddb3535dde5a89c88 PR middle-end/90597: gcc_assert ICE in layout_type
a292e31dac72c20cda3478b866ccf6e07dfad1a4 vec: use inexact growth where possible.
f0a3bab43fda3084eaf1bdaac58936757f30ea35 d: __vectors unsupported in hardware should be rejected at compile-time.
8bd5530bfa136663f1fa79e9a1d3932b5adf15bd Adjust testcase.
433734126996b6fc4fc99b594421510f928a7bb9 Optimize memory broadcast for constant vector under AVX512.
b246f5272eb7242a9cefe5b4e7220be9d86ea512 Improve constant folding of vector lowering with vector bools
753b4679bc46f6806cf45d9afc3783c6d3b63589 c++: Fix P0960 in member init list and array [PR92812]
09fa6acd8d96013cf97046b273642fdefeef7559 vec: dead code removal in tree-vect-loop.c
46a58c779af3055a4b10b285a1f4be28abe4351c tree-optimization/96920 - another ICE when vectorizing nested cycles
995bb851ffee659cb86aa24bf36ad5bb5d36da7b Adjust testcase.
095d42feed09f880f835ed74d0aa7b1ad7abd03c code generate live lanes in basic-block vectorization
703bc188f4ae9ce957a30011bbe6d41a03a07ceb Adjust testcase.
931832a5ccd92c7289f4933c42cf007e1a6b737f improve SLP vect dumping
e147bb0faad95ed8699c426484ed3dd026fd3366 vec: Revert "dead code removal in tree-vect-loop.c" and add a comment.
0755f573f0874e152a919c61c62bf8d31aa190f0 libbacktrace: avoid ambiguous binary search
fb51be60c8e7b6978f817f44d5df4759f2faf425 tree-optimization/96978 - fix fallout of BB vectorization of live stmts
783dc66f9ccb0019c3dad2701bb9110286758d70 enable live condition vectorization
db918db2c305adf8ba727a5981a684c19de1510e enable live comparison vectorization
58905f90434ba9a64abac56324131d67c53910ae fix useless unsharing of SLP tree
1690a839cff2e0276017a013419d81d675bbf69d analyzer: generalize sm-malloc to new/delete [PR94355]
47ddf4c7b1d4471cb9534f27844ab5e4279c2168 tree-optimization/96043 - BB vectorization costing improvement
848e74bea1e8031925d3efe2d85b555a3cf8db38 [PATCH][PR96791] disable POImode ld/st for memcpy
563326b5e49fcaace2fcab2ddd4071a5f1cfe709 random vectorizer fixes
a9c960a3bd621fc7a721e3c31c706ba736b384ea tree-optimization/97013 - avoid duplicate 'vectorization is not profitable'
054fc495fac5478a119715d10e1dd76442851bb5 improve BB vectorization dump locations
8d3767c30240c901a493d82d9d20f306b2f0152d tree-optimization/97020 - account SLP cost in loop vect again
40e99ed5f4e59c6d0a8e81cd6544c9b4e7ec2fe7 Fix fma test case [PR97018]
c9de716a59c873859df3b3e1fbb993200fce5a73 Allow more BB vectorization
d876184c095d6ac41e64eaf4e2c78864d2d935c1 make swap argument of vect_get_and_check_slp_defs readonly
d1a31689a736cdfb5e7cfa01f1168e338510e63b rtlanal: fix subreg handling in set_noop_p ()
f02b2077c093922faee3b33ad821b717bea80343 remove STMT_VINFO_NUM_SLP_USES
052204fac580b21c967e57e6285d99a9828b8fac vec: don't select partial vectors when unnecessary
f95bd50b4c1879ca96f0d3f0a60fcebe4afc9aef RISC-V: fix a typo in riscv.h
080ddd8a81ea39e92542fa7d7e2d7d27ee741710 tree-optimization/97098 - fix compile-time hog in SLP live
3ea069da14c5f6276ae26d2109e9ae0765c09199 tree-optimization/97095 - fix typo in vectorizable_live_operation
9c9b88fdcff3520b2c4fb520c5d3b422eaa9a72f tree-optimization/97081 - fix wrong-code with vectorized shift
3d3fe967b0961cb59f5df03ae2a55d83dc4bbd34 testsuite: add another test for the rotate vectorization miscompilation
e6f58fb6196ba16ce070e3722451f040a13f963b tree-optimization/97139 - fix BB SLP live lane extraction
52e5b3fd8ef1d1b3ff86e26bd0aa7266bd9767fd tree-optimization/97173 - extend assert in vectorizable_live_operation
4452a7660b224ff310d246bc7f8c612669c8cd98 vect: Fix epilogue loop handling of partial vectors
bc909324bda71543add2229adfa59d8daff5f0db middle-end/96466 - fix VEC_COND isel/expansion issue
5427bd4d57c0376e51fc7b256e76aa46c43aa8cf test: Adjust case p9-vec-length-full-6.c [PR97075]
10843f8303509fcba880c6c05c08e4b4ccd24f36 tree-optimization/97085 - fold some trivial bool vector ?:
4b9d61f79c0c0185a33048ae6cc72269cf7efa31 add move CTOR to auto_vec, use auto_vec for get_loop_exit_edges
c2ebf4f10de9257baffbe29cd0074893a01cfd83 openmp: Add support for non-rect simd and improve collapsed simd support
d16b5975ca985cbe97698479fc38b6a636886978 middle-end/96814 - fix VECTOR_BOOLEAN_TYPE_P CTOR RTL expansion
d00b1b023ecfc3ddc3fe952c0063dab7529d5f7a powerpc, libcpp: Fix gcc build with clang on power8 [PR97163]
a29bd4f59e9eebf52ac41f7d7a6fa83cf2aae09d openmp: Improve #pragma omp simd vectorization
30784833af015a9a74f5315d54f9dc08e1bbdf94 RISC-V: Define __riscv_cmodel_medany for PIC mode.
b1570930df659ff3ea6691f9ba8b84c8a189d85d move permute optimization to optimize-slp
39a27bb01aa223ce89946f0a4de6b60c4c0b03d2 tree-optimization/97241 - fix ICE in reduction vectorization
aa248b8db9a7594fcc84e52a84d56526d4284ca8 middle-end: Refactor refcnt to use SLP_TREE_REF_COUNT for consistency
97b798d80baf945ea28236eef3fa69f36626b579 [SLP][VECT] Add check to fix 96837
9ff2bcd9df8f189dcc94e3bef33f7f282dcaa780 amend SLP reduction testcases
373b99dc40949efa697326f378e5022a02e0328b Add a testcase for PR target/96827
2c5499b57cf4a68ebc8decce90d3eb1e281c31a9 libgo: add 32-bit RISC-V (RV32) support
36e691d3a62145fda1f4a1b3143d215cc113c10a tree-optimization/97255 - missing vector bool pattern of SRAed bool
04b99da898a9817e72fedb4063589648b7961ac5 tree-optimization/97236 - fix bad use of VMAT_CONTIGUOUS
9d5af1db2d1e7ca4f47f16fc885e1d70fa0229fc ipa: Bundle vectors describing argument values
67ce9099bc953f22e6c9e9ee4c64329fdb08286a ipa: Multiple predicates for loop properties, with frequencies
255aa06d40d7b151d1b26cb690e0545f834b3bea c++: Make spell corrections consistent
83f565ed4f37e550e1d40f7b6cf0b5845f29a9c7 openmp: Improve composite simd vectorization
e089e43365f7f2a90979e2316aea25d44823f5a3 ipa-prop: Fix multiple-target speculation resolution
dae673abd37d400408959497e50fe1f3fbef5533 tree-optimization/97307 - improve sinking of loads
532e882f8872b1b4437e3a0fa8c61d2af2d999d4 adjust BB vectorization dump scanning
181702ef8ab76afbf5d2cd4d7bc0cef613397d6e SLP vectorize multiple BBs at once
36500ed18aa89c31b56123aeae43f18fac950674 fix ICE with BB vectorization of PHIs
a0e6e49ddedb05e2e112e5c19a2228efd016e871 random memory leak fixes
5d708c6315e0fc57992cda7b466a5a9877ced4e3 tree-optimization/97347 - fix another SLP constant insertion issue
16760e5bf7028dfa36b39af305d05cdf2c15b3a9 tree-optimization/97334 - improve BB SLP discovery
8c26cfc6af38a3c4d16f510ee8ac3ae11ea2bbbd Fixup gcc.dg/vect/pr65947-3.c when masked loads are available
6d42d1e223deaf866062e11bd51ee99441ad8871 More consistently split SLP groups
ab87b0add6a7c3464ee9067dd99e037e79f81984 IPA: prevent an UBSAN error
91d80cf4bd2827dd9c40fe6a7c719c909d79083d vect: Fix an ICE in vect_recog_mask_conversion_pattern
a7825bb6556da6fa991b7ea1b72e3851026dc2cd fix SLP subgraph detection wrt fully shared lanes
bd28b730cf35dbeeb2b26aa17397163bbbb0ca9e SLP: fix SVE issues
126ed72b9f48f8530b194532cc281fb761690435 optimize permutes in SLP, remove vect_attempt_slp_rearrange_stmts
a673744dee7a80e6525fb0da87d053c8ccab6275 Remove STMT_VINFO_SAME_ALIGN_REFS
78fbe731a8822e819c4ca0e6d6f777c7a2f36bad PR target/96759 - Handle global variable assignment from misaligned structure/PARALLEL return values.
ec5e6467091ee0f8de2f894f0c1669465a8440f1 adjust BB SLP build from scalars heuristics
ea9535e75e9118493879cb76520c85272981ebda More vect_get_and_check_slp_defs refactoring
72eb8335848be77649ac1c5229b8c26352ab8949 RISC-V: Add support for -mcpu option.
28290cb50c7dbf87458befeb3e295b5cb13560b5 tree-optimization/97482 - fix split_constant_offset of nop-conversions
852dce060860d988f4d8007be97b7b38e51f9900 Fix ICE in vectorizable_live_operation
429ad0bb0d3dc77e44f95620341da4938d49168e tree-optimization/97428 - split SLP groups for loop vectorization
f54147fcfd885598d57783f98b0786e9e200a5dc [Ada] Use new Max_Integer_Size attribute in system.ads files
540d5f4f0215e1cdd2d4a2c89c65e46033298be0 Refactor vect_get_and_check_slp_defs some more
4a70aa7a627c0b918ce1da75c0dbe088539e420f RISC-V: Handle implied extension in multilib-generator
6c6e0cafa38cee8309f37b846cb7db813a472a54 Adjust BB vectorization SLP build heuristics
cd6cd6aed195b4ec7d652e8b41d60b60e174304e PR libfortran/97063 - Wrong result for vector (step size is negative) * matrix
95f27849a580ac834d4f51a0642da9671f0a9dee tree-optimization/97466 - remove spurious assert
361c378dda1f17435ecc364ab246978784df2482 tree-optimization/97486 - avoid edge insertion in SLP vectorizing
11b8cca0831ee37cc534ff27cd8d32ac5aace6f7 IPA: fix one more UBSAN error
f000b7c436e62c52798187d8150216569eef17b5 testsuite: Enable and adjust powerpc vec-extract and vsu testcases.
a335f6f4ee5cb4f7dbfef52e17bf854ae42c1216 tree-optimization/97496 - avoid SLP externs in patterns
06729598b0dc10dbe60545f21c2214ad66a5a3db Fix latch PHI arg lookup in vectorizable_reduction for double-reduction
73764bae1d416524fc06e0f01f81c7274ec0937b [Ada] Raise Capacity_Error on formal vector insertion
d94093013877cde3dce5c243099ad54668849400 tree-optimization/97500 - avoid SLP backedges for inductions
7026bb9504eb0f95e114f832cd6dd14302376861 Refactor implementation of *_bcst{_1,_2,_3} patterns.
df7f0a3a21418f8e06bb4710f09587e54225da93 RISC-V: Extend syntax for the multilib-generator
f3cf5174b19a89aeed5aa2ba82a373ded35a4a96 Fix PR97502
b960a9c83a93b58a84a7a370002990810675ac5d middle-end/97521 - fix VECTOR_CST expansion
655f7f0fb7c9aa2fe7f6660b8ae2c06c01a1413d Refactor vect_analyze_slp_instance a bit
3d423c6f6a69d87ad52ba3af75f3debd8a8b8810 c++: Handle RANGE_EXPR index in init_subob_ctx [PR97328]
67b8991b543403dc4a0c0954546c4339d139edeb vect: Remove redundant LOOP_VINFO_FULLY_MASKED_P
7cda498920dbf244e9e06fdb2fc710a118a8c033 Revert "middle-end/97521 - fix VECTOR_CST expansion"
27c14056f4805c9d8cfc655ef2c846be128b02c9 tree-optimization/97539 - reset out-of-loop debug uses before peeling
50f9e1f4d458e36d306b2449c689e45492847f68 middle-end/97554 - avoid overflow in alloc size compute
605c2a393d3a2db86454a70fd7c9467db434060c middle-end/97521 - always use single-bit bools in mask vector types
63b2149fb4b0bd16c44ab9485cfdc37149e97b97 Refactor SLP instance analysis
83220838dd6f7701ca264347c934b12de7703b42 Move SLP nodes to an alloc-pool
e94de06fd6077438539b2d7c18eb8fcb113bd9b6 RISC-V: Refine riscv_parse_arch_string
5af1e827bbb624eb28f80d2c5e0da46185af3708 Avoid uniform lane BB vectorization
4a369d199bf2f34e037030b18d0da923e8a24997 SLP vectorize across PHI nodes
686c1b70c70a8df4f8633c1b8eeb84a1fdaa48b2 Adjust BB vectorization function splitting
4a972479f050bc19ad55f0171523db14295924c2 Fix BB store group splitting group size compute
31643fa3e994749bd2da7b35846f1958f8823b8d [PR97504] riscv needs wraplf for aux_long_long_float too
ac1724ccfdb9056d59fc21500c57c4edc963e653 dump reason for throwing away SLP instance
2acb33103c4cbc6766d8707ad58aa5cc9a804719 Change the way we split stores in BB vectorization
616351b897c834500e685f4ab6ece4d82b506d29 Fix iteration over loads in SLP optimize
b626b00823af9ca9ab619fe13d1e8703a3101dab tree-optimization/97615 - avoid creating externals from patterns
69adcfce1236705584ed83b46ba42d4875948aa3 Fix gcc.dg/vect/bb-slp-5[89].c
6f62d8dd338a43653e1ee195b9b7bf1779e4abeb Ignore ignored operands in vect_get_and_check_slp_defs
f4af2dde57992ae0d60a2077f4f0024327b8e6d5 dump when SLP analysis fails due to shared vectype mismatch
54ef7701a9dec8c923a12d1983f8a051ba88a7b9 value-range: Give up on POLY_INT_CST ranges [PR97457]
122f0db27933e6e34e073c9c4d27a10801652ebd testsuite: Adjust target requirements for sad-vectorize and signbit.
1e1e1edf88a7c40ae4ae0de9e6077179e13ccf6d More BB vectorization tweaks
e4b3d2a4c25c72211aaa8894a62b60900f543689 Consistently pass the vector type for scalar SLP cost compute
6e23549157d671f4f2e61756a0d0924cc59718ab vect: Fix load costs for SLP permutes
2e0216f9c4db8fde09706f57e6a6d80161c0da07 libstdc++: Fix memory issue in ranges::lexicographical_compare testcase
57ec9b687b0c1d83e477b7b7433c11d814489259 Fix some memleaks
5681668765e233735b4c5e6a305e73ae1f80a328 c++: Tolerate empty initial args during normalization [PR97412]
13feb0234b136fbdc1dbfba3a9663fb4e1043f75 libstdc++: Avoid warnings in tests
973574465ca250ed9af5c229a8a3a6b05fde9ca0 Adjust gcc.dg/vect/bb-slp-pr65935.c
c0bfd9672e19caf08e45afeb4277f848488ced2b tree-optimization/97633 - fix SLP scheduling of single-node cycles
63d0da8852553ec42d5256e9c96ee21d26e0c2cd gcc-changelog: Handle situations like '* tree-vect-slp.c (): '
33c0f246f799b7403171e97f31276a8feddd05c9 tree-optimization/97626 - handle SCCs properly in SLP stmt analysis
d10f3e900b0377b4760a090b0f90371bcef01686 Add -fzero-call-used-regs option and zero_call_used_regs function attributes.
d1e5d82af819025df9d9a81e8c591690e299924a libstdc++: Fix some more warnings in test
c1e6691245ca2f1f329549f323f67afe32bcb97a RISC-V: Add configure option: --with-multilib-generator to flexible config multi-lib settings.
4ad70477801548db4d37e8d540a3fd6ebbbcfd48 RISC-V: Check multiletter extension has more than 1 letter
a159081ad4259c42456bd3dc2b637747c373c5a5 tree-optimization/97650 - fix ICE in vect_get_and_check_slp_defs
5b41d673ad96dd2f9a7dec3877d0381320ccadb1 tree-optimization/97558 - avoid SLP analyzing irrelevant stmts
4c198ddff83744f8b7bf24306ed1e6b889c44044 tree-optimization/97558 - compute vectype for SLP nested cycles
e881774d0dda6d5127eb8f0642f6edc16dc0b1e7 Rewrite SLP induction vectorization
f5e18dd9c7dacc9671044fc669bd5c1b26b6bdba pass: Run cleanup passes before SLP [PR96789]
beddd1762ad2bbe84dd776c54489153f83f21e56 [OpenACC] More precise diagnostics for 'gang', 'worker', 'vector' clauses with arguments on 'loop' only allowed in 'kernels' regions
41f7f6178e2d35288273656dc55dae8fcf3edeb5 [Fortran] More precise location information for OpenACC 'gang', 'worker', 'vector' clauses with argument [PR92793]
f53e9d40de7212413b361758d66aafb833173dd9 tree-optimization/97678 - fix SLP induction epilogue vectorization
8414529156e0bca37647c440c71beeca1d04ac86 testsuite/97688 - fix check_vect () with __AVX2__
ac6affba97130bcbffb21bd9f8ca53c7aac89551 tree-optimization/80928 - SLP vectorize nested loop induction
9d1b813d0f7c9a8d80b0aee6eb1418b0afdf0f84 bootstrap/97666 - fix array of bool allocation
abe93733a265f8a8b56dbdd307380f8c83dd3ab5 PR target/96342 Change field "simdlen" into poly_uint64
78f2f08ac8f22a0ad412a2abf5225b5fe3176bcf c++: Refactor clone copying
fab72592d86d11b89a01f0f3c2c9c329d43466c1 [OpenACC] Use proper location to 'inform' of enclosing parent compute construct
8d887367a7a3bc2cf1ca926899567aeeba915e44 bootstrap/97666 - really fix sizeof (bool) issue
092cdbd9198497593fb034971d0f80fc931ab145 Re-instantiate SLP induction IV CSE
3e190757fa332d327bee27495f37beb01155cfab phiopt: Optimize x ? 1024 : 0 to (int) x << 10 [PR97690]
1e9f339d946b8296e3785bec77e03d71b487d689 tree-optimization/97709 - set abnormal flag when vectorizing live lanes
1272573a6b2257a7ed525a81e26862a563fb68a0 add costing to SLP vectorized PHIs
4d76079fdfa3d36ebd95ac8b489519945e8ee88f middle-end: Move load/store-lanes check till late.
e3587a2d8b005d72f882a21864fb132f8a966366 middle-end: Store and use the SLP instance kind when aborting load/store lanes
199988774d74091e467aef695d0d985528360613 middle-end: optimize slp simplify back to back permutes.
403f0dac0cb24184631e175836766a3a1da165a5 Fix SLP vectorization of stores from boolean vectors
9f87fcf3034d0e774c4dee380f9113d1453e0e72 middle-end: guard slp-11b.c testcase on vec_lanes
65e82636bcdb72a878c2e53943e71b15dd9fb22d PR target/96307: Fix KASAN option checking.
56ecdc2f02bfa69021003d7ac267dc65f385902f RISC-V: Mark non-export symbol static and const in riscv-common.c
2210bf6dec4a9868c828af546890805cac353f84 tree-optimization/97733 - fix SLP of reductions with zero relevant
8ebedfcd86aa5e3fc902fb442ce12c9d440c23c8 tree-optimization/97732 - fix init of SLP induction vectorization
7307d8e10727aea8069c0e47e64a7a9b8588a22e tree-optimization/97706 - part one, refactor vect_determine_mask_precision
7144270e2de7ba4954729c75ca389ed3081134ee Move ipa-refs from ggc to heap.
b88fdcc1c3675330031b0cff35ecf14b53616321 refactor SLP analysis
22175d0dc6a89ddd630f19d0f32a2d1ddb046807 tree-optimization/97706 - handle PHIs in pattern recog mask precison
9a34a5cce6b50fc3527e7c7ab356808ed435883c Objective-C/C++ (parsers) : Update @property attribute parsing.
ec735bc7646500570d9d6e45ef335e6d547b1433 tree-optimization/97746 - fix order of mask precision computes
f5761c318a5a973ba2e4e5b09a5213f4e3ad0570 tree-optimization/97753 - fix SLP induction vect
96f315213f337c2d5a9268f2d3e8337bbdb71bfc tree-optimization/97761 - fix SLP live calculation
c5395d88dfa2123ca5155008c8c8339ded98fd32 arc: Improve/add instruction patterns to better use MAC instructions.
2686de5617bfb572343933be2883e8274c9735b5 tree-optimization/97760 - reduction paths with unhandled live stmt
1693746302e4306b43cb66a0afe589137069bd8e tree-optimization/97769 - fix assert in peeling for alignment
e29dd0eb733f4b9ae03e44322c7fbe8b51eff0a4 vect: Allow vconds between different vector sizes
d33bc98f5bc65f2505fcaefb0f9055ec67fe36d2 testsuite: Adjust pr96789.c by disabling loop vect
97976c0757ad3173ac00d1e32e335f3f960b0b9f RISC-V: Enable ifunc if it was supported in the binutils for linux toolchain.
dcf0dde488b81894124a6bb181c98e215d4dfdeb Asan changes for RISC-V.
207de83922bda8707aa33d6a2185e691116377e7 PR target/97682 - Fix to reuse t1 register between call address and epilogue.
d12603b746986554981f5ee220926a36a6cb6baf tree-optimization/97835 - fix step vector construction for SLP induction
d0a206abc6cbf0e992bf82bbb3584686eae05d34 tree-optimization/97838 - fix SLP leaf detection
c84df34aec3bb845b22384c7e85f0449ca00dd99 Delay SLP instance loads gathering
287cc750b0887e86cb309d976b17c7ee95f7ad48 Support variable index vec_set.
903adc062f28b8d7f5ed77ee104b51bf36448a28 testsuite: Extend vector() regexp
e9cea0d6c83929a3f03c73060b422bdc939f6c57 testsuite: Remove XFAIL for variable-length vectors
a880fcc657f0100fb5cfd1a8fd0bb7842eefdfa4 testsuite: XFAIL some SLP reduction tests for VLA SVE
f5647cf49f0ee861eca9d9b5c4b0333ee11e6017 testsuite: XFAIL SLP induction tests for VL vectors
8a1f6529062857523988202bad813304f003e8e1 testsuite: Adjust vect/pr65947-8.c for SVE
b513f5f2cb2a7f604dfa2c424dbccc6a1011b63b testsuite: Adjust vect/bb-slp-subgroups-3.c for VL vectors
324252dc59e7b1874337fccb463dc93cdecfbd82 testsuite: Add a vect_element_align_preferred guard
f6da5ecb058cbdcbf8f8efc2d7dcdf9b7bc3a4fa testsuite: Add a vect_load_lanes guard
fcd513df9aa83f30dbd1c34d13c8a0972702ffa1 PR97693: Specify required vectype in vectorizable_call
6b91b3e9df171970a907638d9b2e0bca1e792975 Add MODE_OPAQUE
6a5bb4705fb75fd3afdde938193c59938cc7bfde RISC-V: Handle implied extension in canonical ordering.
b03be74bad08c382da47e048007a78fa3fb4ef49 RISC-V: Support zicsr and zifencei extension for -march.
4b81528241ca682025d92558ff6aeec91dafdca8 RISC-V: Support version controling for ISA standard extensions
30270bf042049bf6aee6184e0b7688d9ca7b479d tree-optimization/97886 - deal with strange LC PHI nodes
0f545ad9b68445094975455a5657bfc8be2e4912 testsuite: Fix vect/vect-sdiv-pow2-1.c
6d0ffd9a3eaeac5bc71fe00049c9faf37a72b0fa testsuite: Add a vect_partial_vectors_usage_2 guard
6a9cd27ac6721ff378210c2851fb716c73f2a750 testsuite: Add vect_perm3_int guards
9fc9573f9a5e9432e53c7de93985cfbd267f0309 [2/3] [vect] Add widening add, subtract patterns
0b0061f4d83cd8eb181f7114a077237b95a0c144 vect: Add a “very cheap” cost model
ae48b74ca0c0ba33d396a6ebad7a1c0a6dadb1f7 c++: Fix array new with value-initialization [PR97523]
6e820b943bce54002f9343c2e39529d792291388 dump SLP_TREE_REPRESENTATIVE
4405edb496483c5e99adb311cc694b0b063eb358 Deal with (pattern) SLP consumed stmts in hybrid discovery
ad318e3f1d372c4e720979d1eb13bebb8fb852d8 SLP: Have vectorizable_slp_permutation set type on invariants
f8f8909af1b5dab515adae5b93b51f3c731b9929 Make MMA builtins use opaque modes
c84add5c13d292b339e90b154587439e4721a8c5 Re-enable vector pair memcpy/memmove expansion
d4a20f9059070fc42b9effde0d890dcebccc2f84 Update vec-35.c and vect-35-big-array.c
692d3b772755b798cc527a80ca2d02e23bc4e2bf fix hybrid SLP discovery debug stmt issue
ab1d52b5618cdb975b460782cd7b98a017c55615 test: Update some cases for vect_partial_vectors_usage_1
24b553d0f73ffea2551a77c67859ad6fe44110a6 [testsuite] Enable column location checking for 'dg-optimized', 'dg-missed'
fddc7f0080f1f056c4d145451608ebd3e807422a middle-end/97579 - lower VECTOR_BOOLEAN_TYPE_P VEC_COND_EXPRs
45281f120da85e0513cb5daa793112a37157ee70 Free more of CFG
8d87bb8f56db177718bf0f07df462b85a90c1ef3 [Ada] Add support for 128-bit fixed-point types on 64-bit platforms
5c197b83e12b634b65a449d8a7375a18f350708e tree-optimization/98015 - fix VEC_COND_EXPR lowering condition
3a5d8ed231a0329822b7c032ba0834991732d2a0 Fix print_multilib_info when default arguments appear in the option list with '!'
a5ad5d5c478ee7bebf057161bb8715ee7d286875 RISC-V: Always define MULTILIB_DEFAULTS
4bcded23eb87c55a1a3fcd23d5629a0c35aee4ba tree-optimization/98048 - fix vector lowering of ABSU_EXPR
ebbe3f29518854c36574adbd4fa82fd56fa64056 tree-optimization/98064 - fix BB SLP live lane extract wrt LC SSA
76ab0317cfb3201b9b68db9e8a0ced4f4e9f6cd4 RISC-V: Drop some commited accidentally code.
39836f8324d819459cb21198e95b993588c6a2b1 libstdc++: Pretty printers for _Bit_reference and _Bit_iterator
a35d5e93654d4947f116f77ff0ed6ab2672d1df2 guard maybe_set_vectorized_backedge_value calls
05f7a2afe8fac98fb3e70ccd4128e6a2ffd7c817 C++ Module Binding Vector
feb93adf76eda52385a73eb57c5bef7c870a2564 tree-optimization/97630 - fix SLP cycle memory leak
744ca1bf1cc07627f85c2f73a2ced3fb551e1f60 c++:  Fix bootstrap
81d590760c31e11e3a09135f4e182aea232035f2 Add popcount<mode> expander to enable popcount auto vectorization under AVX512BITALG/AVX512POPCNTDQ target.
b20cd0c743b8823d8ac4437bf893ce691fb820e8 RISC-V: Canonicalize --with-arch
704ccefb576dcf30b27a4b9bdacb6e15902f5307 debug: Fix another vector DECL_MODE ICE [PR98100]
df933e307b1950ce12472660dcac1765b8eb431d vec: Simplify use with C++11 range-based 'for'.
dfb21f37fde4f9e11e9b3b6b6ea6dc9d5fbed644 VAX: Rationalize expression and address costs
e552abe2ba27ccec0d7c0d050b4617f2f636dd63 PR target/95294: VAX: Convert backend to MODE_CC representation
1fab57f26ec24ce4e5672a7515c88611eba2483f Re: testsuite: Adjust target requirements for sad-vectorize and signbit
7b4ea2827d2003c8ffc76cd478f8974360cbd78f tree-optimization/98137 - enhance split_constant_offset range handling
cdcbef3c3310a14f2994982b44cb1f8e14c77232 tree-optimization/98117 - fix range set by vectorization on niter IVs
ebdfd1606da6b5aa586b0cd156b69b659235c9c2 tree-optimization/98113 - vectorize a sequence of BIT_INSERT_EXPRs
4aaf33718f09daf1cd2864b3db07faa2e44642ff PR target/98152: Checking python is available before using
e844c04e35ca2fe9ee2f758a720dd37cbe81e7ef tree-optimization/98180 - fix BIT_INSERT_EXPR sequence vectorization
c2c198bfd1e747b761c6b9b13417685bd4378d57 tree-optimization/98191 - fix BIT_INSERT_EXPR sequence vectorization
3a008b1d124bef50bd7ae12106c90c3230eb2d57 testsuite/95900 - fix gcc.dg/vect/bb-slp-pr95866.c target requirement
1746681c3c167adafb7c0a30978dc2ca96144121 tree-optimization/98192 - fix double free in SLP
8d63e3c229f32d441e6ead0cb62923095b54c5f9 RISC-V: Explicitly call python when using multilib generator
154e9b831b6fc7d8493b5b0d56b9c5cdeff968e9 Allow scalar fallback for pattern root stmt
76c09f2af9d8ab9c760d860626f069d12d86f0a9 tree-optimization/98211 - fix bogus vectorization of conversion
f5b902a9af9d1cce6c540c7f71e02e22e45c23ef [VECT] pr97929 fix
a1fb16e5472fded44181dd8938f2ba3cbe9844b6 remove obsolete conversion handling from vectorizable_assignment
79c1b9fb44ce9abd0e2f6642b65684b9721233ee c++: name-lookup cleanups
afc14c8d0a9e7af13698a7eec84226a3cc4b0e67 c++: modularize spelling suggestions
c0979d8f22a97eb231ebf544c512353372bdb25d c++: Name lookup for modules
4f1d8bd5096cc234313b23f64cdac53a94ff75a2 c++: modules & using-decls
fa4a8b6463e0dbc2a072fca835d28ae7a57849d5 tree-optimization/95582 - fix vector pattern with bool conversions
fc7b4248172561a9ee310e2d43d8a485a5c9e108 tree-optimization/98235 - limit SLP discovery
955af69b7376ebd05051c02455d71c90258f5e24 testsuite/98239 - require vect_condition for gcc.dg/vect/bb-slp-69.c
0fc3bf781d15a9fa260395bd72472224f42e3ce1 testsuite/98240 - amend gcc.dg/vect/pr97678.c
4b488a2e695b6868cfb69c65b8e2943ea31c335c testsuite/98242 - amend gcc.dg/vect/bb-slp-subgroups-3.c
755cf781f2eb3a6317af90bf3b12206b0fc54a96 Add missing varasm DECL_P check.
10bbba9145700e2c3b4709c1041c66d8ff85c7f1 middle-end: Refactor and expose some vectorizer helper functions.
3ed472af6bc9f83b7a8ac553b282f659a0bf53f7 middle-end: Support complex Addition
8e56e4d9566ce99707befa88bf4d11c74ec45c10 libstdc++: Fix several _GLIBCXX_DEBUG tests
159b0bd9ce263dfb791eff5133b0ca0207201c84 middle-end: Exclude TOP permute from blend considerations
eece52b53b75767593282d178bae12ceebb33f12 opts: Remove all usages of Report keyword.
cd676dfa57e643a4f7d8445e6ebad0f21cf3fd84 bswap: Handle vector CONSTRUCTORs [PR96239]
cdb1c276560b26a9c3bc837340669962ef1b430a testsuite: Adjust expected instruction count for PPC fold testcases.
68dd664912916c3bce87e95b2ddf12184e0c1b43 [Ada] Remove unused subprograms in validsw
4a7a3110c70da8bad6978a36d9da3836538a0cc3 Update default_estimated_poly_value prototype in targhooks.h
9032d2b2414ed22e53a9980a51b835d3caf83c48 bswap: Fix up a thinko with empty CONSTRUCTORs [PR98378]
1467a5c5ab0dfbae3175b4a326467f939864dadb bootstrap: std:stoul non-portable [PR 98412]
7e63d383b89cd75b7775883d71ed09724b9ee73f c++: Fix build with clang
168be2b3afddd41d4575ed55439231812bc3e7c9 RISC-V: Fix python3 compatibility for multilib-generator
052870c3d1c962a0875c4debc066ccc3d68e7029 arc: Don't use predicated vadd2 instructions in mov patterns.
0411210fddbd3ec27c8dc1183f40f662712a2232 genmodes: Update GET_MODE_MASK when changing NUNITS [PR98214]
9fa5b473b5b8e289b6542adfd5cfaddfb3036048 vect: Fix bogus alignment assumption in alias checks [PR94994]
58a12b0eadac62e691fcf7325ab2bc2c93d46b61 vect: Avoid generating out-of-range shifts [PR98302]
8837f82e4bab1b5405cf034eab9b3e83afc563ad tree-optimization/98291 - allow SLP more vectorization of reductions
0926259f9fc21a7f1e09f45f8aede156ef249585 tree-optimization/98393 - properly init matches when failing SLP
9e79d76a16c56df0f838b9aede69c0a158203f56 tree-optimization/98308 - set vector type for mask of masked load
01be45eccee42d0cc6c900f43e2363186517f7ed vect: Fix missing alias checks for 128-bit SVE [PR98371]
01da03c915f086fb9aa36b809c1a06a9f661533b tree-optimization/98381 - fix live bool vector extract
a7553ad60bebc419d510564b8b9f9e5e03725ff5 store-merging: Handle vector CONSTRUCTORs using bswap [PR96239]
4ddee425b8c427d3cc13c49b26f442313e239572 reassoc: Fix reassociation on 32-bit hosts with > 32767 bbs [PR98514]
26b5062be991cf709c7c628061a40a48e1bca681 tree-optimization/98428 - avoid pre-existing vectors for loop SLP
27aad521570cbc1050ba957c0ee47aed18033dc1 move SLP debug counter
33a63257701c8d94ee375e32ff1837c989d8ded6 tree-optimization/98516 - fix SLP permute opt materialization
e2e2f3f2c9400f4ce0dad941bb6c5aa4b799465b c++: Fix deduction from the type of an NTTP
c9ee9c1e3553247c776f33eb0fe0aadee094a192 add signed_bool_precision attribute for GIMPLE FE use
1b5669752426d225b0088d57d1d2fffba9625032 Adjust testcase for PR 92658
d02a8b63e5aef49ab6973c64a2225236895763a1 bswap: Fix up recent vector CONSTRUCTOR optimization [PR98568]
78595e918ee168f595d16268073a3754c64d67fe gimple-isel: Fall back to using vcond_mask [PR98560]
298e76e6562bb79ed42cb4bc88aca817e6e58417 gimple-isel: Check whether IFN_VCONDEQ is supported [PR98560]
d54029179cbe817eaf9b6899339b0151cff3c00e fix GIMPLE parser for loops
0b7b4710111e0ac42d14ffdd1d71ff9c6751414e RISC-V: Move class riscv_subset_list and riscv_subset_t to riscv-protos.h
e3354b6de7a348386425879847c4f18ef1e82791 RISC-V: Implement new style of architecture extension test macros.
01d92cfd79872e4cffc78bf233bb9b767336beb8 Fix array-quals-1.c for RISC-V
bdcde1504502719504a7a63ab10059e171694dc2 tree-optimization/98544 - more permute optimization fixes
b407f233d7c18534fbfe8f74af7f0232498fb0c4 fix vectorizer memleaks
9febe9e4be7812519258ea3ed4f38bbc1a61624b widening_mul: Pattern recognize also signed multiplication with overflow check [PR95852]
39666d2b8858361b4921fe0ae87bba90a62d9b9a slp: fix is_linear_load_p to prevent multiple answers
bd4298e1927f6c519d5b7829023b1db7e64592e6 slp: handle externals correctly in linear_loads_p
0c18faac3fb407d182dfa82426d1be7cce587926 slp: upgrade complex add to new format and fix memory leaks
300a3ce5c5695eb1a7c0476e9d1b45420a463248 tree-optimization/98221 - fix wrong unpack operation used for big-endian
04bff1bbfc11a974342c0eb0c0d65d902e36e82e tree-optimization/98526 - fix vectorizer reduction cost
84684e0f78c20c51492722a5b95cda778ad77073 tree-optimization/91403 - avoid excessive code-generation
640296c367f97a1b9974bfb60bb02c934d71baf4 make FOR_EACH_IMM_USE_STMT safe for early exits
52a170b1a1818b7521c25e76271638a448b3f630 tree-optimization/98550 - fix BB vect unrolling check
3ddc18251a821fe69d6229abbf83d77284d2340a tree-optimization/92645 - improve SLP with existing vectors
11cbea852b0ae2b0f17a9caeaf6344d689231c2f c++: Fix cp_build_function_call_vec [PR 98626]
e45c41988bfd655b1df7cff8fcf111dc6fb732e3 vect: Account for unused IFN_LOAD_LANES results
2182274f510c180ea92a4f826a0f6cf5f1f55b66 tree-optimization/98674 - improve dependence analysis
aa3d33dccb57621b2ab2029dce79208c0c9392c1 RTEMS: Fix Ada build for riscv
fe70119531395c8105b098bfa915c003c78be038 slp: elide intermediate nodes for complex add and avoid truncate
500600c78408ab4c6450c7eeaea2e3657e305ed2 slp: Support optimizing load distribution
e09173d84dabd186ad2463f47350c1bcabfeab8f slp: support complex multiply and complex multiply conjugate
31fac31800b5671d17c46108013d6fc709370ef3 slp: support complex FMA and complex FMA conjugate
478e571a3eedfab198e48e8d2c8f02e491ba2c28 slp: support complex FMS and complex FMS conjugate
b50df1e749bb06080ef727504dd7c2616f455f46 slp: Add complex operations class to share first match among all matchers
59832db9a711591bcee0746ae33ccf5eb4978121 slp: Add Tests for complex mul, mls and mla"
c4eec1efae0cfdd9a1a50666876b28567fca1734 testsuite: Fix sed script errors in complex tests
2ea6f4a377e51ed4d55cd8277f8c201ad66685f6 tree-optimization/98685 - fix placement of extern converts
cb60334b7162ec5ae560be482cd7a33402470bb4 testsuite/96098 - remove redundant testcase
d03f14c354a348cc1043f637cae1ac6470034f71 testsuite/96147 - remove scanning for ! vect_hw_misalign
e1bd80fb7064869e8d03ddb59e583f4cc9020770 testsuite/96147 - key scanning on vect_hw_misalign
aa4ee5798fefd8eedd51287695120bf5219a9858 testsuite/96147 - scan for vectorized load
b36c9cd09472c8efb8405726b7cc94fa4ae7059f testsuite/96147 - align vector access
446703ccc2ce09e9710964f781a21030bf3c2d54 tree-optimization/96376 - do not check alignment for invariant loads
104304cd246e9e8cd874f6cef7e2a5cd4bb0114d testsuite/97299 - fix test condition of gcc.dg/vect/slp-reduc-3.c
b8c3f5196e1e439ac83f81dd245eb4028b19d531 libgomp: enable linux-futex on riscv64
e393f03b1a73d75901d1bc49c99123bdf534e120 testsuite/97494 - adjust gcc.dg/vect/slp-11b.c
c7e276b869bdeb4a95735c1f037ee1a5f629de3d analyzer: use "malloc" attribute
9ee33d7c33fa757d7011addfa6bdd0ccb6212181 RISC-V: The 'multilib-generator' enhancement.
ea74a3f548eb321429c371e327e778e63d9128a0 vect: Fix VLA SLP invariant optimisation [PR98535]
f46a40112caa7e039d949beda94386ff4e436a35 testsuite/97299 - more gcc.dg/vect/slp-reduc-3.c massaging
68ba1039c7daf0485b167fe199ed7e8031158091 [PR98777] LRA: Use preliminary created pseudo for in LRA elimination subpass
bca467e56fe111fa6d876656c60d5704065e83fe c++: ICE with delayed noexcept and attribute used [PR97966]
ee78c20e74d30284fee36e22a64e86e45e676029 Lower AVX512 vector comparison to AVX version when dest is vector.
4be156d6bef317b8704052f11431457a577ed564 middle-end/98793 - properly handle BLKmode vectors in vector_element_bits
defc40db9e09ecceb2d71727031fe9579bce1b11 middle-end/98807 - more vector_element_bits fixes
eb77a934eec8fe52e4c5612f5264127290bc517d testsuite: Fix up pr98807.c on i686-linux [PR98807]
4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a middle-end/98726 - fix VECTOR_CST element access
c91db798ec65b3e55f2380ca1530ecb71544f1bb tree-optimization/98854 - avoid some PHI BB vectorization
2bcceb6fc59fcdaf51006d4fcfc71c2d26761396 libstdc++: Add std::experimental::simd from the Parallelism TS 2
f76d0d86454baf99ada0748c73a29816854e1b91 RISC-V: Fix -march option parsing when  extension exists.
25f303e9a27a0d799f9979446d9f11ed62b8d648 testsuite: Fix up gomp/simd-{2,3}.c tests [PR98243]
245ccc8e6b1b74a323fd760c5e3ba1529ea77c47 testsuite: Update pr79251 ilp32 store counts.
972918eea873f8b1663151316c4b3aee7ae028e2 rtl-optimization/98863 - prune RD with LIVE in STV
bbe6998b227013899b001d336a0ba4de94d8d239 RISC-V: Fix gcc.target/riscv/attribute-18.c
33a1e511b57465d898429740377466894a0b247d libstdc++: Make deque iterator operator- usable with value-init iterators
bc7c2b34c34f21ea58198ba58a48eb065bdda25d PR target/98743: Fix ICE in convert_move for RISC-V
1592b74350a0311e4c95a0192ea9c943847e7bc0 tree-vect-patterns: Don't create over widening patterns for stmts used in reductions [PR98848]
5d5130ad5c396bd2dcde766c0c994855b815355b fix memory leaks
5e606ed90a1bed878071b6b5a3ef9b97b3d99838 slp: Split out patterns away from using SLP_ONLY into their own flag
4f22942841edabbdda8a15b172a5c143da7bdafe libstdc++: Fix NEON intrinsic types usage
db256f9bef8c376e9d88e8f32ce94a03b6d105ee libstdc++: Support -mlong-double-64 on PPC
81c2c32de9c1058c33fcf77ada31186b4ae1f1fe libstdc++: Fix mask reduction of simd_mask<double> on POWER7
5eb792e7a12ad214e5295e3f664637078936213f doc: mention -mprefer-vector-width in target attrs
7002a33d1ba81e4577d965fb9daaee146b31faa8 tree-optimization/98855 - fix some vectorizer cost issues
8d0737d8f4b10bffe0411507ad2dc21ba7679883 Fix ICE: Don't generate integer mask comparision for 128/256-bits vector when op_true/op_false are NULL or constm1_rtx/const0_rtx [PR98537]
072f20c555907cce38a424da47b6c1baa8330169 PR target/98878 - Incorrect multilib list for riscv*-rtems
63538886d1f7fc7cbf066b4c2d6d7fd4da537259 tree-optimization/98855 - redo BB vectorization costing
d4536e431316b4568e236afd7a6017e5efd1b0a1 lto/96591 - walk VECTOR_CST elements in walk_tree
40c92180df970143249f3cd5056f8fb48a4d9333 middle-end/98974 - fixup after STMT_VINFO_VEC_STMTS rework
283653f45595f53db486cbc2f1f10091cb45ea3b tree-optimization/99017 - be more forgiving in BB vect costing
d997565c41a8a5783bf076437208f38d8ea39ced tree-optimization/99024 - fix leak in loop vect analysis
9769564e7456453e2273071d0faa5aab2554ff78 compiler: open byte slice and string embeds using the absolute path
a4953810bac524e19126a2745c75fed58db962c2 RISC-V: Shorten memrefs improvement, partial fix 97417.
18fabc35f47f0abf4ec14d147098ec4e0734d2a3 RISC-V: Avoid zero/sign extend for volatile loads.  Fix for 97417.
1531f39268c8973cf9478585fba5c5bbdb6e9c4c openmp: Fix up vectorization simd call badness computation [PR99100]
d8889c99aab4b599aa7ceb7079e69a9766171336 c++: Macros need to be GTY-reachable [PR 99023]
44841e1788c7c64f7d422768a80036a2a90c677f dump SLP subgraph before costing
74af13c174714dd3b9f1ded4b39955f003c16361 config.sub, config.guess : Import upstream 2021-01-25.
5296bd57d0605d1fec900d85e3ab3875197e609a slp: fix sharing of SLP only patterns.
6e646abbe02f2c79cc3ba1f3de705ee62ff9dcd1 fold-const: Fix up ((1 << x) & y) != 0 folding for vectors [PR99225]
96c5a8589e0dd22819bae34cac3381ad381d3989 [comitted] Testsuite: Disable PR99149 test on big-endian
6c35e79b47ab582e18d851f6c5df776bac766eaf slp: fix accidental resource re-use of slp_tree (PR99220)
f207eed69e2421695e240aaf47bf881c09cbdd8a c++: Macro location fixes [PR 98718]
5e7c0927cbd115d488d527c86dfc671b22c378db Make the PR99220 fix more robust
1193d05465acd39b6e3c7095274d8351a1e2cd44 tree-optimization/99253 - fix reduction path check
28af4b9a7c5ee9f6c6fc111210639eb2f64bddcd slp: Don't traverse tree on (nil) nodes.
6bd409cfc83683a9be5c6b3b8f9a3ec8959f9356 c++: abbreviated function template return type rewriting [PR98990]
b8d85f569a6dd44cb9561c95e5f628bd6cd531a5 Optimize pcrel access of globals
b5040344b9ca609e19ee59ba56cd4af9697a1692 dwarf2out: Fix -gsplit-dwarf on riscv or other non-.uleb128 targets [PR99090]
ba09d11a9d0ae2382bab715b102a7746d20dea6d c-family: Avoid ICE on va_arg [PR99324]
5a559ace9b83cb9d7d4ba6f455ddae014f016dfb c++: Unify REQUIRES_EXPR evaluation / diagnostic routines
8d57bdadd2d9c2e5c95515ca7a583d7b407b55c4 Correct a workaround for vectorized stores.
c778a237c1c605c2c5606c212c1ace756739442b c++: Redesign pending entity handling [PR 99170]
9553c8a1b9dd2ca2f0f30d8b23fc6844c7e4a223 c++: Post-pending redesign cleanup [PR 99170]
a3ad6489d38982434faef3bc5f33e3c28c5f7c74 openmp: Avoid ICEs due to orphaned labels in OpenMP regions [PR99322]
7723f569345ae82ba440552251a84e65c2a9dcb5 cris: don't define MAX_FIXED_MODE_SIZE
0455cd76b687621f28488393c81d0854200a220a RTEMS: Fix -Werror builds
da7343a6f48c6813a29640fec744b0a236b6540f Fix miscompilation of Ada runtime on 64-bit SPARC
99d5299376d203fe5172574c2d6b0b088e532383 [Vect] Fix mask check on Scatter loads/stores
3fbac260fc7860a97fd00a54ca955266d737925f [testsuite] Fix target selector for pr99102.c
47cca0288d06bd851e5801d13bbee7d9374b685d libstdc++: Fix headers that can't be used as header units [PR 99413]
9d4ad8570c3bab2e145aa7b39ce8c66bafbf1945 testsuite/97494 - amend gcc.dg/vect/slp-21.c
f6c1d026c3a9109de58d1148e3f54b5273ebb86a testsuite/97494 - XFAIL gcc.dg/vect/vect-complex-5.c on !vect_hw_misalign
aa0d8a3e28cd3365a2910884ce3e7cb67b07f866 testsuite/97494 - XFAIL gcc.dg/vect/pr97428.c on !vect_hw_misalign
3b938c64f775eafd977f79c4f3038082ae7e0127 testsuite/98245 - adjust dump scanning of gcc.dg/vect/bb-slp-46.c
5f27a9f90d4eadadf937f1a5d0bfccf39261f330 c++: Fix unhiding friend with imports [PR 99248]
bbdf59fdbc2ce41ccfac807b15cf3fac7b465a56 match.pd: Don't optimize vector X + (X << C) -> X * (1 + (1 << C)) if there is no mult support [PR99544]
995a740cb01a0671a2082cb1ae13d0c356d4b568 libstdc++: Remove symbols for new std::call_once implementation [PR 99341]
bd364aaee338fbc6e3a49043614331ff471e7f4d Enable gather on zen3 hardware.
d9f0ade001533c9544bf2153b6baa8844ec0bee4 PR target/99314: Fix integer signedness issue for cpymem pattern expansion.
ab03c0d5753549f1a78eeb706510b55fb97c8651 Fix idiv latencies for znver3
c3a2bc6daaa2d278cb5f323e2df4b8c2af4198ac slp: remove unneeded permute calculation (PR99656)
83855386c41b78c92f4445e4d0e6397372136c90 Add size check to vector-matrix matmul.
fc24ea2374259d401a46ce3526688b7e79d4cc13 dwarf2out: Fix debug info for 2 byte floats [PR99388]
540dace2ed3949571f2ce6cb007354e69bda0cb2 PR target/99702: Check RTL type before get value
a9604fcbb29e457a4824a496905057dcc2e5d78a RISC-V: Support -mlittle-endian and -mbig-endian
cd1e2f632532d04c67a17820cb25826f8b0febac RISC-V: Add riscv{32,64}be with big endian as default
f1af1326d269b1d8efb696a50c9e88d0ab6ec45e RISC-V: Update soft-fp config for big-endian
28bddf0e322a5fdc33d3dcc3b9928d559ad7f124 RISC-V: Fix trampoline generation on big endian
4eb3a801a5ed947a50f941b63e30a0359fccf138 RISC-V: Update shift-shift-5.c testcase for big endian
7ac4dfec3912ef0be85542a00628c3ba01ddea2a RISC-V: Fix matches against subreg with a bytenum of 0 in riscv.md
fffefe3d9d1715f83c82331f2265e040f42d09fe RISC-V: Fix riscv_subword() for big endian
b61461ac7f9bdd0e98145be79423d19b933afaa0 fwprop: Fix single_use_p calculation
bd71889b9017751e1a06970d20b28b9fe9479bdc c++: Note duplicates in symbol table [PR 99283]
4be312862dec5c8e49c76249dd5aed220c72039e fix ssse3_pshufbv8qi3 post-reload const pool load
a29124d28253cdf603ba1977db2f09c9f233fea5 tree-optimization/99746 - avoid confusing hybrid code
8bafce1be11a301c2421483736c634b8bf330e69 'libgomp.oacc-fortran/derivedtypes-arrays-1.f90' OpenACC 'serial' construct diagnostic for nvptx offloading
068d02e896d3df17b59b013a82ca0bf9faf058f3 vect: Init inside_cost in vect_model_reduction_cost
aac12084fc07319d5c8232c51dafa4e297bd5415 tree-optimization/96974 - avoid ICE by replacing assert with standard failure
433b6b12dfa5ef109a5d8d40e7b3695dcb749e58 d: Define IN_TARGET_CODE in all machine-specific D language files.
d04c246cae674da081e1c9d8ba631560fee2fa91 libstdc++: _GLIBCXX_DEBUG Fix allocator-extended move constructor
25e515d2199d555848dfba01fd5364df94096496 fold-const: Fix ICE in extract_muldiv_1 [PR99777]
8cf2812cfceaf464dff99651b2d911d6e12b52b7 tree-optimization/99807 - avoid bogus assert with permute SLP node
9c68e2abe294a48385224cd7617eca0720144b5c slp: reject non-multiple of 2 laned SLP trees (PR99825)
1b5f74e8be4dd7abe5624ff60adceff19ca71bda Handle CONST_POLY_INTs in CONST_VECTORs [PR97141, PR98726]
b75c4e1384c021ca94fc8e8db8e517e802b820f3 tree-optimization/99856 - fix overwideing pattern creation
512429a885e87bef51057a001681b7d8d106e807 tree-optimization/99863 - clear vector CTOR TREE_SIDE_EFFECTS
23be03a0f243a084a0fe03d0b96a3d045e1a2b65 c++: dependent attribute on parameter [PR97900]
a40015780f8cc49476741b6914bd5ee97bd10f1d bswap: Fix up bswap_view_convert after the recent change [PR99882]
5bba3415ec251820ba0c9533aef1bef919dfbfdd silence expected psabi warning in ipa-sra-19 on ppc-vxworks
66de517b1c1dd22df7914f8e9a083cd5a73adbe2 c++: placeholder type constraint in structured binding [PR99899]
ffc2331d7994d7fabb1f6ebed931024a9bbe69f2 testsuite: Fix up g++.dg/ext/vector40.C test
58cd9fc8a61de09ba181c5ed5ac7fb91ec506414 tree-optimization/99924 - visit permute nodes again when partitioning
e5c170e080399fb3d24a38bbfcd66bd4675abe53 tree-optimization/99880 - avoid vectorizing irrelevant PHI backedge defs
d11bcbe166c03f722c0e0d41d6e87ac445758fba tree-optimization/99947 - avoid v.safe_push (v[0])
0d6ad10c170e3670f0b5e3709e0fa6e76b7065b3 testsuite/99955 - fix may_alias declaration of vector
5c5b31975e62b4c52d76dc5efd9dc717a361c710 vect: Don't split store groups if we have IFN_STORE_LANES [PR99873]
2f3d9104610cb2058cf091707a20c1c6eff8d470 vect: Restore variable-length SLP permutes [PR97513]
12029c04d01c7ba0f775cdc208edf29490ee5db6 testsuite: Fix many UNRESOLVEDs for gcc.dg/vect
a45fe62102c952072e977db6d42a8524c4dd36c1 testsuite: Fix Advanced SIMD failures for SVE
860c5caf8cbb87055c02b1e77d04f658d2c75880 testsuite: Fix gcc.dg/vect/pr99102.c
05708d6eef87a3dd0c68b1aed7f8d9c3824062b8 c++: constrained CTAD for nested class template [PR97679]
7e45c45d9ccf9d0af2ce29fc5016506ba30676c0 testsuite: Tweak mem-shift-canonical.c
a708de07a1075b4707e640466b987fd724e823b7 testsuite: Fix gcc.dg/vect/pr65947-7.c
00138f9b2b96b61f49605fa261012a330b2668b1 testsuite: Add some vect_variable_length XFAILs
b9af08feac045565a7d3adfcd74e9478e4b33bd2 testsuite: Expect more Livermore loops to be vectorised with SVE
3e350d8539a4e28ddc30d0f08a4040f10b699135 gimple-ssa-warn-alloca: Always initialize limit [PR99989]
3785d2b207f1958f31a79fbbb5705b261551950d d: Add TARGET_D_REGISTER_CPU_TARGET_INFO
1fce5932a3af575cd02c1d2b786dd1b39b922ebe Better const_vector printing
a87d3f964df31d4fbceb822c6d293e85c117d992 Check for matching CONST_VECTOR encodings [PR99929]
a3317f7b3c02907a122f89879e5b6e90c386e64d c: Don't drop vector attributes that affect type identity [PR98852]
1696fc1ea01d5c9dce96b5d3122921aab9308f59 c++: Tweak merging of vector attributes that affect type identity [PR98852]
b44ab138b7d4aaa5a9ee7956121ffc94777f6a42 vectorizer: Remove dead scalar .COND_* calls from vectorized loops [PR99767]
eb8c931e0dbf1d7d9bc1279cab68a963e8f3c299 testsuite: Move gimplefe-4[0|1] tests.
8535755af70f819d820553b2e73e72a16a984599 SVE: Fix wrong sve predicate split (PR100048)
700e542971251b11623cce877075567815f72965 tree-optimization/99971 - improve BB vect dependence analysis
b972e036f40c12b106f9070c3e8adea0eb8a45fa Move gimplify_buildN API local to only remaining user
7d6bb80931b429631f63e0fd27bee95f32eb57a9 tree-optimization/99776 - relax condition on vector ctor element extract
83d26d0e1b3625ab6c2d83610a13976b52f63e0a veclower: Fix up vec_shl matching of VEC_PERM_EXPR [PR100239]
f7ee6a1e8ac62950dd32874bf75e748a2895d595 tree-optimization/100292 - avoid invalid GIMPLE from vector lowering
af4ccaa7515b8e72449448c509916575831e6292 tree-optimization/100253 - fix bogus aligned vectorized loads/stores
6efd040c301b06fae51657c8370ad940c5c3d513 RISC-V: Add patterns for builtin overflow.
17f2908fcf058e145cff275966e34f8c7f57c2c5 RISC-V: For '-march' and '-mabi' options, add 'Negative' property mentions itself.
18d713fbd345c5c54ab6091ac5f114df4551d1bb Update alignment_for_piecewise_move
47915ef8477569b2fbd8001996aa4e542284bb24 libstdc++: Use std::addressof to avoid ADL for operator& [PR 60497]
8d0d46f4a284946eccc504c58d1d9343f0967916 [Ada] Update copyright notice
da9e6e63d1ae22e530ec7baf59f6ed028bf05776 introduce try store by multiple pieces
e702c60e65cf9c13587d571cdd158bca74f4c2e2 libcc1: use std::vector when building function types
ee75ca6b72e4235aa48d6fb30c5cd274f2ff6b67 libcc1: fix a memory leak
ec80b416554d3f41b5fd23cc86287af9b9a7d2d2 [Ada] Implement tiered support for floating-point output operations
67207bd6e6c9b0bfc63bd6fd0a4e1056610c00fd [Ada] Fix s-os_lib.adb so vectorizing compilation works
e1fcf14f33e4f371aae8ae497ca58a760d53ca6d RISC-V: Generate helpers for cbranch4.
952da35cc67000445ca18d3ee8213d7c71a4b3a4 [Ada] Remove hardcoded pragma Warnings from the formal vectors library
1e27ffde96b3967a3abfb4218a20e8ce75b04003 testsuite: Add vect_floatint_cvt to gcc.dg/vect/pr56541.c
e2bc5b6c04df820017c497a2578bd3c4c7b6c89b Do not apply scalar storage order to pointer fields
14b0f37a644d7b59e1737fb275ec4fff044972a8 Clean up and virtualize the on-entry cache interface.
79a27f32df8eab0add722f75332f78fe20d94da3 arc: Improve vector support for ARCv2.
cce4471bb45f72820eb6c15b4a75e67f704b209e testsuite/100452 - fix g++.dg/vect/slp-pr99971.cc
7a4e52e44a8c9e6c59060adc691de5144d3c6940 libstdc++: Remove redundant -std=gnu++17 option from PMR tests
7c85abec763095045ba3f78c6656117dd8f1fd01 libstdc++: Remove redundant -std=gnu++17 option from containers tests
096f8215d2172ca4177cb26035e748d8f182fc8f vect: Add costing_for_scalar parameter to init_cost hook
900b1c27b963c8244c7547943d4a8d03dfacc6f4 Remove BRIG front-end.
010d4a5047166037b316ed22331f3d99742f1f1d c++: ICE casting class to vector [PR100517]
19040050aa2c8ee890fc58dda48639fc91bf0af0 expand: Don't reuse DEBUG_EXPRs with vector type if they have different modes [PR100508]
227a2ecf663d69972b851f51f1934d18927b62cd lto-wrapper: Use vec<cl_decoded_option> data type.
94de7e225c1fda079052c3f0725c926437d56c94 Optimize __builtin_shuffle when it's used to zero the upper bits of the dest. [PR target/94680]
149061188c7c6ddf27663c8c00b7574fc8d0fd23 c++: Check attributes on friend declarations [PR99032]
45063c0506a00f2673049d46f12a6061dca4692f Fix ICE [PR target/100549]
e0a5daf81f2c79a0275eccd7c1a25349990a7a4d middle-end/100582 - fix array_at_struct_end_p for vector indexing
4054472b3fa15e11ccd48190f5e3ecfc89d65af9 c/100547 - reject overly large vector_size attributes
c0129e2d489cc0ab419c58c4f8451898c2b5e3ae Use startswith in targets.
03eb779141a29f96600cd46904b88a33c4b49a66 Add 'dg-note', 'dg-lto-note'
8d51039cb7c807ed84ff7df5416a1e3ba07a5e63 middle-end/100672 - fix bogus right shift folding
1e6648076498a4644aabbfe3ec74b3b2a5b67772 RISC-V: Properly parse the letter 'p' in '-march'.
9c5bd1e9811babe255ddbbdcda1d00ea5997b826 vect: Replace hardcoded inner loop cost factor
29a2f51806c5b30e17a8d0e9ba7915a3c53c34ff openacc: Add support for gang local storage allocation in shared memory [PR90115]
11b8286a83289f5b54e813f14ff56d730c3f3185 [OpenACC privatization] Largely extend diagnostics and corresponding testsuite coverage [PR90115]
3b0a7d624e64eeb81e4d5e8c62c46d86ef521857 RISC-V: Pass -mno-relax to assembler
1fd76b24306ed4df4cf9e797d900699ed59ce7f7 Optimize x < 0 ? ~y : y to (x >> 31) ^ y in match.pd
45f4e2b01b82c72b3a11ff4ad184d7edcf0e63d4 Convert remaining passes to get_range_query.
4a9f2306cb39a3cf265eeb6f8f3a8bbaf230c4c8 forwprop: Enhance vec perm fed by CTOR and CTOR/CST [PR99398]
f7a07f5a5d8065e7f11133dd1f4ad3510ab2195b tree-optimization/100778 - avoid cross-BB vectorization of trapping op
ef8176e0fac935c095cc39f4ecdfd43cdb8cb3f3 c++/88601 - [C/C++] __builtin_shufflevector support
ac0bc21bd634a334ba8f323c39a11f01dfdc2aae c++: value-init vs zero-init in expand_aggr_init_1 [PR65816]
088264ea445efcee5f8f06150b5f9f508f21960b icf: Fix memory leak of a vector.
c3ab6266bc52c6d42bd1de015397b272515cf40c testsuite: Add -Wno-psabi -w to g++.dg/ext/builtin-shufflevector-1.C
7ed1cd9665d8ca0fa07b2483e604c25e704584af vect: Use main loop's thresholds and VF to narrow upper_bound of epilogue
3c70b3ca1ef58f302bf8c16d9e7c7bb8626408bf RISC-V: Enable riscv attributes by default for all riscv targets.
e1521b170b44be5cd5d36a98b6b760457b68f566 fold-const: Fix up fold_read_from_vector [PR100887]
4db34072d5336d13b66f7185ec6454aa7d36f3c7 predcom: Enabled by loop vect at O2 [PR100794]
ffe3a37f54ab866d85bdde48c2a32be5e09d8515 middle-end/100951 - make sure to generate VECTOR_CST in lowering
e64d62c7008e6a4b0227fd25e071db8f0b3f1820 [nvptx] Update comment in 'libgomp.oacc-c-c++-common/parallel-dims.c'
4bd2cdb74e26f68a4e9d51e74ace60326c9950d1 Make SLP root stmt a vector
7a56d3d3e99cc77ad8a6a674870c814da6225675 tree-optimization/100923 - fix alias-ref construction wrt availability
87f9ac937d6cfd81cbbe0a43518ba10781888d7c Virtualize fur_source and turn it into a proper API.
12913c7125f15d4385c28860126b33834b6dd267 Simplify vect_is_simple_use
ce670e4faafb296d1f1a7828d20f8c8ba4686797 tree-optimization/97832 - handle associatable chains in SLP discovery
374f93da97fb0378453d503f3cfea4d7a923a89c tree-optimization/100981 - fix SLP patterns involving reductions
cce1697e6fe0134616ebc8f7040d99e66c12241a tree-optimization/101003 - use pattern defs when linearizing
cbf6dcaac040b7a572b8287453101489637c626b testsuite: Change gcc.dg/vect/pr56541.c target.
e9d322ced1433da8e7c69243cfa941ea462d6290 Use stablesort for sorting association chain
336c41dbcb21740f8964021e157bc69ca547059b middle-end/101009 - fix distance vector recording
4bdcdd8fa8d7659e5a19a930cf2f0332127f8a46 simplify-rtx: Fix up simplify_logical_relational_operation for vector IOR [PR101008]
fbd8a8041292f2ec2c22be43c8d3e74b37b2bc88 tree-optimization/101026 - fix SLP re-association
b9ec5ebb605936684e95b8dcc12e43ba7d8f2cb4 tree-optimization/101028 - fix endless SLP reassoc discovery
2c4115ba9c031fbb6c3fe5605031303579421788 Fix effective target for check-builtin-vec_rlnm-runnable.c test
d64584d2fbe79b34e7176681a9d9f85851628ce8 testsuite: fix AIX testsuite failures
3f207ab314c071c6060c7c9a429fcf29fd87b594 use range based for loops to iterate over vec<>
008153c8435ca3bf587e11654c31f05c0f99b43a expr: Fix up VEC_PACK_TRUNC_EXPR expansion [PR101046]
913b13fcb1dceea0e57a04cb77b11097b132cbf6 Fix for vcmpequt builtin
4e56b1347687a33efa47d13d357ae3b7ab759c99 tree-optimization/101083 - fix ICE with SLP reassoc
e9681f5725f54a58098678cdea19d1e90d9a36e3 auto_vec copy/move improvements
265af872a1f8d7ffda2c4056d1d80a3ec4fc8650 return auto_vec from cgraph_node::collect_callers
a165040e11e340f6b397104f23717ef398408e67 return auto_vec from get_loop_hot_path
4541b5ec16178a1954066c54cd9220b7c8f74309 make get_domminated_by_region return a auto_vec
53c55d3204a69c4cce4cc5a982c42cec91178346 return auto_vec from more dominance functions
967b46530234b4e6ad3983057705aea6c20a03c4 Add a target calls hook: TARGET_PUSH_ARGUMENT
17a4bee01c3b29c5ccdd39f34384521e5d44135b tree-optimization/101112 - fix pattern stmt def lookup in SLP reassoc
90f78d5d86598f8cadacfb20d8d98c122a466599 tree-optimization/101121 - avoid infinite SLP build
e08a125b208e717f99caa991052537305ca75b6a Add vect_recog_popcount_pattern to handle mismatch between the vectorized popcount IFN and scalar popcount builtin.
26f05f5a823030ebb52b107a8c303d07f77fe317 tree-optimization/101154 - fix out-of bound access in SLP
a5b773d3f86dd4333696cab0fe3a6953d3db74a3 tree-optimization/101159 - fix missing NULL check in popcount pattern
7a22d8a764418265680a6bb9a9aec31e984eb015 tree-optimization/101158 - adjust SLP call matching sequence
7822285515cd4dab86f722a9f4969b6952904a37 RISC-V: Add tune info for T-HEAD C906.
3adb9ac6626c15ba21e4eaf27fec95688a3ca8c2 testsuite: Add testcase for recently fixed PR [PR101159]
ca4d381662c37733b2a1d49d6c8f5fcfc1348f3d Adjust on_entry cache to indicate if the value was set properly.
b7574ca6edb5ac7fab741f46d4f50ac4294c8180 Do not enable pcrel-opt by default
50374fdacbd121bc4a61b073e559208ff61bee06 tree-optimization/101105 - fix runtime alias test optimization
7dcf139a2b8e1c53096ee2593cfdd706d5d358a8 refactor SLP permute propagation
82ab14927651e0eaf0f6d6964396048bb5471f23 Fix SLP permute propagation error
0237aa8c706f09bb2568224afcdac40b5e47c3e1 libstdc++: Improve copysign(simd) codegen
05516402f8eb8ec282a13fa1e38d9f9c5b3dd3e5 Fixup reduction info on addsub SLP pattern
55a1546b73b60d2601f35671ba9e8f12a52a7b77 tree-optimization/101202 - fix ICE with failed backedge SLP nodes
99585d88a090b4c5b7791f7ab62f70eb37b748fa jit: fix test-vector-* failures
28560c6d4043d8f6ac570f35fb84e952e9c719fe Fold blendv builtins into gimple.
2ad71efb5de9e929ffd2b8ce0a37c3c34021c0f1 tree-optimization/101207 - fix BB reduc permute elide with life stmts
f80c4eaca0805bc9e68ed944519519c3dd1c12e1 tree-optimization/101229 - fix vectorizer SLP hybrid detection with PHIs
d5e69948beb61fb320d9ca703faff84d6f608545 fortran: Add support for per-location warning groups.
c01760bc548ba79bc9ac15168b27fe7aabcb19ae tree-optimization/101242 - fix reverse graph entry detection
2dfc0f2203e875621f4aeb2e2496aaeb9a2dc05b Refactor SLP permute opt propagation
6df6055d5c666e669890ff8572df2353e341a534 Add forward propagation to SLP "any" permutes
39da8a7ba9a3a643e6318a5534d5d7c85a3bedfa tree-optimization/101264 - rework SLP "any" permute forward prop
a075350ee7bffa6c90d9d233de78515f498b5149 tree-optimization/101267 - fix SLP vect with masked operations
7d8211603a3d04384812b481b0ae01205a287a72 tree-optimization/101178 - handle VEC_PERM in SLP permute propagation
a3aaba68405751bae3f630669515b7ecdf77efa6 tree-optimization/100778 - fix placement of trapping vectorized ops
a86b3453fc6e29cf0e19916b01c393652d838d56 Change the type of predicates to bool.
52c3fdf3e4780f75297515d3c2a3dae9b36586ba Don't use vec_duplicate on vector in CTOR expansion
ccb4e0774b3e5859ea1d7f1864b02fa5826c4a79 testsuite/101299 - add missing vect_double requires to bb-slp-74.c
38872c6c0db1b10b17d3913b277c499913208d0b middle-end/101291 - set loop copy of versioned loop
88ada5c051c49a1f03602df747a9e6dae675c68e Do not set both LOOP_C_INFINITE and LOOP_C_FINITE on vectorized loop
7d810646d421f6975300c0d06f4e9af27a48f26d Add FMADDSUB and FMSUBADD SLP vectorization patterns and optabs
98bfd845e93937d92ca844d7fa7e853ad51c6193 Add avx512 tests for MADDSUB and FMSUBADD SLP vectorization patterns.
005f31a0370cf35e332db9415a0ff538320bcddc tree-optimization/34195 - testcase for fixed vectorization
2e9ef3929b0305235b968c431c8d7fec92885101 vect: Remove always-true condition
82625a42e652d52fc6bbe6070f8d0589d5e0c8ad mips: check MSA support for vector modes [PR100760,PR100761,PR100762]
175c2f98ea85004f23acc4b40f0e4264420116fc [Ada] Declare time_t uniformly based on a system parameter
c03cae4e066066278c8435c409829a9bf851e49f Display the number of components BB vectorized
47113773456ade7324c5467511d97f36cced57b4 produce simple DOT graphs from SLP trees
063eba7ca73030139a3bf822ed127cf09b2fc226 Deal with prefixed loads/stores in tests, PR testsuite/100166
f546e2b6cc5c610ae18aac274d0d6493f2da3801 Revert "Display the number of components BB vectorized"
18a463bb666cc8f3421589e7641ec617acb84741 docs: Add 'S' to Machine Constraints for RISC-V
0ae469e8c0ccb93a26bb1e60db6418d6bcced15e ifcvt: Improve tests for predicated operations
3658ee4c73955ebf281842d2e637ca556fa8bbfd vect: Simplify epilogue reduction code
b68eb70bd6df8c4b846bddb4f0aeae9054b932bc vect: Create array_slice of live-out stmts
81ad6bfc078ca36a42446e2f2295102ffaac9ee1 vect: Remove new_phis from vect_create_epilog_for_reduction
32b8edd5297c9193b81122fdd55316fcbf0959dc vect: Ensure reduc_inputs always have vectype
d592920c89973acd8d9f5b1f6b0526036ce63ccb vect: Add a vect_phi_initial_value helper function
826c452e571884fcabbc73863eef5120e683d034 vect: Pass reduc_info to get_initial_defs_for_reduction
bd5a69191f023b9bc2a1f83c5f7d5e591c333b9a vect: Pass reduc_info to get_initial_def_for_reduction
221bdb333b0917c927aec4d367a72e3667087d7a vect: Generalise neutral_op_for_slp_reduction
7670b6633e51afbbc4b3c8a5775accf7f2d887af vect: Simplify get_initial_def_for_reduction
1583b8bff0be7e41aa721dde79f90ca0763bd4e2 vect: Reuse reduction accumulators between loops
8695bf78dad1a42636775843ca832a2f4dba4da3 gcc: Add vec_select -> subreg RTL simplification
1dd3f21095858fbfd3e28a149578d5fb67e75f95 Support reduction def re-use for epilogue with different vector size
a967a3efd39280fe3f5774e45490e991f8e99059 tree-optimization/101445 - fix negative stride SLP vect with gaps
ab0a6b213abf6843b59cdea6399030e828109551 Vect: Add support for dot-product where the sign for the multiplicant changes.
1e0ab1c4ba6159ad7ce71c6cddd5e04d2a636742 middle-end: Add tests middle end generic tests for sign differing dotproduct.
4940166a15193d6583b320f2957af8720745b76c Vect: correct rebase issue
92acae5047e4b8c5be035f067099942a93e55d0c Streamline vect_gen_while
b25edf6e6feeadc6a5aa337b8c725786227162dd testsuite: Fix testisms in scalar tests PR101457
f0500db3692276f60e0562c17c87a0cb03e34398 Detect buffer overflow by aggregate and vector stores [PR97027].
d6aa28bb93c6fc9042ee87ff7addac60647dbddb tree-optimization/101462 - fix signedness of reused reduction vector
df0d7486ec9bca8a77ca106d9fbb60f819dd9cec tree-optimization/101467 - fix make_temp_ssa_name usage
650c70a9fe7198394d3bbe4c0b1a7a73dc0bdd4a Remove more gimple_expr_type uses
3bf6e1f89dbd2c67c419d3d4e94085208611262f testsuite: fix IL32 issues with usdot tests.
3ce20b6be543824a07c3367253188d754b58667e Remove last gimple_expr_type uses
8df3ee8f7d85d0708f3c3ca96b55c9230c2ae9f0 tree-optimization/101505 - properly determine stmt precision for PHIs
a1d27560770818c514ad1ad6683f89e1e1bcd0ec vect: Recog mul_highpart pattern [PR100696]
e695f0101a8cacbc29353c5a000731e50b2627e6 RISC-V: Detect python and pick best one for calling multilib-generator
7fcb33455c9dc9359d98cd6bffe7f32f282ed713 PR 100167: Fix vector long long multiply/divide tests on power10.
00dcc88a0ed7bd148ea86d900b6c93574a2e1f26 Adjust by-value function vec arguments to by-reference.
957952ce64e067c56e58df5ee36bbb004eecffa1 unroll: Run VN on unrolled-and-jammed loops
e0335bb7d1fc7dd05e91bcdd1f65b2bcf8ec1a09 Revert "RISC-V: Detect python and pick best one for calling multilib-generator"
a6291d88d5b6c17d41950e21d7d452f7f0f73020 Remove pass_cpb which is related to enable avx512 embedded broadcast from constant pool.
8819419ba1d397c0444d89079ec16657a09914fb Fix PR 10153: tail recusion for vector types.
c8ce54c6e67295b70052d1b9f9a2f7ce9e2f8f0d tree-optimization/39821 - fix cost classification for widening arith
16158c96496b537194111526d25e19f268d613b6 libstdc++: Remove unnecessary uses of <utility>
872da9a6f664a06d73c987aa0cb2e5b830158a10 Add the member integer_to_sse to processor_cost as a cost simulation for movd/pinsrd. It will be used to calculate the cost of vec_construct.
89b3c97eed75c1e7c492bc727e0016003c5809cc vect: Fix wrong check in vect_recog_mulhs_pattern [PR101596]
6bb6e2044ced33d08175361b8e39a9c5d4a868a6 tree-optimization/101615 - SLP permute opt of existing vectors
3c91efec15af4f922a9af495e178bbb66d2e9d1f tree-optimization/101615 - SLP permute opt with CTOR roots
841548f0f7d375c5b7022e19d588061cda3acfa6 Adjust docu of TARGET_VECTORIZE_VEC_PERM_CONST
2e96b5f14e4025691b57d2301d71aa6092ed44bc Backwards jump threader rewrite with ranger.
0829ab79d37be6c59072af0c4f54043f7e9d23ea [OpenACC] Extract 'pass_oacc_loop_designation' out of 'pass_oacc_device_lower'
e41ba804ba5f5ca433e09238d561b1b4c8b10985 Use range-based for loops for traversing loops
e5e164effa30fd2b5c5bc3e6883d63889e96d8da Add QI vector mode support to by-pieces for memset
724adffe65e1268e8b3f2ab538660020f7572114 Support cond_add/sub/mul/div for vector float/double.
d0b952edd3f5753332ea234ef261711a81e87229 Add cond_add/sub/mul for vector integer modes.
e9f64fff64d83f5fcaa9ff17f1688490f75bdcb7 libstdc++: Reduce header dependencies in <regex>
2fc2e3917f9c8fd94f5d101477971d16c483ef88 Support cond_{fma,fms,fnma,fnms} for vector float/double under AVX512.
87a0b607e40f8122c7fc45d496ef48799fe11550 tree-optimization/101756 - avoid vectorizing boolean MAX reductions
2724d1bba6b36451404811fba3244f8897717ef3 Rewrite more vector loads to scalar loads
240b01b0215f9e46ecf04267c8a3faeb19d4fe3c libstdc++: Add [[nodiscard]] to iterators and related utilities
0d04fe49239d91787850036599164788f1c87785 libstdc++: Add [[nodiscard]] to sequence containers
31855ba6b16cd138d7484076a08cd40d609654b8 Add emulated gather capability to the vectorizer
9fcb8ec60302f5f110f94a885b618993c28d18d3 [testsuite] Fix trapping access in test PR101750
315a1c3756cbc751c4af0ce0da2157a88d7c3b09 vect: Tweak dump messages for vector mode choice
5a1017dc305c49c59129d45536630d02dbc01c45 vect: Tweak comparisons with existing epilogue loops
9a8c3fc2b2cc6d73b2e3006625fca2b588ebc1b0 Support cond_{smax,smin,umax,umin} for vector integer modes under AVX512.
f7aa81892eb54bc040ee6f7fd6134d800a5ee89c Support cond_{smax,smin} for vector float/double modes under AVX512.
c16f21c7cf97ce48967e42d3b5d22ea169a9c2c8 Support cond_{xor,ior,and} for vector integer mode under AVX512.
4e3129b0caceec008a940aa5eada253cd0f0b3ec Fix oversight in handling of reverse SSO in SRA pass
f0fc1e66238e2e9fe0cbc6e5b77fd163bf887b2c Adjust gcc.dg/vect/bb-slp-pr101756.c
a3d3e8c362c2d850543eb2e2631128e1efc368f0 Adjust by-value function vec arguments to by-reference.
f31da42e047e8018ca6ad9809273bc7efb6ffcaf tree-optimization/101801 - remove vect_worthwhile_without_simd_p
f5a2d78072fc161e8ca3117126030041f1503c3f libstdc++: Reduce use of debug containers in <regex>
813ccbe9d272cd67a8f075beea280de95f807492 Support cond_ashr/lshr/ashl for vector integer modes under AVX512.
19d1a529fa9f78e7ec7be38d423c90e00cec8f8c tree-optimization/101801 - rework generic vector vectorization more
08aa0e3d4f781fd6a6e293bb06d280365a0bdc1d tree-optimization/101809 - support emulated gather for double[int]
f19c70afa4aa2416c581484a6eb51c0ac46acd08 tree-optimization/101861 - fix gather use for non-gather refs
01f8a8b48e50cbaa68b878d9f8a330b8c0736bed openmp: Diagnose syntax mismatches between declare target and end declare target
fdd40498d1981fde0720a0886d6f59ea5fb7ab40 RISC-V: Allow multi-lib build with different code model
faf2b6bc527dff31725dde5538ffff1c92688047 Optimize __builtin_shuffle_vector.
2e0d7f16da0897fb2eb83f5c1ffe67f0ad747e92 vect: Add extraction cost for slp reduc
174f9257a75dec93221eca26c236e0a6346c9dfd libstdc++: Optimize std::seed_seq construction
e7e17be3be3d43640a9a4a33d59315dec69fdda4 Fall back to masked_gather_load/masked_scatter_store
c883d1dcdea8820015ee7ffdc68c03cf3b8180bf libstdc++: Fix vector<bool> printer tests to work in debug mode
085c2f8f0e13d7c1515ce86755a52a31faf0cf47 libstdc++: Fix CTAD for debug sequence containers
976401aa4781fa5850e1f34142bc13d1cfe0b2bd Fold more constants during veclower pass.
37744f8260857005c8409c9e2e633a05c768a7dd Refactor BB splitting of DRs for SLP group analysis
7cad8a8f9f7bfa8e98f6a0615541f589fd1d3fc1 configure: drop version checks for in-tree gas [PR91602]
b320edc0c29c838b0090c3c9be14187d132f73f2 bswap: Recognize (int) __builtin_bswap64 (arg) idioms or __builtin_bswap?? (arg) & mask [PR86723]
12dc8ab983db039a570e3798b468498e2230c7d9 Fix scalar costing issue introduced by PR84512 fix.
819b7c3a339e3bdaf85cd55954c5536bd98aae09 Disable slp in loop vectorizer when cost model is very-cheap.
f8977166135de09fe36a3b57cc11daa67587604e Tweak -Os costs for scalar-to-vector pass.
8571ff0ae0922bee292161c7fd61dd127d26a4ed Adjust inner loop cost scaling
9216ee6d1195d48388f825cf1b072e570129cbbe tree-optimization/100089 - avoid leaving scalar if-converted code around
3673dcf6d6baeb67bb70ff03d4cb3f92beed0075 Analyze niter for until-wrap condition [PR101145]
29c77454e5ab33ce06a741eacdfbd5348fbccc95 tree-optimization/102046 - fix SLP build from scalars with patterns
ead408529d7a69873a7c14dd12fa043cd5862253 libstdc++: Fix conditions for optimizing uninitialized algos [PR102064]
94a047359f84c7ea5ade378028852b19529a7495 Fix float128-call.c test for power8 IEEE 128 and power10.
ac6d5c9112bb78e47398e040c553ad216edf3ebb Reduce vector comparison of uniform vectors to a scalar comparison
10c834f976c349970ee4b8eb3b4fce140972f256 Update comments in float128-call.c test.
89f33f44addbf9853bc3e6677db1fa941713cb6c tree-optimization/102128 - rework if-converted BB vect heuristic
67927342290c61d7e054430f1d7a7281f1f97fae tree-optimization/102142 - fix typo in loop BB reduc cost adjustment
eca730231d5493647bb1e508fb1f853ffee0e95a testsuite: Fix gcc.dg/vect/pr101145* tests [PR101145]
153766ec8351d55cfe8bd6d69bdfc0c2cef71e56 tree-optimization/102139 - fix SLP DR base alignment
bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f vectorizer: Fix up vectorization using WIDEN_MINUS_EXPR [PR102124]
165446a1e81f5bb9597289e783af9ee67e1fe5ba Call reduce_vector_comparison_to_scalar_comparison earlier
e902136b310ee17d4b49eb42d9d5e487d5dcf4a1 c++, abi: Set DECL_FIELD_CXX_ZERO_WIDTH_BIT_FIELD on C++ zero width bitfields [PR102024]
6b69bf5729852d0510abbe8e04078ddecef0cf17 Fix target/102173 ICE after error recovery
a3fb781d4b341c0d50ef1b92cd3e8734e673ef18 tree-optimization/102176 - locally compute participating SLP stmts
843068149ec8fcaaaec12751f5b70221a1153857 tree-optimization/102226 - fix epilogue vector re-use
60eec23b5eda0f350e572586eee738eab0804a74 Optimize vec_extract for 256/512-bit vector when index exceeds the lower 128 bits.
fad540552ffa23dae2874aaf93916175d2577b8e Strengthen compatibility warning for GCC builtins
26864014bba4ccd33cddbf7d9cd81fe9685e7f7c Fix internal error on broken import of vector intrinsics
b9c35857d00c66158fcdf7de8adae4f06023052e Fix inaccurate bounds in debug info for vector array types
b6d8fa66e1bf08756cb4134735b5034e171f49d1 tree-optimization/102318 - reduction epilogue re-use
feebc22ba934f154aad6d8cad6cce0adf1d4610e Maintain (mis-)alignment info in the first element of a group
7fc4d6000a0d6c847c4c07373fbd4a17e54c678f Optimize for V{8,16,32}HFmode vec_set/extract/init.
4703182a06b831a9f47a5f8198e86042cadd938d Revert no longer needed fix for PR95539
e666a0a22a5c11b5bb894a75b73b6b7f3e364e4d Fix ICE in pass_rpad.
f92901a508305f291fcf2acae0825379477724de tree-optimization/65206 - dependence analysis on mixed pointer/array
24f99147b9264f8f7d9cfb2fa6bd431edfa252d2 Avoid premature alignment setting in vect_duplicate_ssa_name_ptr_info
47ee6e6fb99889325835eab87c995db23647c77b Use the proper vectype
56c24f18cce0da6405c5071b838844447fa81ac8 C++: add type checking for static local vector variable in template
55b989de7679a486ad674fb154408de26ac96467 tree-optimization/102421 - copy alignment info when splitting groups
4c0c43623efe2900dd0feb3abf8b611023362c43 Overhaul jump thread state in forward threader.
c0cc62b32d95caca25a8854e0d2b6f11f5674d30 tree-optimization/102448 - clear copied alignment info from vect
4a960d548b7d7d942f316c5295f6d849b74214f5 Avoid invalid loop transformations in jump threading registry.
51ca05031959d3accffe873e87d4bc4fbd22e9e9 Make profitability calculation of RA conflict presentations independent of host compiler type sizes. [PR102147]
9cfb95f9b92326e86e99b50350ebf04fa9cd2477 Relax condition of (vec_concat:M(vec_select op0 idx0)(vec_select op0 idx1)) to allow different modes between op0 and M, but have same inner mode.
6fabd9e25d1438b506c0c3979330cfd3034af317 Fix gcc.dg/vect/bb-slp-pr65935.c FAIL with AVX after recent change
99c106e695bd8f1de580c4ff0b1d3fe59c9a4f1e reassoc: Do not bias loop-carried PHIs early
b701f46ea6d651aff8dbd267c29213253045e2b6 libstdc++: Skip tests that fail with _GLIBCXX_CONCEPT_CHECKS
68c081bb437d7383481bb75e1f79975f63dc7661 RISC-V: Pattern name fix mul*3_highpart -> smul*3_highpart.
c6dbe7a56dfb511101ddea98844a7be0027d30a6 Fix some testcases after my computed goto patch
4c7731081647c22cbd249dc0faa20c3df9ed6411 Fix peeling for alignment with negative step
c2dc29c4a54b8d80c4fbd753d65b75f4313ffec3 Fix thinko in previous alignment peeling change
09f032c22053f178c802d83a1dea49a0d47c7cc4 Refine alingment peeling fix
d0abfa815a54f895d782a62d99160f5a349f68c7 Fix bb-slp-pr97709.c after computed goto change
c67339d12653c33f85f8141789d7a7cf38831cbd libstdc++: Fix _ForwardIteratorConcept for __gnu_debug::vector<bool>
681707ec28d56494fa61a80c62500724d55f8586 libstdc++: Do not allocate a zero-size vector<bool> [PR 100153]
fb4d55ef61ca3191ec946d4d41e0e715f4cc4197 libstdc++: Simplify __normal_iterator converting constructor
acf3a21cbc26b39b73c0006300f35ff017ddd6cb libstdc++: Reduce header dependencies for C++20 std::erase [PR92546]
ad4a3c047f67d628b607bb6cf4791005affd1d83 middle-end/102587 - avoid auto-init for VLA vectors
22d34a2a50651d01669b6fbcdb9677c18d2197c5 libstdc++: Implement P1518R2 for container deduction guides
604459a09585314841cdce4698893c656481691b More .DEFERRED_INIT expansion rework
561078480ffb5adb68577276c6b23e4ee7b39272 libstdc++: Avoid debug checks in uniform container erasure functions
2b8453c401b699ed93c085d0413ab4b5030bcdb8 Enable auto-vectorization at O2 with very-cheap cost model.
82e3a826871effc7093852a9181f641c693ae94f libstdc++: Restore debug checks in uniform container erasure functions
00f34291175981393b2a9802ada879e72335dcd0 Come up with OPTION_SET_P macro.
b4e81f6dd48732ace73eebf1d2f46ca1d2533b79 Adjust more testcases for O2 vectorization enabling.
882d806c1a8f9d2d2ade1133de88d63e5d4fe40c tree-optimization: [PR102622]: wrong code due to signed one bit integer and "a?-1:0"
6d97315a4e1acb992580e84065c66d09d1342a77 Adjust testcase for O2 vectorization enabling.
84088dc4bb6a546c896a068dc201463493babf43 libstdc++: Fix std::match_results::end() for failed matches [PR102667]
d61ce6ab04ee98f1f64b54436bca96054cc62329 Adjust testcase for O2 vectorization enabling
fab2f61dc1b195fec9161be15635b87d312e4626 vectorizer: Fix up -fsimd-cost-model= handling
9f12a45ef147e563f099c24c293830727e8204cc tree-optimization/102572 - fix gathers with invariant mask
d1dcaa31453fa080a27938b064e53f02272d4aa1 tree-optimization/102696 - fix SLP discovery for failed BIT_FIELD_REF
3c0194d7ff21d61c02f3c6b111c83ef24a69e1f0 tree-optimization/102659 - avoid undefined overflow after if-conversion
f874a13ca3870a56036a90758b0d41c8c217f4f7 libstdc++: Fix regression in memory use when constructing paths
bd440a8c1c50b20b6eac028bca1fc682159787ba Adjust testcase for O2 vectorization[Wuninitialized]
9b2ad21ab3ebc21a3408108327fa1a7cbedaf217 tree-optimization/102659 - really avoid undef overflow in if-conversion
ebdf180e15d0ae18bfcb2bd822d7f096743cd4fb Fix predcom-3.c on arc-elf after vectorizer changes
8ececf9b8c5a2bf2f231db0c3bcf2be927990e7c Fix mips testsuite fallout from vectorizer changes
730f52e05a1fb5c8cd92e352e9b191a6332be5c2 Allow early sets of SSE hard registers from standard_sse_constant_p.
a5b1b2a186d94b31a522395e9d02c9cec1b928cb tree-optimization/102798 - avoid copying PTA info to old SSA names
eb032893675afea4b01cc6ad06a3e0dcfe9b51cd tree-optimization/102788 - avoid spurious bool pattern fails
247c407c83f0015f4b92d5f71e45b63192f6757e Try placing RTL folded constants in the constant pool.
b0ea7a8409aa4afd0b0fd874b232766a758c0bc6 Remove redundant alignment scheme recomputation
c9ff4581841f079e00d37fa7743021c62c935315 Reduce the number of aligned_access_p calls
1257aad1073e1fb8989acdf7ca832fba82d10534 Apply TLC to vect_supportable_dr_alignment
caab0139761b04226fab14d87c4a4f981d942bbf Remove check_aligned parameter from vect_supportable_dr_alignment
d19d90289d1343e4fb0550eb1151db6da8a0d1ce Add misalignment output parameter to get_load_store_type
d996799a507f9f4c379b55b004233be92fa63380 tree-optimization/102827 - avoid stmts in preheader
476ca5ade8522d566ffffeab0bece6a64aefeecd Compute negative offset in get_load_store_type
793d2549b173a0a2da6dd20ffc27acb9fd2de73e Refactor load/store costing
93bd0213885739a1073f8c98911f8a00c0eb5597 Refactor vect_supportable_dr_alignment
3c8d8c0be95e99dc0cba7f6fad2429243582119f Adjust testcase for O2 vectorization.
d8edfadfc7a9795b65177a50ce44fd348858e844 Disallow loop rotation and loop header crossing in jump threaders.
c7abdf46fb7ac9a0c37f120feff3fcc3a752584f openmp: Fix up struct gomp_work_share handling [PR102838]
d438dd2523a35e073eed04d146f1e73e2514d93d testsuite/102861 - adjust gcc.dg/vect/bb-slp-16.c change
f5ef4da3ccdfbedb44cb21205527cfdbbec95cbd Remove restriction of SLP vectorizing internal function calls
7878981f1d44b4c9bb6c4a3137b37f06c725b73d tree-optimization/102847 - properly cost VMAT_INVARIANT loads
8516963942b0a8f06fa8f5ebd7c37f9edea151ac tree-optimization/102847 - adjust VMAT_INVARIANT load costing
2606dfea12dbe9692c9d576155e63bf3acebd1bf Adjust testcase for 128/256 bit HF vector load/store
149e217033f01410a9783c5cb2d020cf8334ae4c RISC-V: Minimal support of bitmanip extension
283b1707f2373794c9ff724f01429586359f0b71 RISC-V: Implement instruction patterns for ZBA extension.
04a9b554ba1a71baae6f985905d92fe693acb437 RISC-V: Cost model for zba extension.
e596a283e54bdb0b4a0cebc128f9d9ac268e3916 RISC-V: Implement instruction patterns for ZBB extension.
3329d892eb603fbe4e7c393f19d35739fe400a22 RISC-V: Cost model for zbb extension.
26d2818bb73a09622f87df53d6280d18b229bcbc RISC-V: Use li and rori to load constants.
4e1e0d79ecbe8727cb69d4cd97b20c71caaefafc RISC-V: Implement instruction patterns for ZBS extension.
77b84fb0a8eac736f456e42b6a7801a76e4644eb RISC-V: Cost model for ZBS extension.
0b028fb4989c2bdfaf474b4493c5926fb40da3c3 tree-optimization/102905 - restore re-align load for alignment peeling
f3dbd3f36d55178d0a9e4431043cbc950524969a vect: Don't update inits for simd_lane_access DRs [PR102789]
ccbd6c37c4f6e12a3fbb22314a09db897a0aa8b9 Turn vect_create_addr_base_for_vector_ref offset into a byte offset
94f28340513753ba94ab483e93ce1d096842a5ad Move negative stride bias out of dr_misalignment
6adfdff68b1fef146b97c39d4b9d8db59d498837 Unify offset and byte_offset for vect_create_addr_base_for_vector_ref
4f1fe0dc25391a1d73c1034a85b3b6bf04c5e26e testsuite: Fix up gcc.dg/pr102897.c testcase [PR102897]
b528e226d19335796c355d202c8e8686506680cd Refactor try_vectorize_loop_1
d1e2e4f9ce4df50564f1244dcea9befc3066faa8 ipa-cp: Fix updating of profile counts and self-gen value evaluation
ab1008255e37b5b51a433ed69e04c06300543799 ipa-cp: Select saner profile count to base heuristics on
e399cde6f9c89cafbbf6c3274c0af3c369d4f872 RISC-V: Handle zi* extension correctly for arch-canonicalize script
2dc835cd0b5183a0e30b2b052362ad05f5c082b0 RISC-V: Fix wrong predicator for zero_extendsidi2_internal pattern
eed248bb8cc3091e8a9b2f73138c691396752438 tree-optimization/102949 - fix base object alignment
84bcefd5555af6d95e08cd980965098961289215 Enable vectorization for _Float16 floor/ceil/trunc/nearbyint/rint operations.
518bc4ef87eaf9dde8fbc83120a24ac0888c56e0 testsuite: Don't expect a complex FMA
8a260d652c421e212818efc3c0f487cf9cdbcc2c testsuite: fix failing complex add testcases PR103000
68b48f3f4c49132cc6bfb16e65f8b6fd939689c7 middle-end: Teach CSE to be able to do vector extracts.
2e560abff4294639a0fcf666994c30fb2f00a324 Adjust testcase for O2 vect.
f81970b5f386630b98a33373c23dcc9234c6a980 Add TSVC tests.
6cc8aa65fdeaefe9774d5e0d4e72c91f52313be1 middle-end: Fix PR103007, add missing check on complex fms detection.
c33a5cc9e7f1475108892abb147f9382ecbaec12 RISC-V: Fix build errors with shNadd/shNadd.uw patterns in zba cost model
164bbf701ff10ff44e272525e8f462ed3ff1cf43 tree-optimization/103029 - ensure vect loop versioning constraint on PHIs
a31056e9196daf0a5b0e92d171b5227cc994103b RISC-V: Fix register class subset checks for CLASS_MAX_NREGS
bc9c8e5f8af08c513a4a4c329c50ba6559ff6d5c Extend vternlog define_insn_and_split to memory_operand to enable more optimziation.
95318d469f4d293446b4fd38d527fd5d64ce0b70 Fix RTL frontend handling of const_vectors
518f865f4babf3ab9160b37fa971e9078434f723 simplify-rtx: Fix vec_select index check
f75e56f46d45cfb2fc9bc80ffc627ccfb41ffca6 Update dg-require-effective-target for pr101145 cases
bb27f5e9ec3c7ab0f5c859d90c59dd4573b53d97 Convert arrays in ssa pointer_equiv_analyzer to auto_vec's.
6239dd05127f1dc05f13f504805d36e8ebe1c2c5 vect: Convert cost hooks to classes
5914a7b5c637c9007283226f200dcab8b745abc8 testsuite: Add more guards to complex tests
4e5929e4575922015ff4634af4dea59c59a44f10 gcc/expmed.c: Ensure vector modes are tieable before extraction
33f1d038708a793a498076c8647165613ec90661 First refactor of vect_analyze_loop
bcf4065c909bd1010208117633ca9ff84cd7b38e Split vector loop analysis into main and epilogue analysis
a79fe53d6ce6074d083e925b6b19773e45817405 Amend split vector loop analysis into main and epilogue analysis
b3a38d18351788004121e469a8b25504e4a98763 testsuite: Use posix_memalign on AIX for tsvc
6b8152b96c114f038d2ef3fc753593c414b8cdb6 powerpc: Fix vsx_splat_v4si in 32 bit mode
ae1de0bf72fca92f94a7e29f51ce4448b877db4a Update documentation for -ftree-loop-vectorize and -ftree-slp-vectorize which are enabled by default at -02.
51152076338bc60b8bda8f061be2db97ea5b78de tree-optimization/103102 - fix error in vectorizer refactoring
61a7f947cc063f92ccdaa6319f1f3894bcc8557e [vect] Consider outside costs earlier for epilogue loops
8fd2477ddc358660611f79d8e50f31ed0f3aa105 genmodes: Define NUM_MODE_* macros
abe562bb01479ea2c8952ad98714f3225527aa7e [PR/target 102957] Allow Z*-ext extension with only 2 char.
249b4eeef1fe30237acb4d8e1832243b39d61e7e Extend is_cond_scalar_reduction to handle bit_and/bit_xor/bit_ior.
5cfa174e08e4964703387aa7de5ece448cc660b8 vect: remove unused variable in complex numbers detection code.
92617a8e2af06c74e7df514d3560f246daf411e9 middle-end: Fix signbit tests when ran on ISA with support for masks.
0cf6065ce4997774de66db4de83d461013e0f0e1 testsuite: change vect_long to vect_long_long in complex tests.
4725f62789f25b17967695203d7ee821221e2dd6 vect: Move vector costs to loop_vec_info
772d76acb5aead98eb3c47a78363d867287d5e77 vect: Remove vec_outside/inside_cost fields
5720a9d5beacb558c1ddccbbfef9f9e4f91b14cf vect: Hookize better_loop_vinfo_p
6ddc6a57a74c3a388eb1626e59005f54c6e66c57 vect: Keep scalar costs around longer
0612883d9dc6eebecdbe937893b86597acae237c vect: Pass scalar_costs to finish_cost
c905e7247119878a7e360f58ed75f8a629fa5d1b lto-wrapper: fix memory corruption.
eaec20fde587e0695b100dcba5ff56944c3ae8c0 Grow sbr_vector in ranger's on-entry cache as needed.
8ed62c929c7c44627f41627e085e15d77b2e6ed4 middle-end: Add an RPO pass after successful vectorization
b0c83d59f44bf677c8d74acae228acf32719acb3 path solver: Adjustments for use outside of the backward threader.
e82c382971664d6fd138cc36020db4b1a91885c6 Allow loop header copying when first iteration condition is known.
402d28998fa35d9ffc47aa084f66f9381491eeca RISC-V: Fix wrong zifencei handling in riscv_subset_list::to_string
a11afa7af8ae496a403be9f6dac9e72a27d59466 Apply TLC to control dependence compute
a5fed4063f428a14f5b91533d5954b9bf4e3e7db middle-end/103181 - fix operation_could_trap_p for vector division
3e5a19053310ad090b930fbecebceb28bd1b91a4 Resolve entry loop condition for the edge remaining in the loop.
8865133614f09caadf48c0b7d05f0331959b3bc1 tree-optimization/103188 - avoid running ranger on not-up-to-date SSA
ef0e100f5870bbb792f378858864f915696dd232 libstdc++: Remove public std::vector<bool>::data() member
4a407d358e2896a9ab42364c0b70dfb6f9761d61 libstdc++: Fix debug containers for C++98 mode
1ae8edf5f73ca5c3bf132cc52825dc1f709499dd libstdc++: Implement constexpr std::vector for C++20
6849c71c065e599282c98f3678f22ac52d97a755 testsuite: Filter out TSVC test on Power [PR103051]
a246d7230b8f8b059b21a073e8a91c213dee9cf4 modref_access_node cleanup
e9a53a4f764c37b50aff68811c5d37fcd6f38adb libstdc++: [_GLIBCXX_DEBUG] Remove _Safe_container<>::_M_safe()
2551cd4f9bc1afee444a56e03c1cee6899593da9 [tree-vectorizer.c] Merge pass_vectorize::execute with vectorize_loops and replace occurences of cfun with function param.
220bd61874cf114667b44f9ded76ed0639eb278b tree-optimization/103237 - avoid vectorizing unhandled double reductions
9836e907c4f20ab7638a5125e63634afafc772e7 signbit-2: make test check for scalar or vector versions
59434931fb658f0a180ce3f3305cb3987ed2b56d libstdc++: Use hidden friends for vector<bool>::reference swap overloads
5888512f24121032a438e3aaf10dc93550dc2819 fortran: Reverse actual vs dummy argument mapping
395848255cfa88f6f0f33a9b14c79e584a05d6fc c-family: don't cache large vecs
206b22d021d94adbaa79e1d443c87415254b15de Remove MAY_HAVE_DEBUG_MARKER_STMTS and MAY_HAVE_DEBUG_BIND_STMTS.
1a0bce98dcf84dd0a7b3ac67b51ac68758cc7ad0 middle-end: Fix FMA detection when inspecting gimple which have no LHS.
4f0a2f5a3ddb1024b885c066a18caae4d733bb6c middle-end: check that both sides of complex expression is a mul.
dd85c42c36a5d4e00b41ed40bca98598a2fb57c5 c++/103326 - fix ICE in tsubst with VECTOR_CST
487d604b6fa0f0a981eadc216d9e481d08ed7e7b middle-end: Handle FMA_CONJ correctly after SLP layout update.
cfe8dbd9c08a5bce497646467c9d30942ec3efe0 libgccjit: Add some reflection functions [PR96889]
6cd440670078af89d82cbb67e01a5ecec8eec238 tree-optimization/103361 - fix unroll-and-jam direction vector handling
0888d6bbe97e10de0e624f4ab46acc276e5ee1d7 middle-end: Convert bitclear <imm> + cmp<cc> #0 into cm<cc2> <imm2>
c2e681059bcd7f76f13029988f133858dc82c205 jit: Initialize function::m_blocks in ctor
9e026da720091704ca0456d405f16a3bc5f3a799 Reduce scope of a few 'class loop *loop' variables
94912212d3d1be0b1c490e9b5f45165ef5f30d8a match.pd: Fix up the recent bitmask_inv_cst_vector_p simplification [PR103417]
33adfd0d42e54c809b0c53212abe66e8c874b2f8 libstdc++: Fix trivial relocation for constexpr std::vector
2acbc4eba33574a5e655c01d1be8b17fad0be535 Avoid some -Wunreachable-code-ctrl
e2521cd2d26661cfcfceaabf9bd281ef316fd3fc middle-end/103485 - fix conversion kind for vectors
30213ae9a2eb53f6bc0913919457ceae2572b019 vect: Make reduction code handle calls
e32b9eb32d7cd2d39bf9c70497890ac61b9ee14c vect: Add support for fmax and fmin reductions
0fb2ab504067ad0d2179622861dd71140b736afe vect: Pass mode to gather/scatter tests
9b577047eec65936a5299cac13dd7b73cdfc4ae4 vect: Fix vect_is_reduction
8bb81b3c4945dbae8d490e7a4054ddeb5a3b506c vect: Fix SVE mask_gather_load/store_store tests
8de7958fbd126528c5a5a95a068c0692f6a643cc vect: Use code_helper when building SLP nodes
6f798618c070e2ca505e39c3fcc0c3ca478ac81b vect: Use generalised accessors to build SLP nodes
10833849b55401a52f2334eb032a70beb688e9fc vect: Support gather loads with SLP
32ede1083fad4b68873bec3e5a775e2092d6566e if-conv: Apply VN to hoisted conversions
8af3f53d325fe4a6b1f3da64dc02d10978b9a116 vect: Support masked gather loads with SLP
a83a07557085f6da83c63e86c1cd2e719a39b8b2 Fix c-c++-common/goacc/routine-4.c and c-c++-common/goacc/routine-4-extern.c testcases
0194d92c35ca8b3aa850b805d9becb4491cf6bec tree-optimization/103489 - fix ICE when bool pattern recog fails
7057b8f8c2fbb7a2112705c2962d92b8ccef7c30 vect: Fix ncopies calculation for emulated gather/scatter [PR103494]
91c26004037db689954318d3d1c801eea18d45f4 libstdc++: Skip tag dispatching for _S_relocate in C++17
29df53fe349073a9210df70ae45662cb3f4a0556 middle-end: move bitmask match.pd pattern and update tests
1e625a44f6f3001cea31e0f7c563943ecba92b68 vect: Tighten check for SLP memory groups [PR103517]
74d14778e73dfda365b0ac71478efafd9ad91c2a libstdc++: Define std::__is_constant_evaluated() for internal use
70ece2d4ca403dfc6a837d876642378a8d4d3dce tree-optimization/103527 - always use thruth type forgather mask
06f2e7d49fc6341ea0128ccd83fd13705dd2c523 sve: combine nested if predicates
add31efdc7b0aa869cb9d83f40e274e864072b25 RISC-V: Add option defines for Scalar Cryptography
0962bff477a3d5134cb1ac23852da694529725e0 RISC-V: Add implied defines of Zk, Zkn and Zks
45116f342057b7facecd3d05c2091ce3a77eda59 RISC-V: jal cannot refer to a default visibility symbol for shared object.
c2c843849a3392654d1c2191bd9931c0fff1f8ce cse: Make sure duplicate elements are not entered into the equivalence set [PR103404]
ee01694151edc7e8aef84dc3c484469e2ae443a0 tree-optimization/103544 - SLP reduction chain as SLP reduction issue
e7fac1e1a5858abc9737518ddbdac780fd2ad8b8 libstdc++: [_GLIBCXX_DEBUG] Enhance std::erase_if for vector/deque
50e8b0c9bca6cdc57804f860ec5311b641753fbb [PR103302] skip multi-word pre-move clobber during lra
2c7fb16b5283cf90c4a7f7470e91e1010ee80fcc libstdc++: Fix ambiguous comparisons for iterators in C++20
a5f65cf7ad640ae398eba7a45c712322ce841809 pr103523: Check for PLUS/MINUS support
2f217f7218b621fd7d7fb7ac59b2ddf2e027ed4a Avoid updating hot bb threshold in call speculation code
c6756b3bc1d2af1c8e86f0ad1711e9b9134520ba Add new constant data structure.
8ccd8b12ded1782f4273fd1f381b7d554df61a12 Add LXVKQ support.
d730aa8a9ff26a36c3b480402c1507f3d2e48db9 Generate XXSPLTIW on power10.
8d443ac032ecf0d8275bb0f6838ed7c9aee4e7a5 Generate XXSPLTIDP for vectors on power10.
575ad7700f3d29d9310a778818c0c7a360f4eb1a Generate XXSPLTIDP for scalars on power10.
8f9fea41a767f6ad8cf3d521031048a2491f98b1 Add combine splitter to transform vashr/vlshr/vashl_optab to ashr/lshr/ashl_optab for const vector duplicate operand.
d5c965374cd688b0a8ad0334c85c971c1e9c3f44 middle-end: REE should always check all vector usages, even if it finds a defining def. [PR103350]
807ad4bc854caea407aaa09993e4a3220290b0f0 libstdc++: Overload std::__to_address for __gnu_cxx::__normal_iterator.
411ac94611f164fac7ec1cd5953549c0a56cf43a slp: check that the operation we're combing is a boolean operation [PR103741]
e781cb93d7d908f1f4f1611d0034eccbd1478e91 vect: Fix multi-vector SLP gather loads [PR103744]
19dcecd963295b02b96c8cac57933657dbe3234a Optimize bit_and op1 float_vector_all_ones_operands to op1.
7d5d5032c7200714388db63c7a5676b6ab3e040e Fix static array size in gcc.dg/vect/vect-simd-20.c
500d3f0a302900fba12f41c2c1eedcf0bea4ffa7 RISC-V: fixed testcase riscv/pr103302.c
d9da496a82c0ba33098d622efba34f4750c4ccb9 testsuite: XFAIL some Wstringop-overflow tests ...
b043d4f93ee8f5237c05aa8ca02df9d934556f74 testsuite: fix vect.exp ASAN errors
05da96886efa3ccdcc0e4e337ecd01b2827db213 Force_reg operand 1.
1a15451da14410bf2bd6ec8f5baba1014638c67a tree-optimization/103864 - SLP reduction of reductions with conversions
88e861655b3e59bc982ba22cd6e2e7348efae866 tree-optimization/103800 - sanity check more PHI vectorization
1021b72bf6542f3c08e5404b65063216ee1b06f7 tree-optimization/103816 - detect offset overflow in SLP group analysis
c8bdb3452054506f90283ea198a42a811679653d RISC-V: Allow extension name contain digit
e7da31ba2030b85ff0d15a0c4aac3318cb66b64a RISC-V: Minimal support of vector extensions
1f759dbdcddd5eae795da48f46edae274a431cbc Optimize V16HF vector insert to element 0 for AVX2.
a64478660ee95930773d356760e39e05fe0147fe [Ada] Read directory in Ada.Directories.Start_Search rather than Get_Next_Entry
be59671c5624fe8bf21ddb0192e97ebdfa4db381 middle-end/101530 - fix shufflevector lowering
d3ff7420e941931d32ce2e332e7968fe67ba20af [vect] Re-analyze all modes for epilogues
de0faa56a10406b50fba159957e3a3fd2f95c64b tree-optimization/103948 - detect vector vec_cmp in expand_vector_condition
4bb79e27c02c5cd57d5781bef20e70982d898c40 Extend predicate of operands[1] from register_operand to vector_operand for andnot insn.
bc0b26b9a5836dc99fe69029b6948b8a2a58a36f [Ada] Update copyright notice and bump Gnatvsn.Current_Year
2c4dccb605d485293291878397b42927dc050481 testsuite: Fix up c-c++-common/builtin-shufflevector-3.c testcase [PR101530]
016bd7523131b645bca5b5530c81ab5149922743 [vect] PR103971, PR103977: Fix epilogue mode selection for autodetect only
f45a2232bc8d6b88f52859cac502611395f3caf5 c/104002 - shufflevector variable indexing
b0e5163960eceab701a1a25dfa049e394fe5b3de vect: Add bias parameter for partial vectorization
de196e5dd8ea4d0ed01a8c265afdd3676e27545b libstdc++: Add attribute to features deprecated in C++17 [PR91260]
6d51a9c6447bace21f860e70aed13c6cd90971bd vect: Check partial vector param for supports_partial_vectors [PR104015]
5d7de2bf3b7c5ed1c929098243832b59648bcc67 testsuite: Remove executable mode from source files.
79ae13067f6afabcbae4784ada07dcbb7f00953e vect: Fix uninitialised variable PR104026
5c69acb32329d49e58c26fa41ae74229a52b9106 Rename .c files to .cc files.
e53b6e564aab615703ff2f9e8406a3953f0a3785 Change references of .c files to .cc files
00dc7877ee02634d4837d024e36b55bef6b9d49c tree-optimization/104064 - UBSAN issue in vect dataref analysis
7ca1582ca60dc84cc3fc46b9cda620e2a0bed1bb [vect] Add main vectorized loop unrolling
591b6e00d1bfe12932ca31530d5859f95db8a35a riscv: fix -Wformat-diag errors.
b1f3640912a050d1c405d01f909074659db92c7b nvptx: fix -Wformat-diag warnings
dad495e30135904b0d0305eab8c0ce5f838440d4 RISC-V: Fix use-after-free error in `parse_multiletter_ext'
fc6cd798c07a94d6b0bcc16b175e6e5d6e594c7e testsuite: Adjust possibly fragile slp-perm-9.c [PR104015]
8160b410517e1e3493d92358579d380872acb3e8 Fix tsvc test build on DragonFly.
54e33cf120dab24ce44d7d6028e6247c9489092f testsuite/102833 - fix gcc.dg/vect/bb-slp-17.c dump scanning
2aea19bdb12308aac1519ffc5ecc9d1ec24f9cc5 nvptx: update fix for -Wformat-diag
fdf31ae25f66cd486e655d7ebda36826025b9d0e Update on riscv -Wformat-diag string.
2f47a095a08bd32f0d2bcb8838615a11096fd2da testsuite: Rename a few C++ to .C or .cc.
5b6788ae5a365aecd6776f563e44022acb93a57a tree-optimization/104112 - add check for vect epilogue reduc reuse
ffc7f200adbdf47f14b3594d9b21855c19cf797a match.pd, optabs: Avoid vectorization of {FLOOR,CEIL,ROUND}_{DIV,MOD}_EXPR [PR102860]
f4ca0a53be18dfc7162fd5dcc1e73c4203805e14 vect: Fix epilogue mode skipping
ad4188f8385f86cc04806fb0e26c7da1f5f655b8 tree-optimization/104114 - avoid diagnosing V1mode lowering
8bc700f4c3fbe405413db02281ef2918bfa831fc Enhance vec_pack_trunc for integral mode mask.
7b78dee64def7e251a1d0678613c8aaabe7b176c testsuite: Add -Wno-psabi to pr47639.C testcase
68f03ac49cb4f585dbce78dc9e4c4a9ec950e83c dwarf2out: Fix -gsplit-dwarf on riscv [PR103874]
1ad72811242eb84dde1bb2e97d0804d6eabeac8a tree-optimization/104152 - add missing check for SLP constant build
f953c8bc5bf314a57a6ba347ee6f5f5e3f1dad53 tree-optimization/104156 - fix unswitching compare-debug issue
199cd0e0f8744ca1e61a95987b2d020a592a46d9 tree-optimization/100089 - BB vectorization of if-converted loop bodies
087e545747ca9ee977e84326877b0ce1bc4c383a Strengthen a few OpenACC test cases
886e9779581102caf97cd05dea80d9be87c24784 PR middle-end/104140: bootstrap ICE on riscv.
f9063d12633c62a089115df032a19295854d8b06 Mark XXSPLTIW/XXSPLTIDP as prefixed -- PR 104136
45b999f642a531c083c982dda79fa6ad65730a7c analyzer: fix ICE on vector casts [PR104159]
add6bb52e34f6036ace9f67ad8ad5b990adbc34a RISC-V: Update testcases info with new implement info
98416dbb0a62579d4a7a4a76bab51b5b52fec2cd RISC-V: Change default ISA version into 20191213
ca2bbb88f999f4d3cc40e89bc1aba712505dd598 RISC-V: Do not emit zcisr and zifencei if i-ext is 2.0
c106529eb219976426eeb9b3e47ad7f496e89b0e RISC-V: Fix testcase after bump isa spec version
2e211a02290f3b3533b56c593fc7b95edb8593b0 tree-optimization/104214 - amend PR100740 fix for pointer compares
abea1c9a252ef7712ab800360e1e0e2697ee14f2 c++: Fix up handling of vector CONSTRUCTORs with vectors in it in constexpr.cc [PR104226]
9bf217920457f2e2d46b601f24721780a20a031b c++: vector compound literal [PR104206]
833e651a76cbab26d18307fe761b609c0fa61439 RISC-V: Document `auipc' and `bitmanip' `type' attributes
9ec306582fd60e5b76f07eb81c9ed2415d9a3590 tree-optimization/104267 - fix external def vector type for call args
a1544878966020d1f7a640b35d1f7a5f0e055624 match.pd: Fix up 1 / X for unsigned X optimization [PR104280]
d43fbc7d3f7621e1c8f153c1471d2a5cd20bfdc8 [libgomp, testsuite] Fix insufficient resources in test-cases
e9bf6d6b0e1d67df6dcee042fbe37ab72c3a38d7 veclower: Fix up -fcompare-debug issue in expand_vector_comparison [PR104307]
e0451f93d9faa13495132f4e246e9bef30b51417 [nvptx] Add some support for .local atomics
57f971f99209cc950d7e706b7b52f4c9ef1d10b0 [nvptx] Update bar.sync for ptx isa 6.0
8ff0669f6d1d6126b7c010da02fa6532abb5e1ca [nvptx] Update default ptx isa to 6.3
55d83cdf23b5f284b4e0bd0a6d1af3d947b2e7c3 vect: Simplify and extend the complex numbers validation routines.
d41ba5a0533ea93786f7dbff9b6f57938abe67fe testsuite: Remove TSVC XFAILs for SVE
876e70d4681332a600492173af0c7259e5a438c6 tree-optimization/103641 - improve vect_synth_mult_by_constant
38948b77dbc16f4c6cf6cff8661bab699b306f03 Empty the base_types vector before (re)populating it
06e32a5ebf20c11dd31bc2677bede569fef84316 RISC-V: Always pass -misa-spec to assembler [PR104219]
affdeda16ef7fbd34f850443fe63bb407714297e RISC-V: Fix detection of zifencei support for binutils
12aae3b93aeae50f5ced1bbef57fe207ecd12930 AArch32: correct dot-product RTL patterns.
9d2c0fad59745bf67aa6471e8c9e96c351f0de59 analyzer: fixes to memcpy [PR103872]
3faeba72cf93bdbf0b42d6b1b65fd4f0794f9d2a RISC-V: Add target machine headers as a dependency for riscv-sr.o
5e92fddad7719f2f2cdf55f73222c4978af38f35 doc: RISC-V: Document the `-misa-spec=' option
6de582dd62dfcb18f51e3dd01cf8519a74752530 RISC-V/testsuite: Run target testing over all the usual optimization levels
871afdc512be0510cbd4fa0928e5a1bd0681766e middle-end/104450 - ISEL and non-call EH
59b31f0e2d187ebdb3d399661e22b28e4ebd8099 ICE: QImode(not SImode) operand should be passed to gen_vec_initv16qiqi in ashlv16qi3.
da2bf62d9e2a25f2d6a99176144c250b51fbdee7 tree-optimization/104445 - check for vector extraction support
4a8083285c3edf50088a095870b217ab0881dff0 middle-end/104467 - fix vector extract simplification
72f8d228aff80ede554b1735533af7eb0bd4a912 middle-end/104496 - fix vectorized_internal_fn_supported_p
84993d94e13ad2ab3aee151bb5a5e767cf75d51e c++: Fix up constant expression __builtin_convertvector folding [PR104472]
ae117af43944101ca47b99b743c85a3c528b4b4f [gimplefe] Add vector_mask attribute to get access to vector bools
9355a8c35883b5125851bb9b4169a1a1cd8e343f match.pd: Fix up (X & Y) CMP 0 -> X CMP2 ~Y simplifications [PR104499]
7e204bd2f189850cb940677c99d8d93eb7dd40cd Add vect_recog_cond_expr_convert_pattern.
3f10e0d50b5e3b3f64bc9a1a29177518d5f4468d middle-end/104497 - gimplification of vector indexing
f320197c8b495324dc6997a99d53e7f45ecf5840 tree-optimization/104511 - avoid FP to DFP conversion for VEC_PACK_TRUNC
6a0d6e7ca9b9e338e82572db79c26168684a7441 openmp: Make finalize_task_copyfn order reproduceable [PR104517]
63a9328cb8c601377fe73e214b708c4ae0441847 vect: Fix early free
754dce903ca28c4c2f2bc8614a8de5e631655f2e Restrict the two sources of vect_recog_cond_expr_convert_pattern to be of the same type when convert is extension.
12a88e6e208fa45a449775bfb9353c777a6081aa libstdc++: Deprecate non-standard std::vector<bool>::insert(pos) [PR104559]
4984f882f41be1472df6ce7c439c98c4bc4e6f08 Mark Power10 fusion option undocumented and remove sub-options.
61fc5e098e76c9809f35f449a70c9c8d74773d9d tree-optimization/104582 - Simplify vectorizer cost API and fixes
f24dfc76177b3994434c8beb287cde1a9976b5ce tree-optimization/104582 - make SLP node available in vector cost hook
2ef0e75d0bbc80bc06a0a39135e3564f907e39c8 Implement constant-folding simplifications of reductions.
d669237f7d56d83b3c7bc12a957db22b3c410b43 Dump def that we use for a splat
54f745023276e5025e34b2cc22530c78423a93cb Get rid of 'gcc/omp-oacc-neuter-broadcast.cc:oacc_build_component_ref'
6e80c4f1ad9046b0a7c105660cc7b3dcae0fdb8f tree-optimization/101636 - CTOR vectorization ICE
aee1adf2cdc1cf4e116e5c05b6e7c92b0fbb264b analyzer: handle __attribute__((const)) [PR104434]
8645370af18979123d9e94e3ed215d23dd740721 RISC-V: Document the degree of position independence that medany affords
f62115c9b770a66c5378f78a2d5866243d560573 match.pd: Further complex simplification fixes [PR104675]
75ce477306a205635b8dd0f37801c05396fd443e testsuite/104728 - constrain gcc.dg/vect/pr81196-2.c
1a0e3bba4b735fa8e4463d52950d0ce9c30c16c7 warn-access: Fix up check_pointer_uses [PR104715]
d7b4c8feee11ea04b83f9996654c96b130588570 testsuite: Fix up pr104637 testcase [PR104637]
ced22c51baaa3fe84d14d5baef60c4440a35b4be vect: add vect_float to pr102819 tests
8fede2876a751d53a28442dcca32466daa929daa rtl-optimization/104686 - speedup IRA allocno conflict test
38c1731193fe12d951f3010880406505507d90c1 testsuite: Add -Wno-psabi to pr104505.c
5706a5db88a0eeaf82071debe1364f4533896a65 libstdc++: Use non-debug vector in constexpr test [PR104748]
07395f19dff610f03d1b1d30c8bd640f610c45dc Test '-fopt-info-omp-all' in 'libgomp.oacc-*/kernels-private-vars-*'
e28eb86c18ed765dceb3c56471a848e9f0e120ff Test 'libgomp.oacc-*/kernels-private-vars-*' with '--param=openacc-kernels=decompose' [PR104784]
8ea4a34bd0b0a46277b5e077c89cbd86dfb09c48 PR 104732: Simplify/fix DI mode logic expansion/splitting on -m32.
5db1d7f143c77543ae7a6c4649af3e611061e0d9 tree-optimization/104782 - adjust PR101636 fix
027e30414492d50feb2854aff38227b14300dc4b Fix up duplicated duplicated words in comments
5f07095d22f58572c06997aa6d4f3bc456e1925d vect: disable bitmask tests on sparc
058d19b42ad4c4c22635f70db6913a80884aedec tree-optimization/84201 - add --param vect-induction-float
1c7b110e1e44da0c93d0d011f5109c5d09bf4399 vect: fix out-of-bound access in supports_vec_convert_optab_p [PR 104851]
4470e813b0b46d2e579b9e3d69a41a7192709c50 testsuite/104759 - adjust gcc.dg/vect/vect-multitypes-12.c
7a5e036b61aa088e6b8564bc9383d37dfbb4801e [OpenACC privatization] Analyze 'lookup_decl'-translated DECL [PR90115, PR102330, PR104774]
ee34ffa429a399f292ad1421333721a92b998772 tree-optimization/102943 - use tree form for sbr_sparse_bitmap
e671e48e352ee278d816d4633146208807a0e403 ipa-cp: Avoid adjusting references through self-recursion (PR 104813)
69619acd8d9b5856f5af6e5323d9c7c4ec9ad08f target/104762 - vectorization costs of CONSTRUCTORs
3cb27b85a7b977958d53e1a29596ba211d21dde2 Fix DImode to TImode sign extend issue
98afdc3e2bfccf0a1337013b54f2c5634ef40ee5 riscv: Allow -Wno-psabi to turn off ABI warnings [PR91229]
eb4f83d1f100cae0cb66c6e6b4d67f5e53d3da51 RISC-V: Handle combine extension in canonical ordering.
2a5fabeb2faffa671e9b0984ce3a6f76153d23d4 RISC-V: Add version info for zk, zkn and zks
ac73c944eac88f37db2767aa4acc7ff6f4983f21 libstdc++: Reduce header dependencies from PSTL headers [PR92546]
a9131a329a92074decb91a69e70480a431918e4a testsuite: Add missing <vector> header to test
5177634148aab7a7b193eaa9b8c73ce00a38c481 RISC-V: Implement misc macro for vector extensions.
85b4d881327e31ae7d2bd4072dcbe425db30f8fe Fix memory leaks
0b0fc52b0412cc1608f4f0edb8a0ab2495619c4e middle-end/105049 - fix uniform_vector_p and vector CTOR gimplification
fe705dce2e1e3e4e5e0c69d7f9adaf7f2777cdc8 tree-optimization/105053 - fix reduction chain epilogue generation
1806829e08f14e4cacacec43d7845cc2dad2ddc8 c++: Fix up __builtin_{bit_cast,convertvector} parsing
b6cccf88cb65043c20a020e4decf249a78180175 testsuite: fixup pr97521.c and pr96713.c on i686-*
871266756c7aa6a68e36b89d8d56e3fa593cca5b Disable gathers for znver3 for vectors with 2 or 4 elements
065e25f6331c130bc3cd2ce78036f2328adb3d71 [libgomp, testsuite, nvptx] Fix dg-output test in vector-length-128-7.c
f6b786d749812542dae90db1701a3cfdccfa1e4b d: Compile simd_ctfe.d only on avx_runtime or vect_sizes_16B_8B targets
eaaf77dd85c333b116111bb1ae6c080154a4e411 middle-end/105140 - fix bogus recursion in fold_convertible_p
3eda57b4ae50b5fe57c174556f1daf3bd9a46b09 tree-optimization/105132 - add missing checking in vectorizable_operation
6d4bbee4f59c7102f8ed9b6774f0b2d9f6ff4365 Support pandn for V1TI mode (i.e. *andnotv1ti3).
d037d9ad323ec9eef3e50c6e2cbc1e31191daa5d vect: Fix mask handling for SLP gathers [PR103761]
d9421784980276b42ecdce85b6dde28e965c88c6 c++: vector compound literal [PR105187]
176df4ccb58689aae29511b99d60a448558ede94 IBM zSystems/testsuite: PR105147: Skip pr105140.c
897b080e6d91095ed5f97115bde8daed8961a508 testsuite: skip PR103350 tests on big-endian
fdd81afcf18d1a926d81d63cc4525fc9442aa9a5 testsuite: enable fast-math-complex-* testcases.
68163cc2de1d3125ed9dbb8eac3294d1f9118641 testsuite: delete slp scan from loop vect test.
7e7a96f774ed892e5cef53fcb68297cd0d513820 c++: use after free during name lookup w/ modules [PR99479]
b789c44c6463452900f7b1e6d2a0af6567534bfc tree-optimization/105175 - avoid -Wvector-operation-performance
78c718490bc2843d4dadcef8a0ae14aed1d15a32 middle-end: Prevent the use of the cond inversion detection code when both conditions are external. [PR105197]
7d25f9b6f1e3c72149868fd66d5a3aac429ecb83 RISC-V: Sync arch-canonicalize and riscv-common.cc
0df39b08037f78dfc53c3c4e6c09b3babe6ee0f8 libstdc++: Move Filesystem TS path definitions out of class body
4132f6ba9583e128a00d55961ae8c8e7245b2223 RISC-V: Support -misa-spec for arch-canonicalize and multilib-generator. [PR104853]
62d5bb0f35fb6ec373eaac942755585a633528a0 tree-optimization/105226 - avoid splitting abnormal edges
ac8340ee4d1e65f3fd41c547b16895875f4aefa7 tree-optimization/104912 - ensure cost model is checked first
4e892de6774f86540d36385701aa7b0a2bba5155 tree-optimization/105250 - adjust fold_convertible_p PR105140 fix
d2f8208e9add01fe10ee56307cc79631b9995f74 libstdc++: Fix missing and incorrect feature test macros [PR105269]
b209a349268d245f7a318861112df47bea15b89d analyzer: fix ICE comparing VECTOR_CSTs [PR105252]
3fc22eedb033cbff1bf5a70c6a032d3c5ce2d867 libstdc++: Default to mutex-based atomics on RISC-V
353434b65ef7972172597d232ae17022d9a57244 tree-optimization/104010 - fix SLP scalar costing with patterns
36f1de95a61132f63c0c07ef154abd9f435721ac tree-optimization/105312 - fix ISEL VCOND expansion
4d4eaa77a7d27bf7b220c3be79615410c873fcf1 tree-optimization/104912 - ensure cost model is checked first
c049f638da4f7b32b11e4d895184e0960bae5291 fortran: Fix conv of UNION constructors [PR105310]
7964ab6c364c410c34efe7ca2eba797d36525349 fortran: Use pointer arithmetic to index arrays [PR102043]
1ba397e9f93d3abc93a6ecbabc3d873489a6fb7f c++: __builtin_shufflevector with value-dep expr [PR105353]
7d31c678d68d7b6820a958584619ca763b0eb9c5 ifcvt: Improve noce_try_store_flag_mask [PR105314]
f27848a5dc4d3b16cd4112bddcb59e0916eba623 tree-optimization/105219 - bogus max iters for vectorized epilogue
7259481f0ece6283a6e2943448e8d28ffffc40f9 tree-optimization/104322 - remove dead code in vectorizable_reduction
6ccc4356e7c5b4ca69d2029898a6439bb735cbc5 Prefer global range info setters that take a range.
c090743b2ae0095f792371c7cbeb3cf6e2978f5d Fix is_gimple_condexpr vs is_gimple_condexpr_for_cond
3a3eda000fdf4f8754c9a2535191091f1db0c2a2 tree-optimization/105437 - BB vect with extern defs of throwing stmts
41e3db05d697405256b6002d8432955a93d249f1 tree-optimization/104240 - SLP discovery with swapped comparisons
404edfce683cb1801b052ee7c8d45d603c392e08 testsuite: vect: update unaligned message
dfae0c5a29f336cdab234b28999f9ba9dc20a4d0 tree-optimization/105394 - vector lowering of compares
3ae5cbff1ad958ddefc12010bf7e32a47741d331 Fold more vector constants early
52b7b86f8c72eb19e637f1e72ffd10f39b8cb829 tree-optimization/103116 - SLP permutes and peeling for gaps
eca04dc8555f5fae462fbd16386da9aaf38a0711 tree-optimization/104658 - avoid mixing mask & non-mask vector defs
938a02a589dc22cef65bba2b131fc9e4874baddb tree-optimization/104595 - vectorization of COND_EXPR with bool load
000f4480005035d0811e009a7cb25b42721f0a6e testsuite/105486 - adjust testcase to avoid misaligned accesses
ee9128189623ce43343ce326caa8d5eec2eccfec c++: wrong error with MVP and pushdecl [PR64679]
469c76f0d94d03e29467a9d1e77cd3613f46ac2f libstdc++: ppc: conditionalize vsx-only simd intrinsics
e4e053a63b153039a7905901806a4f4a3154988b vec: fix iterate comment
27239e13b1ba383e2706231917062aa6e14150a8 RISC-V: Fix wrong expansion for arch-canonicalize
60ab3d0f2d9f95045543fea361e976351e76b5a1 Fix internal error with vectorization on SPARC
9ddd44b58649d1d1e932c1e95dc00d654733c1fc RISC-V: Provide `fmin'/`fmax' RTL patterns
9e1e962eac8d2a28fcd648a0f5c8eb0022abd8e4 opts: do not allow Separate+Joined ending with =
8585185cc4de3a9268af6afc42a0e86b7ba72b12 testsuite: Update Wconversion testcase check type.
ce19ac123abde3d9c52d52e13a00bbbe60e08722 [Ada] Remove front-end SJLJ processing
995060aa5eb85a9a6d06c5cf9e87650522ccee3f testsuite: PPC vector double requires VSX
3e948d645bc9086eee28407fcc67d05b3450bb78 c++: tighten TMPL_ARGS_LEVEL macro
8ab4b484153031c407b7d8c760b6a2605da1199a Strip of a vector load which is only used partially.
ba2068893c37deaa418d9b2126414f6824e66655 Make gimple_build main workers more flexible
602a3161f425ee3fe325413eeab9792e8e07a2ff Clear killing defs when resetting the path in path_oracle.
dc32901a0221a43e121591b9819b4e33bcc2fd0a testsuite: opt: Fix const7.C for RISC-V.
010af1040bcf4870c8f1aac88a7b1538f622858b testsuite: btf: Fix btf-datasec-1.c for RISC-V
16f7fcadac19dabd04a5abbe6601df52d22e9685 RISC-V: Implement C[LT]Z_DEFINED_VALUE_AT_ZERO
ca32b29ec3e92dcf8dda5c2501d0baf9dd1cb09d Use more ARRAY_SIZE.
6f5b06032eb9e3085611b2e14ca040af465930c1 Finish gimple_build API enhancement
8b49556e4ee617e0920a9335685c7961971c3d0a [Ada] Fast implementation of floating-point mathematical functions
3b4daa0b3c3d8eb2ac3b40ad6898f314ed4d7919 pointer-query: Fix ICE with non-pointer param [PR105635]
8ccdc7ce33f5e7ca509e5b9f835ed4719db21ffd libstdc++: Ensure pmr aliases work without <memory_resource>
570fbf448d126f1e4b3ef55327c3ea3ab0d3a806 testsuite: Skip vectorize tests for PRU
075fb873c264a030f56793cb162c9fdecbdd1773 RISC-V: Fix canonical extension order (K and J)
68e0063397ba820e71adc220b2da0581dce29ffa Force the selection operand of a GIMPLE COND_EXPR to be a register
19dd439389be2c5eb6b986d164760e061ba01938 Remove is_gimple_condexpr
ef85d150b59637b6eb116947c1d29e97d562e7db RISC-V: Enable TARGET_SUPPORTS_WIDE_INT
b646d7d279ae0c0d35564542d09866bf3e8afac0 RISC-V: Inhibit FP <--> int register moves via tune param
4665cfbc4c70e24b4c885338577d4b7bc1752473 tree-vect-slp-patterns.cc: add 'final' and 'override' to vect_pattern::build impls
23c738bcba78a9df2259dd0626669c9a0aa04d1e RISC-V: Add mininal support for Zicbo[mzp]
3df3ca9014f94fe4af07444fea19b4ab29ba8e73 RISC-V: Cache Management Operation instructions
d44e471cf041d5a304f2b2bbc7d104fa17f0e9da RISC-V: Cache Management Operation instructions testcases
793f847ba7dbe7638f1c27178868edbefd3a8108 PR tree-optimization/105668: Provide vcond_mask_v1tiv1ti pattern.
ae8decf1d2b8329af59592b4fa78ee8dfab3ba5e Add new parameter to vec_perm_const hook for specifying operand mode.
5af22024f62f1f596a35d3c138d41d47d5697ca0 Fix profile count maintenance in vectorizer peeling.
63f198553d3940495bfaa49da30b2ce93375c916 RISC-V: Don't unconditionally add m,a,f,d in arch-canonicalize
7915f6551343e0868784c2a7945fdac42ed498d3 RISC-V/testsuite: constraint some of tests to hard_float
d8474337a0b2bf1b3c84863957cef1da92811ffe Revamp irange_allocator to handle vranges.
45c8523dd3e50daa5f0bba040099fdfd2ad1aaaa Convert ranger and clients to vrange.
a743a72714fc4a9d7036d28d0cacdf2a3621f629 DSE: Use the constant store source if possible
08afab6f8642f58f702010ec196dce3b00955627 tree-optimization/101668 - relax SLP of existing vectors
878043af338c3b49f7848f3b73938cfa75a97393 [Ada] Fix iteration on formal vectors
4e72ccad80d69a76d149fba59603b8173fffe8fe RISC-V: bitmanip: improve constant-loading for (1ULL << 31) in DImode
63eab5d5775da6c656f3527ad974b7dc25f5ad5e Update document for VECTOR_MODES_WITH_PREFIX
5e005393d4ff0a428c5f55b9ba7f65d6078a7cf5 Disparages SSE_REGS alternatives sligntly with ?v instead of *v in *mov{si,di}_internal.
269edf4e5e6ab489730038f7e3495550623179fe Update {skylake,icelake,alderlake}_cost to add a bit preference to vector store.
702a11ade2e87515a7dda1d1c028217bfe28e609 RISC-V: Use a tab rather than space with FSFLAGS
4c334e0e4ff05d3a7ca9ebb832428c446cd0ae8d c++: Fix up ICE on __builtin_shufflevector constexpr evaluation [PR105871]
fddb7f65129a12dabb5ddc3c8082fe576f4af451 Disable generating load/store vector pairs for block copies.
033e5ee3c4a2c841ff24e3bf3fc5324ea9cc373c testsuite: Add -mtune=generic to dg-options for two testcases.
f8baf4004ef965ce7a9edf6d2f5eb99adb15803a Add a general mapping from internal fns to target insns
72b185189f914a412ae39776cd284dfaeaf2213b RISC-V: Reset the length to the default of 4 for FP comparisons
f907cf4c07cf51863dadbe90894e2ae3382bada5 vect: Move suggested_unroll_factor applying [PR105940]
4bf0dcb0492c40be7e0603b13a8b5949609388dd RISC-V: add consecutive_bits_operand predicate
0247ad3e0f4a574273b42344fbaa9346599948f9 RISC-V: Split slli+sh[123]add.uw opportunities to avoid zext.w
4b1a827f024234aaf83ecfe90415e88b525d3969 Fix ICE in extract_insn, at recog.cc:2791
acb1e6f43dc2bbedd1248ea61c7ab537a11fe59b Fold truncations of left shifts in match.pd
9d2fe6d427b37755410bb4eb4ecce8382f2ebfc5 Revert recent internal-fn changes [PR105975]
1089d083117f28f3518f5ec3c7a153236cb92334 Simplify (B * v + C) * D -> BD* v + CD when B,C,D are all INTEGER_CST.
b18e5d7e5f9df69759f0fbc2bed91d5e51313e79 RISC-V/testsuite: Fix pr105666.c under rv32
d6b423882a05d7b4f40ae1e9d942c9c4c13761b7 RISC-V: Supress warning for comparison of integer expressions of different signedness
a284fadcce8ef443cc3cc047a8017745efb51758 c++: Use fold_non_dependent_expr rather than maybe_constant_value in __builtin_shufflevector handling [PR106001]
970b03c0037549a571ecea9afa41de78eb859b3a RISC-V: Fix a bug that is the CMO builtins are missing parameter
9f55aee9dca759da84afd4563ff72d3ca8ab8a1c Add operators / and * for profile_{count,probability}.
86882d9feb6a534325d7162216696266898e36d0 vect: Respect slp decision when applying suggested uf [PR105940]
98b6e62cf5e7d477b5797084da59561f6d018668 RISC-V: Add -mtune=thead-c906 to the invoke docs
038b077689bb5310386b04d40a2cea234f01e6aa data-ref: Improve non-loop disambiguation [PR106019]
509cdb441614eab2a0fe90a970a927538b832bcd testsuite: Compile slsr-39.c without vectorisation
91418c42089cd1cbe71edcd6b2f5b26559819372 d: Add `@register' attribute to compiler and library.
f21f17f95c0237f4f987a5fa9f1fa9c7e0db3c40 Fortran: fix checking of arguments to UNPACK when MASK is a variable [PR105813]
8c99e307b20c502e55c425897fb3884ba8f05882 Convert DOM to use Ranger rather than EVRP
725793af78064fa605ea6d9376aaf99ecb71467b Add 'final' and 'override' to opt_pass vfunc impls
b93ae1a01bbad59ee77b7c84f4743a730138ba87 d: Add SIMD intrinsics module and compiler built-ins.
329bef49da30158d30fed1106002bb71674776bd d: Fix error: aggregate value used where floating point was expected
0f6eef398045deb2a62d18b526831719c7c20c8a testsuite/102690: Only check warning for lp64 in Warray-bounds-16.C
2e9b2ab3b5bf6e4a0bdabfeb7358206b18253e3c [Ada] Update the documentation of functional containers
d2a898666609452ef79a14feae1cadc3538e4b45 Put virtual operands into loop-closed SSA
483bd9a02831d9cb615179e5758946f41622d6c9 Use default lower bound for vector types in debug info
10b502fb78351a4073b6682c026a92c82d3da6c5 Keep virtual SSA up-to-date in vectorizer
3769ad4ccea9589b3f7edaef901cb542aa10f49a Revert update-ssa assert in vectorizer
76c3041b856cb0495d8f71110cd76f6fe64a0038 vect: Use sdot for a fallback implementation of usdot
7f4028ae9bbbd35bff34738d5e2f9b6810242ba7 Maintain LC SSA when doing SVE vectorization
1a6e0d8252a71c61d4dc616044fb25b5ac2cfffb tree-optimization/106196 - properly update virtual SSA for vector stores
1d2aa262482fc9b23201200ca82aa3b8659b072e Provide a relation verification mechanism.
d89fa97ff318b1f892e2629c5a249313872a01b1 lto-plugin: use locking only for selected targets
f7854e2faf7640230062dec3596e71773ca500ed middle-end: don't lower past veclower [PR106063]
cf3a120084e94614a4917f71940325cd4b537f24 tree-optimization/106226 - move vectorizer virtual SSA update
79f18ac6b7ab7744fcf8937ea4bc0c40f3efc629 tree-optimization/106228 - fix vect_setup_realignment virtual SSA handling
415d2c38edadf97950eb14b8d7e6b1491c98cdd5 tree-optimization/106228 - fixup last change
e7a7fed818d238d45b18dfd927cde93b4711052d vect: Restore optab_vector argument [PR106250]
9b06b9d23799ecad5db710e80f214fac0ae175f3 Remove create_lcssa_for_virtual_phi and uses
00eab0c654e09c8a0f1b1a3b1c7bff8764e64991 Add internal functions for iround etc. [PR106253]
351659f8dc80f1faaefae9fec2eab30c24ff282d [Ada] Revert recent change in debug info for vector array types
7df79970bfec96e186cd50ac951f7017c2109a13 RISC-V/doc: Correct the name of `-mriscv-attribute'
fa16bb8ac0aba681bc9242f9a9717824c4867f91 RISC-V/doc: Correct the formatting of `-mstack-protector-guard-reg='
e9ee752bbe2cc5632b803b01dc7c98ff214aede9 RISC-V/doc: Add index references for `mrelax' and `mriscv-attribute'
f9d4c3b45c5ed5f45c8089c990dbd4e181929c3d Lower complex type move to enable vectorization for complex type load&store.
78d5e125c008d87cb2e1c08a9ff2a02d4214ffcf Move pass_cse_sincos after vectorizer.
5f59d0f2d9fa921c04d75c39592e603cfa2b1324 Improve SLP codegen, avoiding unnecessary TREE_ADDRESSABLE
6877993c4da49315151e9d912408480070144dd3 Add alias disambiguation for vectorizer load/store IFNs
375668e0508fbe173af1ed519d8ae2b79f388d94 tree-optimization/106379 - add missing ~(a ^ b) folding for _Bool
605b64251c78f29da32ed807413971339f27d13b Extend 16/32-bit vector bit_op patterns with (m,0,i) alternative.
3c4af0f0549a07799d76e9e48d3d3bd85197b92a tree-optimization/106387 - properly create SSA name for realigned load
0bc1566dec0cab9410723c96d2ef3280fdab8e8e testsuite: Add -Wno-psabi to pr94920 tests [PR94920]
cc078cf85295ec5d0a63a16afbd045efac0d455e opts: Add an assertion to help static analyzers [PR106332]
98cf74a2ad893d26de81911e571b634a282a61aa RISC-V: Add RTX costs for `if_then_else' expressions
3cf07cc5e51c833f39f5bad5ca6fbe23c853a214 RISC-V: Remove duplicate backslashes from `stack_protect_set_<mode>'
94f5a8f0d4910be2d861f7a9699e93efd609d042 RISC-V: Split unordered FP comparisons into individual RTL insns
b234f5240cafe63c124a8457015aa0447d6db525 Avoid vect_get_vector_types_for_stmt
b64e937ccde286278743e8fdffea494faa46c214 openmp-simd-clone: Match shift types
1e4a8c782e5574ed5ee0ea24d869a118a441bf0a Do not enable -mblock-ops-vector-pair.
2f17f489de47d46626ed85804c3b810547ef550e PR106342 - IBM zSystems: Provide vsel for all vector modes
ffe4f55aa1bb18cc2793a4335450f34c33c9d01c [RSIC-V] Fix 32bit riscv with zbs extension enabled
cc01a27db5411a4fe354a97b7c86703c5bc81243 middle-end: Allow backend to expand/split double word compare to 0/-1.
190776773516955df480bfa75731c34c5aaf2306 c++: Add support for __real__/__imag__ modifications in constant expressions [PR88174]
5239e2bd48fb1e6a1d1b06a1bac49bee0a742e98 vect: Don't allow vect_emulated_vector_p type in vectorizable_call [PR106322]
e230261073950e554319f56716d2b17c09a28658 soft-fp: Update soft-fp from glibc
27d68a60783b52504a08503d3fe12054de104241 RISC-V: Support _Float16 type.
bd159a7660bf1cac2b884ffbf6667bb64189017f RISC-V: Support zfh and zfhmin extension
c352361b5eec003d5f26feaf1ef58a0c55f659ad RISC-V/testsuite: Restrict remaining `fmin'/`fmax' tests to hard float
3496ca4e6566fc3c5f1093a0290bb88c34d368f8 RISC-V: Add runtime invariant support
03119249b9cfedb48e910b8df6a832b206cced2b gcov-dump: properly use INCLUDE_VECTOR
7f5ec900e53f6c7f7c06c641b4fb303ebdc83785 RISC-V: Standardize formatting of SFB ALU conditional move
e66cf626c72d5872fc3181e81535afbff7263287 Improve uninit analysis
21e7d87a901d45f0cb5e5510d22bfbdb0d0ac6a1 middle-end: Fix issue of poly_uint16 (1, 1) in self test
72886fcc6269531bbf3d9a09b3d64644963bff0d libstdc++: Implement std::pair/tuple/misc enhancements from P2321R2
cb2daf5acce003300ee948a89860c0d13ebcae79 Fix PR 106600: __builtin_bswap32 is not hooked up for ZBB for 32bit
e5e6983c3da53729e58a32af1d531ea74b3dbf5d Fix PR 106601: __builtin_bswap16 code gen could be improved with ZBB enabled
dec5faa2b2f0d311daa6defd4b4f3c1965748ddf Fix PR 106690: enable effective_target_bswap for RISCV targets with ZBB enabled by default
43e741478e3db0f319246475a585af51291b0101 [RISCV] Move iterators from riscv.md to iterators.md
3f9061d95d5835ef0d3c46de1076d62d27513e6b [RISCV] Move iterators from bitmanip.md to iterators.md
7770e0ad8f4bcd2c7852fa88eb7d5235f68a811d [RISCV] Move iterators from sync.md to iterators.md
380b8fd96e10c45ce8470b906037cf487ac3f91f [RISCV] Add the list of operand modifiers to riscv.md too
473d7aad848fe6ec151e7445e06c6e06ee4bd576 [RISCV] Add %~ to print w if TARGET_64BIT and use it
b7d4b734f2d81eccb67903e4fa8f94249238d39c [RISCV] Use constraints/predicates instead of checking const_int directly for shNadd patterns
95989ab39bbedd34e6f508de3109cb5c17db433e [RISCV] Use a constraint for bset<mode>_mask and bset<mode>_1_mask
2c721ea9473ad7615bb47b66509097bd254bb839 [RISCV] Fix PR 106586: riscv32 vs ZBS
2a5549f1cc8a6ac58a7b19613e788ec5c41ac89c [RISCV] Add constraints for not_single_bit_mask_operand/single_bit_mask_operand
df5204ddd4b8e3a2d02bb3ad5bcdb9d636b02537 [RISCV] Fix PR 106632 and PR 106588 a few constraints in bitmanip.md
388f1a8cf0851854cc4d2ee99ed85600f0822afc Don't gimple fold ymm-version vblendvpd/vblendvps/vpblendvb w/o TARGET_AVX2
b842690086b588349637125c114d5fdcbb79531f RISC-V: Add RVV instructions classification
31380d4b7925912b9c34afe8cdb8dffe6cd50b94 RISC-V: Add RVV registers
7b9b6969a99725a171ee0ad4006cc39b0f7abf77 RISC-V: Suppress -Wclass-memaccess warning
25c2a50cc343eb7c2500b69a6556551d5221393f vect: Tighten get_related_vectype_for_scalar_type
5edc67b773372bf013f98a357912381d99de65f5 Split code out of vectorizable_slp_permutation
5551501e84dd51b569801c0e52b24f9e30124166 Split code out of vect_transform_slp_perm_load
2bac880a19633b96608548b412739379df1c10dc Make graphds_scc pass the node order back to callers
8c6952abc8ceff1a25b78506315959240cb73d41 Rearrange unbounded_hashmap_traits
61c4c989034548f481d1f10198447be27fb9a55f Extend SLP permutation optimisations
f134a25ee8c29646f35f7e466109f6a7f5b9e824 omp-simd-clone: Allow fixed-lane vectors
15433c214df295f2281a90fcf283355b21beca0e vec: Add array_slice constructors from non-const and gc vectors
a99b53f7e1860b96b67f069eb7965fcbac6594f6 middle-end: Fix unexpected warnings for RISC-V port.
68c61c2daa1f3e4c4c9fbe166f001b7531ffaa4f vect: Fix stray argument in call to dump_printf_loc
4d5660907c2b4c301fcbdc3dc713879fa31afec0 libstdc++: [_GLIBCXX_DEBUG] Add backtrace generation on demand
e9f827d79102001d5f0593f0f9e01ab72b2aec9a RISC-V: Fix riscv_vector_chunks configuration according to TARGET_MIN_VLEN
45f1287268200ffd551faca83d5e819b279ade9f RISC-V: Fix comment in riscv.h
e8089aff3602447cd66ea723802d43cec4e7ec02 RISC-V: Add RVV constraints.
8fe75147a948ceab6fb9afbe0ee698517ce1dda0 RISC-V: Add csrr vlenb instruction.
e8c83ab9d5142a305bbd75c7ff0e41eae38433df RISC-V: Add vector registers in TARGET_CONDITIONAL_REGISTER_USAGE
ca8f4e8af148694ae2fd444a0cdcf713910d23fd middle-end: Add MULT_EXPR recognition for cond scalar reduction
953e08fde44a596e4ec2491efd15cd645e1ddc48 Fix up dump_printf_loc format attribute and adjust uses [PR106782]
d2694766dcfff0278fa93d581340a10b150c0f44 vect: Try to remove single-vector permutes from SLP graph
7e0db0cdf01e9c885a29cb37415f5bc00d90c029 STABS: remove -gstabs and -gxcoff functionality
5ca9980fc86242505ffdaaf62bca1fd5db26550b Add TARGET_COMPUTE_MULTILIB hook to override multi-lib result.
d72ca12b846a9f5c01674b280b1817876c77888f RISC-V: Implement TARGET_COMPUTE_MULTILIB
eab511df13ca6abb24c3c2abb0f420a89c91e310 vect: Ensure SLP nodes don't end up in multiple BB partitions [PR106787]
67b6d1be0623de1a8aa32fe249bfa0129c55b11a vect: Use better fallback costs in layout subpass
d5ad6f8415171798adaff5787400505ce9882144 d: Fix #error You must define PREFERRED_DEBUGGING_TYPE if DWARF is not supported
77e8e405a770bc40b304cfa55081575cf88f2b31 RISC-V: Support Zmmul extension
ae97ba1efcd66d73d3631addf4c09f55e12d34f5 RISC-V: Fix division instructions for `m` with `zmmul` extension.
0bd514107de7b0f643aa72554b3bdb5aeb5aa0f5 openmp: Be consistent on parsing offsets between normal sink vector and omp_cur_iteration - 1
e33e61d417eb5e981bb7d709f8681a2f55ed518a tree-optimization/106841 - gather and hybrid SLP
e55674b86a10e695cea2f45c0472402b97cc2dfb tree-ssa-forwprop.cc: Adjust res_type when operands have differing vector lengths.
0a4a2667dc115ca73b552fcabf8570620dfbe55f tree-optimization/106754 - fix compute_control_dep_chain defect
c13223b790bbc5e4a3f5605e057eac59b61b2c85 Extend vectorizer to handle nonlinear induction for neg, mul/lshift/rshift with a constant.
338a5b0d7da84ef1f6c01dd96abf2c6bc830f403 vect: Fix scalar stmt typo in vect_optimize_slp_pass [PR106886]
6aafd6b797d823fa4e888c36e08f9577137809c6 RISC-V: Suppress build warnings
93b09bf3246f413b8e469ebfd8ce43947c0073a6 Check another epilog variable peeling case in vectorizable_nonlinear_induction.
e3c4a86e6b98b334b1a20f2529e6c59f6e19f73d RISC-V: Don't try to vectorize tree-ssa/gen-vect-34.c
d0c73b6c85677e6755b60fa02d79a5c5e1a8eacd Support 64-bit vectorization for single-precision floating rounding operation.
a8bb495a5627bba44407dedbe38653bb0432d811 replace "the the" typos
4a773bf2f08656a39ac75cf6b4871c8cec8b5007 vect: Fix missed gather load opportunity
1005c89431cc78a68762643e1bc7249c3959927e vect: Fix SLP layout handling of masked loads [PR106794]
eddbb81f1254f025d6f1b6b8e7554aa9a3830302 Don't check can_vec_perm_const_p for nonlinear iv_init when it's constant.
cbaa0ed34e1429dd9861350532534a85a07d220d Fix typo in floorv2sf2, should be register_operand for op1, not vector_operand.
4bdf739f835520ccbc433dc9eac461895741f317 tree-optimization/99407 - DSE with data-ref analysis
b4feb49cf308b344fba6a72137df58de382fcb9d RISC-V: Support poly move manipulation and selftests.
b2fe02b476afc1cddb3abcf26ec4b1e072a9401b RISC-V: Add RVV machine modes.
7d4df630c6cfb1909288a2796ec2f8b9ec4e8486 RISC-V: make USE_LOAD_ADDRESS_MACRO easier to understand
323c38c915f34883439e9e53b9eac5fe07cb8378 Fix typo in chapter level for RISC-V attributes
1b74b5cb4e9d7191f298245063a8f9c3a1bbeff4 [RFA] Minor improvement to coremark, avoid unconditional jump to return
78bc6497fc61bbdacfb416ee0246a775360d9af6 Fortran: error recovery while simplifying intrinsic UNPACK [PR107054]
03f3365742a9341992f0c8fc751e2d143e49f95d RISC-V: Add ABI-defined RVV types.
f758d447d7f4699253c9f8ee345ba9b8357cdb22 Check nonlinear iv in vect_can_advance_ivs_p.
32f86f2b54dc97cb6a40edef421b6a30c3bd1c04 RISC-V: Add '-m[no]-csr-check' option in gcc.
75c0899493cd84e64bd30210e848d0d1e9979494 RISC-V: Support -fexcess-precision=16
4dcd340ebaae8213eeae89894b5ecdf61b0eb100 Document -fexcess-precision=16 in tm.texi
48960b6897e6e7749def5370119aa4888ccf54b1 vect: while_ult for integer masks
18f176d0b25591e2880bc5ef453ce0834f9e0e2a libstdc++: Mark headers that must be hosted as such [PR103626]
7cc9022f8d5c5cc02cc4f8af2f27184a81536fcf libstdc++: Disable hosted-only tests [PR103626]
b77bcdf445685f28dae9e42b69e006801d653001 RISC-V: remove deprecate pic code model macro
7d935cdd1a6772699ec0ab4f93711928ca4d30a1 RISC-V: Introduce RVV header to enable builtin types
49192c41de94b2746cd33366134b6aeaefa6ca2a c++: lvalue_kind tweak
146e4591403239d662f36cab2d8b78a47cd01bd2 libgcc: Decrease size of _Unwind_FrameState and even more size of cleared area in uw_frame_state_for
684d238b8cd7e8222d9e66457815f2a63178730b RISC-V: Add newline to the end of file [NFC]
99e9796ca1e9afcf820214353756a9a140d89be3 RISC-V: Adjust testcase for rvv/base/user-1.c
d0bbecb1c418b680505faa998fe420f0fd4bbfc1 RISC-V: Add riscv_vector.h wrapper in testsuite to prevent pull in stdint.h from C library
1627d05240da3b1a985b1b2006b7a9f562fe9d43 RISC-V: Add missing vsetvl instruction type.
d2efb10a19b3948e48a2d9273b294db4e1d65296 RISC-V: move struct vector_type_info from *.h to *.cc and change "user_name" into "name".
25413fdb2ac24933214123e24ba165026452a6f2 vect: Teach vectorizer how to handle bitfield accesses
ee467644c53ee2f7d633a8e1f53603feafab4351 tree-optimization/107212 - SLP reduction of reduction paths
fcb94f551f29587f04dac0e9b99c98094479835d RISC-V: Move function place to make it looks better. [NFC]
ef0d7978914b89021d66df3baf03ccc103cf7467 RISC-V: Refine register_builtin_types function. [NFC]
0af2b2f241cbac81a6af503cc4d575a9a0aaf7c0 RISC-V: Apply clang-format for riscv-vector-builtins.* [NFC]
fbf423309e103b54f7c9d39b2f7870b9bedfe9d2 RISC-V: Remove TUPLE size macro define. [NFC]
7f9a7465c863e482708d2a00f5f7ff91ae3a7e0b vect: Don't pattern match BITFIELD_REF's of non-integrals [PR107226]
9f0d4adabe2035886a1aa8d2ca990a90de000613 ifcvt: Fix bitpos calculation in bitfield lowering [PR107229]
5cbaf84c191b9a3e3cb26545c808d208bdbf2ab5 tree-optimization/107160 - avoid reusing multiple accumulators
4b7966191a69238c6d6fd5537b3e77c3a4027eb2 machmode: Introduce GET_MODE_NEXT_MODE with previous GET_MODE_WIDER_MODE meaning, add new GET_MODE_WIDER_MODE
e5139d18dfb8130876ea59178e8471fb1b34bb80 tree-optimization/107247 - reduce SLP reduction accumulator
98e341130f87984af07c884fea773c0bb3cc8821 c++: Implement excess precision support for C++ [PR107097, PR323]
9ed4a849afb5b18b462bea311e7eee454c2c9f68 tree-optimization/107254 - check and support live lanes from permutes
0ea578e98bebca08bcc8201c7709087f7ef15e1f RISC-V: Reorganize mangle_builtin_type.[NFC]
59af5e0bdadb1e47cb7f727bc608b2814e48fe27 RISC-V: Fix format[NFC]
46a8e017d048ec3271bbb898942e3b166c4e8ff3 Vectorization of first-order recurrences
612de72b0d2904b5a5a2b487ce4cb907c768a947 GCN: Restore build with GCC 4.8
aae016f99b121b55fc1bcdfc2403fd22f04fa2df ifcvt: Do not lower bitfields if we can't analyze dr's [PR107275]
92ef7822bfd4ea3393e0a1dd40b4abef9fce027f tree-optimization/107302 - fix vec_perm placement for recurrence vect
e0403e95689af7d562c7d04f706e9e25115747ff ipa-cp: Better representation of aggregate values we clone for
656b2338c8f248d9205b6e9d5e4d9cc43228dd5e ipa-cp: Better representation of aggregate values in call contexts
1442e2031e0bc2d0a5bf88ef3c92c5410e044bab Canonicalize vec_perm index to make the first index come from the first vector.
ba281da28d34f9a78a07f6ee56ad2c754447966e libstdc++-v3: Implement {,b}float16_t nextafter and some fixes [PR106652]
5d6e834ecf212e7fc6f585b154af224d2e38c749 vect: Simplify first for shifted value generation [PR107240]
5362b5cc8dba9de70904613fff1d5391a9c087ce Avoid PHI - PHI recurrence in vectorization
e10ca9544632dbff4759b4b92886cd96d0b9bdfe vect: Fix vectype when widening container type in bitfield pattern [PR107326]
ecb20df4fa6d99daa635c7fb662dc0554610777e Fortran: error recovery with references of bad array constructors [PR105633]
cbd505700e09cfea8bdaa93ad6bd0514372e9034 RISC-V: Add RVV intrinsic basic framework.
f56d48b2471c388401174029324e1f4c4b84fcdb RISC-V: Add RVV vsetvl/vsetvlmax intrinsics and tests.
fa553ff26d96f6fecaa8f1b00649cfdc6cda5f5a match.pd: Fix up gcc.dg/pr54346.c on i686-linux [PR54346]
bdac4b47cbdac52c7082c02f54ed07197161cb4d RISC-V: Add type attribute for atomic instructions.
2cc41601d9a948e8d612a21c3b9a44ce0b977747 c++: Don't shortcut TREE_CONSTANT vector type CONSTRUCTORs in cxx_eval_constant_expression [PR107295]
65908ac84b840ded3331e000d303d0a5b4b426c8 RISC-V: Fix REG_CLASS_CONTENTS.
3eea8c6f4ba9356726879aa4e21b99ad1ad5662e RISC-V: Remove unused TI/TF vector modes.
f84e4fb44aa26b71fbc64e0532fd24d96e5caa3f RISC-V: Replace CONSTEXPR with constexpr
6bfea64164c3f1989d34656ab96d03a7cda2143e RISC-V: Support (set (mem) (const_poly_int))
97d1ed67fc6a5773c8c00875bfa3616a457cf5f9 RISC-V: Support --target-help for -mcpu/-mtune
65e3274e363cb2c6bfe6b5e648916eb7696f7e2f c, c++: Fix up excess precision handling of scalar_to_vector conversion [PR107358]
5a20a4705c960ac323d1fe25f766e1204e0c98bd riscv: fix cross compiler
958014f369c8817184af110f8eb2c433a712fd0a vect: Fix wrong shift_n after widening on BE [PR107338]
19295e8607da2f743368fe6f5708146616aafa91 tree-optimization/100756 - niter analysis and folding
1c64aba8cdf6509533f554ad86640f274cdbe37f Always use TYPE_MODE instead of DECL_MODE for vector field
0cd11d301013af50a3fae0694c909952e94e20d5 RISC-V: Add h extension support
0ef04aa86a4c7a7535ef1fac02c2457282bc9172 RISC-V: Adjust table indentation in commnet for riscv-modes.def
86654b2cc167b540f4f144549b80748ce0054729 RISC-V: Recognized Svinval and Svnapot extensions
f556cd8bd7929be8b73c66d55f98feac8c9ef1ee RISC-V: Support load/store in mov<mode> pattern for RVV modes.
7e924ba3474b96a6c0b87c38cc4fca7af8d3910c RISC-V: ADJUST_NUNITS according to -march.
4329d111f48cba9ea560fc0a36f4cb5a290decb2 RISC-V: Fix epilogue generation for barrier.
e09335728d3f9bc177eac2f7dff79715e0aa67c9 RISC-V: Minimal support of z*inx extension.
ac96e9068ce7dcaca992fde7f1551ffe8837b723 RISC-V: Target support for z*inx extension.
6b252dc96b52f5ab6f399c3f6b0c0b6614a36913 RISC-V: Limit regs use for z*inx extension.
27065374f172f05110b68fe1f452eed414c837bd RISC-V: Add zhinx/zhinxmin testcases.
a33d623d2d3a78f5ef6f9e854946303e063eef63 c++: Fix ICE on g++.dg/modules/adl-3_c.C [PR107379]
225f9c8805fb1ba68a877383095f38a9563526ee testsuite: Adjust vect-bitfield-read-* with vect_shift and vect_long_long [PR107240]
0607307768b66a90e27c5bc91a247acc938f070e Fix target selector syntax in 'gcc.dg/vect/bb-slp-cond-1.c'
11e811d8e2f63667f60f73731bb934273f5882b8 OpenACC: Don't gang-privatize artificial variables [PR90115]
826df6d0cc706bf83cdb228b43f9b4890e8b2fbd Adjust gcc.dg/vect/pr100756.c for V8SI and V16SI
084128583212bd64308f50c2ab5f4c03be40e48c tree-optimization/107435 - ICE with recurrence vectorization
95decac3ce8c8c7c5302cd6fac005a10463de165 vect: Reject non-byte offsets for gather/scatters [PR107346]
4fe34cdcc80ac225b80670eabc38ac5e31ce8a5a c: tree: target: C2x (...) function prototypes and va_start relaxation
6913cad2a38bc406b137b06d579b650f6fe9a2e6 Enable V4BFmode and V2BFmode.
1b07d374765dd811cbb8b3e05764aef3b1754ff2 RISC-V: Change constexpr back to CONSTEXPR
a3b58f28b8cbf524ae2417e1cb1813864a1d8a5d RISC-V: Libitm add RISC-V support.
2b0e81d5cc2f7e1d773f6c502bd65b097f392675 c++: per-scope, per-signature lambda discriminators
a1a6b912b5f905e768da4d0f434591b4d523be49 RISC-V: Add Zawrs ISA extension support
20d5dca80b82df9b1295359edb44eb08c45c4334 testsuite: Fix gen-vect-34.c with vect_masked_load [PR106806]
32a06ce38a38bf37db468f0e6c83520fcc221534 c++: Quash -Wdangling-reference for member operator* [PR107488]
3c28d6a3a018e9acb7af1422d6263661f69d5f94 d: Add support for vector comparison operators
8408120fecc56385b316dafec1bdfe3aac61fc05 vect: Fold LEN_{LOAD,STORE} if it's for the whole vector [PR107412]
f471cb71c86c1e7a3dead324142bdf880f00a3da libstdc++: Implement ranges::cartesian_product_view from P2374R4
c63539ffe4c0e327337a1a51f638d9c8c958cb26 sphinx: copy files from texi2rst-generated repository
e7c8f5005bf87e4bd95b25fb31430eef7e58097e RISC-V: costs: handle BSWAP
3ed1b4ce7c9bdf8c777d12da0f5fe4cae8ba7c8e sphinx: add missing trailing newline
2f6cb9c51a933de19cd88f4c9180ac9cf5093522 RISC-V: Fix selection of pipeline model for sifive-7-series
5576518a5667ad826937125a19b7c59c34d8733c RISC-V: Add RVV registers register spilling
f90cb39235c4971c4399c782d4d7566242b5886b RISC-V: costs: support shift-and-add in strength-reduction
43435c7eb0ff60f02838674efd99df93852a92cc RISC-V: optimize '(a >= 0) ? b : 0' to srai + andn, if compiling for Zbb
8beff04a325ba3c3707d8a6dd954ec881193d655 middle-end: Support not decomposing specific divisions during vectorization.
b4fca4fc70dc76cf18406fd2b046c834d976aa90 RISC-V: Add basic support for the Ventana-VT1 core
991cfe5b30cb06611aa03d8c67860552785faba8 RISC-V: Add instruction fusion (for ventana-vt1)
eab3d2d17dd8fedc856cf175a3f2174770ecb64d riscv: bitmanip: add orc.b as an unspec
bcd5f98cbe3d924f17f616fa1a71157b7e981584 Revert "RISC-V: Add instruction fusion (for ventana-vt1)"
aa37a91cab19855ae6b0c6660eff8511b7a81436 Revert "RISC-V: Add basic support for the Ventana-VT1 core"
dc95e1e9702f2f6367bbc108c8d01169be1b66d2 Optimize VEC_PERM_EXPR with same permutation index and operation
c717a92dd89321eeb74aaa3daeb32354ac588d20 RISC-V: Zihintpause: add __builtin_riscv_pause
136029059686fed2d99c755baf35f98553fc0232 c++: Implement CWG 2654 - Un-deprecation of compound volatile assignments
f58e6d42fc555ee471594ac57bccaa8a3fb833aa doc: invoke: pru/riscv: Fix option list formatting
246bbdaa5f536b7a199dda9860c473137f40d622 tree-optimization/107686 - fix bitfield ref through vec_unpack optimization
32462550f2803aafb726b5ae20d4d95ce36dcd9c RISC-V: Split "(a & (1UL << bitno)) ? 0 : -1" to bext + addi
ac74b3f82b339569b34dc9d1330c2faf74a1c82a RISC-V: Split "(a & (1UL << bitno)) ? 0 : 1" to bext + xori
629897ed80512a8618e08673c03d8482cbc42eef libstdc++: Improve performance of chrono::utc_clock::now()
a62d957342e3e9ee9bda812f737279f1166e03ba RISC-V: Optimize RVV epilogue logic.
928bc5b863f126189753e45ef45a40265ae028c5 Fix typo in gimple_fold_partial_load_store_mem_ref
705bae2351a870dc3ff59db47fa0de6baaf829c8 Enable shrink wrapping for the RISC-V target.
1957bedf29a1b2cc231972aba680fe80199d5498 RISC-V: bitmanip: add splitter to use bexti for "(a & (1 << BIT_NO)) ? 0 : -1"
0045d254c010bf5eac55903780c67f725192cfb3 RISC-V: Optimize masking with two clear bits not a SMALL_OPERAND
ee892832ea19b21a3420ef042e582204fac852a2 Fix PR 107734: valgrind errors with sbitmap in match.pd
c5df8392c5848c0462558f41cdf6eab31db301cf tree-optimization/107647 - avoid FMA from SLP with -ffp-contract=off
23d9f62c50d935462ecda5516746037a474c25cd RISC-V: allow bseti on SImode without sign-extension
acbb5ef06ee97849ecd5412ab56c1dff0f0d2fcf RISC-V: Optimize branches testing a bit-range or a shifted immediate
30c2d8df173a6f3ca145cda9f9e261616fca8467 RISC-V: split to allow formation of sh[123]add before 32bit divw
787ac95917a666b3d186e2d5afec07ee5b75c6df RISC-V: Optimize slli(.uw)? + addw + zext.w into sh[123]add + zext.w
bc6beecb4d64fcd82988f840fdad45a69d73c7bb RISC-V: Use bseti/bclri/binvi to extend reach of ori/andi/xori
60d2bcc55bcc0991c0e58e97edf4a69e847e82c6 RISC-V: Handle "(a & twobits) == singlebit" in branches using Zbs
3142265dedd84c2f3dbf824f2d1b0c182e3c8b3c RISC-V: No extensions for SImode min/max against safe constant
4c7d336b673df2f3bf23bc5e7a69c445a2320c04 RISC-V: Fix ICE in branch<ANYI:mode>_shiftedarith_equals_zero
1a06ae6f2f4f292fd05a900bcf433cb4282da1e3 tree-optimization/107766 - ICE with recent -ffp-contract=off fix
09b7993ab6d93716f77c03ff9a9165fa4b579f0d tree-optimization/107672 - avoid vector mode type_for_mode call
feeb0d68f1c7085199c3734e6517a3a4b58309ef ipa-cp: Do not consider useless aggregate constants
936d40b9ba9cdf8571bc5c366f3d3237cabc30c2 testsuite: Fix missing EFFECTIVE_TARGETS variable errors
ca73d4c80ea06087d9dd22594e5670bb15e21066 Fix recent rvv/base/spill testcase failures
71f3036b8a83da7fb559923bc80687ea1dabe14a sve2: Fix expansion of division [PR107830]
f7a41b5cfd7406da1f2e5a0f1f813521d3dc2bb2 RISC-V: fix stack access before allocation.
2200b7054638bbf157192a4dca23886dd420becb tree-optimization/107896 - allow v2si to dimode unpacks
868fc62791b6b0f10484cc6fa15f81911418e605 RISC-V: Avoid redundant sign-extension for SImode SGE, SGEU, SLE, SLEU
940d5b56990fdf171f49517ae102673817b9c869 riscv: improve cost model for loading 64bit constant in rv32
ffabce849033e57ebaf60029822b81e981681c21 Couple of testsuite adjustments
063ba138eaa15ceecf23a24906e0e19be98d509d tree-optimization/106995 - if-conversion and vanishing loops
81cf0354d5f81f2c7600a3bc7ae4600757286995 libstdc++: Remove unnecessary tag dispatching in std::vector
cca06f0d6d76b08ed4ddb7667eda93e2e9f2589e libstdc++: Avoid bogus warning in std::vector::insert [PR107852]
7c01d029fca669263b9c2dcb8837c42f7ae3a77f Make Warray-bounds alias to Warray-bounds= [PR107787]
fa144175c9ccaa10d7021d00f97aaa9eac59afec RISC-V: Add duplicate vector support.
3b16afeb3f6aacf64b9f9c50b7cb9805a9dfff63 RISC-V: Add attributes for VSETVL PASS
c126e144d407bdc36c4204ab1b76b584b6514786 RISC-V: Remove tail && mask policy operand for vmclr, vmset, vmld, vmst
cebd31757800158704d4a301076027df52418773 [testsuite] [riscv] uninit-pred-9_b bogus warning
93574914e462e87e42dddd66b0dfbb9627662f33 [testsuite] [riscv] skip ssa-sink-18.c
5c11d748564c7ce3b096e87ad350fcddd493e45e tree-optimization/107956 - ICE with NULL call LHS
4ba94abf147fe7778a7541849ce27cafee74df9b libstdc++: Add hint to compiler about vector invariants [PR106434]
d2e782cb99c3116c389d6a9565678c4ffe267777 libgccjit: Fix float vector comparison
da7fb32d403759daefefc79dc251d2437c1b638c Fix ICE due to condition mismatch between expander and define_insn.
4505270128ef70538ea345f292e3eb85a5369eaf [PR102706] [testsuite] -Wno-stringop-overflow vs Warray-bounds
1e1847612d7f169f82c985b0b3a5e3301d6fe999 c++: fewer allocator temps [PR105838]
d081807d8d70e3e87eae41e1560e54d503f4d465 c++: avoid initializer_list<string> [PR105838]
bd0485f20f4794f9787237706a6308473a8e9415 c++: build initializer_list<string> in a loop [PR105838]
cf80a23e19db83b7cb2220371d21642aa08261e0 analyzer: handle memmove like memcpy
f8d136e50e6f82cba793483d910a2b2643108508 tree-optimization/106904 - bogus -Wstringopt-overflow with vectors
26295a069fd312a8be4a6cd96643117383145cc0 Treat ADDR_EXPR and CONSTRUCTOR as GIMPLE/GENERIC magically
4d9db4bdd458a4b526f59e4bc5bbd549d3861cea middle-end: simplify complex if expressions where comparisons are inverse of one another.
33be3ee36a7e2c0be383ec01b5fbc9aef39568fd vect-patterns: Fix up vect_recog_rotate_pattern [PR108064]
7450b25566b7a738edff6f554d97ba6e3dd95ac9 ipa-cp: Write transformation summaries of all functions
512098a3316f07d4b8bf0e035ab128ed2a50cb5e libgccjit: Allow comparing vector types
df049cb2153839fdf6c6bdc27acf5a5151f74a99 RISC-V: Note that __builtin_riscv_pause() implies Xgnuzihintpausestate
9bb7864877ab05bf951fad66c934845351b271ce RISC-V: Fix up some wording in the mcpu/mtune comment
64c986b49558a7c356b85bda85195216936c29a3 libstdc++: Diagnose broken allocator rebind members
6e56633daae79f514b0e71f4d9849bcd8d9ce71f initialize fde objects lazily
e4337398620098f96a7680ce748c9da178514acf RISC-V: Fix RVV related testsuite
b346e77f4d7b482df78f119819b1e06a544ef515 RISC-V: Fix vwrite_csr.c and vread_csr.c
61f9fe404933552a1858414f8181936d63a88ca2 RISC-V: Change vlmul printing rule
22dc669e109de9a76c74535cdf30e7922e0ef5c1 RISC-V: Fix RVV machine mode attribute configuration
9243c3d1b63b9092a82178392145f9e9d62423d9 RISC-V: Support VSETVL PASS for RVV support
c2c29fbebb9ea2e9e720a29d74b4e541e5c79953 RISC-V: Simplify ASM checks in gcc.target/riscv/rvv/base/.
e4433e075fc4ef06401c2255561ee6a508a49dcb RISC-V: Add testcases for VSETVL PASS
6f18836ca035d3d029cdc503e2a0d7d685a4d072 RISC-V: Add testcases for VSETVL PASS 2
76023293e6e82439643048a32cad36ddf9ba0e44 RISC-V: Add testcases for VSETVL PASS 3
5a1b66b77cfbf617494e1baad8cbf0fd2d1a0c54 RISC-V: Add testcases for VSETVL PASS 4
6c098f7d23db4dd98e7fed74a35416248397be40 RISC-V: Add testcases for VSETVL PASS 5
ec459469f8a75d96a9b26694554efcc900d411de tree-optimization/108164 - undefined overflow with IV vectorization
8aa045c97485d75e0b6eb1068464c0ddaa6beacb c++, tree: walk TREE_VEC (and VECTOR_CST) in natural order [PR101886]
193fccaa5c3525e979a989835c47c76d2c49d10c Fix PR 105532: match.pd patterns calling tree_nonzero_bits with vector types
bbe04bade0cc3b17e62c2af3d89b899367e7d2d1 Update znver4 costs
eef81eefcdc2a58111e50eb2162ea1f5becc8004 Zen4 tuning part 2
7b2cf5041460859ca4f58e5da1308b7ef9129d8b tree-optimization/107451 - SLP load vectorization issue
d4a320f1ee4c76f09f95bdc583b90a9b049bbba0 testsuite/107809 - fix vect-recurr testcases
85112fbbfd939f87fb12a00e40ab423ddcfa8ca1 RISC-V: Fix muti-line condition format
9374f766a75bf898e717a5bbb58199a91528af0b RISC-V: Fix incorrect annotation
37fd10fd3eb42ea4487d93521a267ba08a9f8575 RISC-V: Remove side effects of vsetvl/vsetvlmax intriniscs in properties
b47b33c799bd4874a4c81fb71708ff1c3dd150ff RISC-V: Remove side effects of vsetvl pattern in RTL.
55d65ad4fd808c7806d770f03c26fa38672a4e28 RISC-V: Update vsetvl/vsetvlmax intrinsics to the latest api name.
a143c3f7a61c61bb5a5e099fdb59f3adbf99b6b3 RISC-V: Support vle.v/vse.v intrinsics
16eb1f43ab4e521ed4503e7766eee25da75eaeba RISC-V: Fix vle constraints
bd1fc4a219d8c0fad0ec41002e895b49e384c1c2 c++: template friend with variadic constraints [PR107853]
fd1b0aefda5b65f3f841ca6e61ccea6a72daa060 tree-ssa-dom: can_infer_simple_equiv fixes [PR108068]
12b23c718cd29924a18e8cdd6790a9c04801c5f5 RISC-V: Fix ICE for avl_info deprecated copy and pp_print error.
681a5632e0afaa24cc2a3d50a30be08d27dbfd35 RISC-V: Fix ICE of visiting non-existing block in CFG.
3d365acf982e50588f944c46a46ec2fff59f5798 RISC-V: Add riscv_vector.h wrapper
b0a32b6e1b971ad9bfa97599d54f837fd16981dd Fixed typo in RISCV
3895dd7675197167789e3b346057be417eede943 riscv: attr: Synchronize comments with code
7c755fd9018821b79ddc32ee507897860510986c riscv: Restructure callee-saved register save/restore code
2e886eef7f2b5aadb00171af868f0895b647c3a4 RISC-V: Produce better code with complex constants [PR95632] [PR106602]
103f963e5cf6e7fe80395efc5fcede351420e25d Commit right version of last patch (missing modes)
31ec203247413f150d5244198efd586fc6d2ef5e RISC-V: Return const ref. for vl_vtype_info::get_avl_info
3b6cac2b44b384cd2091eaeaebeb3478c253a25d Compute a table of DWARF register sizes at compile
0425ae780fb2b055d985b5719af5edfaaad5e980 OpenMP: GC unused SIMD clones
345dffd0d4ebff7e705dfff1a8a72017a167120a generic-match-head: Don't assume GENERIC folding is done only early [PR108237]
cccef0517f3a73f638a96ee879e94ff2bece7298 ada: Update copyright notice
554bb9b61e2b76d4ace16a3f766b98ea887b17f4 tree-optimization/108314 - avoid BIT_NOT optimization for extract-last
c389991432da2bcc335a2b4fb7e502d28a6b3346 ipa: Sort ipa_param_body_adjustments::m_replacements (PR 108110)
b073f2b098ba7819450d6c14a0fb96cb1c09f242 tree-optimization/99412 - reassoc and reduction chains
fd1f5373b8647a5da2f7f4b42282e676a4b04d98 PR tree-optimization/92342: Optimize b & -(a==c) in match.pd
42d3f74323800d2ce5853dfb9180a5be1ff28d04 libstdc++: Enable string_view in freestanding
98b41fd4045b7856e7b85dd58d67c600bd909379 c, c++: Allow ignoring -Winit-self through pragmas [PR105593]
c841bde5ac2bd8915ecc974ff7623c8954fc1cf3 riscv: Fix up Copyright lines [PR108413]
4798080d4a3530d985efef68aa2e04ec7549b3c1 Add c[lt]z idiom recognition
967592488c64a86f37bef3dabebb56364f14acdd Disable gather/scatter for zen4
e94e9944f59b00de455bb719fd0c5281c5509be6 install.texi: Bump newlib version for nvptx + gcn
ad4f8c4e375dd7603382ed3ff95bd184e1959918 tree-optimization/108482 - remove stray .LOOP_DIST_ALIAS calls
47b269caf87904fd0112e8c9e96884dd0313ed15 modula-2, driver, Front end: Revise handling of I and L paths [PR108182].
72e46b3c7ad5e3d2c69868a510c00707c356106a c++: vector of class with bool ctor [PR108195]
049a52909075117f5112971cc83952af2a818bc1 c++: TARGET_EXPR collapsing [PR107303]
7b8f4c85051501e9c804df2de1a08f11aa187e9d testsuite: Fix gcc.dg/vect/vect-fmax-1.c etc. on SPARC [PR104756]
e304e9283a97e28dc0074d8d30715d3f626b4e87 testsuite: Fix gcc.dg/vect/vect-bitfield-write-[23].c on SPARC [PR107808]
f91cd98ebc3599d514c42db23606b4b9474ef1fe RISC-V: Fix pointer tree type for store pointer.
856eec0d6b65c7b28b4b6c4fd6ccc10f2f6a22b1 RISC-V: Fix inferior codegen for vse intrinsics.
91a41201b5cea1d72cd84e0e8751289774fcba42 RISC-V: Fix vsetivli instruction asm for IMM AVL
005fad9d251b7ce6c009b646e213fbbf8d43a02b RISC-V: Fix bugs for refine vsetvl a5, zero into vsetvl zero, zero incorrectly
011ba384b343e99bb86eb3ac86c7628c4cd98f8b RISC-V: Fix wrong in_group flag in validate_change call function
8d8cc482ea49fd6fed81b47c948263fd82a1936b RISC-V: Fix backward_propagate_worthwhile_p
aef20243b842284587023306e922e483b2401f34 RISC-V: Simplify codes of changing vsetvl instruction
cca9c44eca42d71ef20fc00a261616ba66edd089 RISC-V: Fix bugs of available condition.
387cd9d37950a93225f19bc4054e45638dd7d29a RISC-V: Refine Phase 3 of VSETVL PASS
cfe3fbc678d7b69785d2b017d3ff3cd78cd91580 RISC-V: Cleanup the codes of bitmap create and free [NFC]
00fb7698f0b3ae14d6d472db0f8b64744c84678b RISC-V: Avoid redundant flow in forward fusion
b9b251b7b95c78b485022802908970c598d9f6e1 RISC-V: Refine codes in backward fusion [NFC]
27a2a4b6ed36784cc44e33451eed602f93ef3488 RISC-V: Rename insn into rinsn for rtx_insn * [NFC]
7ae4d1dfb8f43b99aea4e86e3ec8e48e9480045f RISC-V: Remove dirty_pat since it is redundant
acc10c793127d5683b19158fd89fd0d4f4fc9db0 RISC-V: Add probability model of each block to prevent endless loop of Phase 3
4f673c5ee287d73262ad9c1d59ca4d6db3809eef RISC-V: Fix bugs of supporting AVL=REG (single-real-def) in VSETVL PASS
6bc31c2c7c038e328cea88f67bd93415054a3db6 RISC-V: Add testcases for IMM (0 ~ 31) AVL
cb31b22751e66019c7a4f0d9d572cca795b78368 RISC-V: Add testcases for AVL=REG support
95dca4e7482fcb3ef65df55144ca306e270a8a02 RISC-V: Use get_typenode_from_name to get fixed-width integer type nodes
e3bcf0726207185af88dd3c8fbed35b05cd80ddd RISC-V: Fix incorrect attributes of vsetvl instructions pattern
ca8fb0096713a8477614ef874f16ba5bf16c48bc RISC-V: Change VSETVL PASS always call split_all_insns
5aa486e7740a0bc83168d806806d1149e6e90310 RISC-V: Reorder VSETVL pass location
89483d952aca74c2e053ab9bee18f3d25695e2c9 RISC-V: Change parse_insn into public for future use.
0f024ff988aeaacd8d0f967c5f841ab20fb40c19 RISC-V: Add TARGET_MIN_VLEN > 32 into iterators of EEW = 64 vector modes
4369d499f711933b8f204f896cb654423e99b039 RISC-V: Fix pred_mov constraint for vle.v
e577b91bbaa7075655de4da4b8af95216d8b1f6d RISC-V: Refine function args of some functions.
9b9a1ac14cdca6eef8dbcab0d33f3c03774a6c77 RISC-V: Fix bug of before_p function
6b6b9c680bc43c19b24a2e01ddc99f2c061e0511 RISC-V: Finalize VSETVL PASS implementation
d324d56221d68bd965ac5fc2c3e0eba48076bf60 RISC-V: Finalize testcases for final version VSETVL PASS.
ab39fa8c8fd72cc77f13ece3d6129760edfcfb8a RISC-V: Add vlm/vsm C/C++ API intrinsics support
931a042f7e6c3ee0741cf4365b15f4e27d364209 RISC-V: Add vle.v C API intrinsics testcases
4f6d7f9b6adeb4c9f280914ffeb3aa5f0acc3e80 RISC-V: Add vse.v C API intrinsics testcases
ce34fa309e05e4c417fc4ff96e6ab9e8dd058836 RISC-V: Fix vop_m overloaded C++ API name.
c17082867ebfea7d70f383f216204d4c2a689424 RISC-V: Add vle/vse C++ overloaded API intrinsic testcases
3caa3a3f1a0dbf347d38eadf27f00a209f3030c4 RISC-V: Fix testcases check.
7486fe153adaa868f36248b72f3e78d18b1b3ba1 Add support for conditional xorsign [PR96373]
0fd52972c600c432d9df74dad427243b916317a0 testsuite: Two adjustments to gcc.dg/vect/complex
43122c45607afb1d599a2c81484cdbc7d28ac830 RISC-V: Remove redundant attributes [NFC]
eb1c2960184e666db331cdaeef2c51cf97f7fee0 RISC-V: Add vlse/vsse intrinsics support
caa87b98fc37accc5db0ee1a2cbca97f883d04fd RISC-V: Add vlse/vsse C/C++ intrinsic testcases
3cd08f7168c196d7a481b9ed9f4289fd1f14eea8 riscv: Enable -fasynchronous-unwind-tables by default on Linux
6c9bcb6c7ec70aba260a388469fd88f31fe08d15 RISC-V: Add indexed loads/stores C/C++ intrinsic support
6dfacebd2d6458b0774c76b7b2afbcc22bc43e4c RISC-V: Add VSETVL testcases for indexed loads/stores.
9da40aae23180fc9d240b762e4fea154df546570 RISC-V: Add indexed loads/stores constraints testcases
12c42f87473ef604e1713ee038c8cf640b17bc41 RISC-V: Add vloxei8 C API intrinsic testcases
a9c45ce56a55c8a35724bb141276ef316ceed133 RISC-V: Add vloxei16 C API intrinsic testcases
106bd09fd1ffdfdb430073e513935b9c9a9dad2d RISC-V: Add vloxei32 C API intrinsic testcases
8ef1c4a7689ad1c28bbd86fd7eac12cceb7cd27a RISC-V: Add vloxei64 C API intrinsic testcases
126c6bac3d1b7391acf61e4a295b828d2fef5b4e RISC-V: Add vluxei8 C API intrinsic testcases
6e13f699f84437d00f304858b08831dfbcf947f6 RISC-V: Add vluxei16 C API intrinsic testcases
0451ce4444dc5c9f84dd323b228e707323399487 RISC-V: Add vluxei32 C API intrinsic testcases
afd7265818081276d7bc4c104b4e6efbc8013211 RISC-V: Add vluxei64 C API intrinsic testcases
878e57576086622ba822d5b35513771754989967 RISC-V: Add vsoxei8 && vsoxei16 C++ API intrinsic testcase
2b48e628b0f2f7c250c3157769e641e2c9a9ca6b RISC-V: Add vsoxei C API intrinsic testcase
e9ec6159070e5dbdf33d5353ab6b1d883351cdaf RISC-V: Add vsuxei C API intrinsic testcase
25a4d238d81ece682ad76e041abeabbbe23979e4 RISC-V: Add vsuxei* C++ API intrinsics testcases
22fb77702b1c373422b501246395e46aaa89124a RISC-V: Add vluxei8 C++ API intrinsic testcase
ed83c931db151f426d633adc6e61da9ed015d3db RISC-V: Add vluxei16 C++ API intrinsic testcases
c019f34e1f55cb2ce32cb79369251413c4ab7f86 RISC-V: Add vluxei32 C++ intrinsic API testcase
b85ba3c4b37ea60a81d4def8406caa868a881aa5 RISC-V: Add vluxei64 C++ API intrinsic testcases
44e194aa3f6cbbf67c6dbbcc98dd2e61ed98140e RISC-V: Add vloxei8 C++ API intrinsic testcase
1e5451c55b09f5587c12150c26a12ffefecf4454 RISC-V: Add vloxei16 C++ API intrinsic testcases
e5ce6efaab38d80fc32f43ca4331899a8afaea6a RISC-V: Add vloxei32 C++ API intrinsic testcases
e9b5a85238ac0a5b2df7f6b68b3e5a66f58f6988 RISC-V: Add vloxei64 C++ API intrinsic testcase
a190f583050630802438bce9aa854fdfa7a4433c RISC-V: Simplify testcase condition for RVV tests [NFC]
e66fec8e6ba35edf01f86c2bf6514109aba4ded2 gccrs: const folding port
245ce6f26a1688ad69a1802ec50fa865db409eec gccrs: Add guards against getting data from an empty vector
2bb444787ed17a9e786f544cdf51ee2ac6779ab2 vect: Fix single def-use cycle for ifn reductions [PR108608]
2a937fb5cf805c7311f1d9ecf98b60bedc922165 RISC-V: Add integer binary vv C/C++ API support
2db1fd76ebaa6da8c868bb610b3e36d1ef504036 RISC-V: Add vxor.vv C API tests
88a4dc078ad16b94e5f4c93d84c02fddf7d7936a RISC-V: Add vsub.vv C API tests
4703a573d1131d052ed5c05f108997e26a53f316 RISC-V: Add srl.vv C API tests
79d1e60cb8670efb778a504aac3fa1fe90df289e RISC-V: Add vsra.vv C API tests
f9979ac8a2c792c11ddd1b14733e68c12cad4667 RISC-V: Add vsll.vv C API tests
9d2fe103bfbcb4762d33a4bc06eb6ef827a9eabc RISC-V: Add vrem*.vv C API tests
a581639528a6cfbb17f4ec27a31ffcc2e4939bb0 RISC-V: Add vor.vv C API tests
7f51e62876c7ca6953cf39ab07c2e0bb196f4d59 RISC-V: Add vmin*.vv C API tests
aa89ce6a65afa0d27fdf305fc92c39bc12c5680b RISC-V: Add vmax*.vv C API tests
a542b1feeb209348bf168e4b6cf58a63d29e3208 RISC-V: Add vdiv*.vv C API tests
817d8f2ec5a7845cf63b80eff84b3733d9e088d4 RISC-V: Add vand.vv C API tests
c2674f5b913ddec9d0b94d555ffd326b7f113c8d RISC-V: Add vadd.vv C API tests
e96482d84ec801c43e651547ef70dfc86f9cbb62 RISC-V: Add binop constraint tests
6344011ae3203f49df2f75bc863d38d5469aad94 RISC-V: Add vadd.vv C++ API tests
e37c8f209e08a851a1d2f90a93c265c1fece61bd RISC-V: Add vxor.vv C++ API tests
768a8952539ca7dfb6a61f17595fa9f6ea1f27b2 RISC-V: Add vand.vv C++ API tests
f4463ea86a4b9855d204b8e8e612567017f07228 RISC-V: Add vsrl.vv C++ API tests
38e152f84b0667410a298cd487c38b70f7443c01 RISC-V: Add vsra.vv C++ API tests
147e602a4ddd342523eddb419b602fdc732a3897 RISC-V: Add vsll.vv C++ API tests
f4f00e44fd392ee75b45de7522027c1de3c43a75 RISC-V: Add vrem*.vv C++ API tests
e2e93b9dee938f4f757cf2f1dae09a8cd77eded4 RISC-V: Add vmin*.vv C++ API tests
a97767c30b1f7e58a32f80440420f59260b50dbf RISC-V: Add vmax*.vv C++ API tests
77906341efc5cb69aada0645c22850bc83c1d42c RISC-V: Add vdiv*.vv C++ API tests
e4473d7cf871c8ddf8f22d105c5af6375ebe37bf ree: Fix -fcompare-debug issues in combine_reaching_defs [PR108573]
209f02b0a9e9adc0bf0247cb5eef04e0f175d64e Don't peel nonlinear iv(mult or shift) for epilog when vf is not constant.
a02aacf55a35876ddc1e534778dc37fae29054f6 RISC-V: Fix bug of TARGET_COMPUTE_MULTILIB implemented in riscv.
61122017132366189b43bc15402c34d5d9615024 RISC-V: Add RVV shift.vx C/C++ API support
fae260ebfb19c7cabadda38e40f37b85ed93768e RISC-V: Add vsrl.vx C API tests
f890b9e76f98b00a063a4fa9913c715fa3196ab0 RISC-V: Add vsra.vx C API tests
07fba8d6f2da481c8d2915e66d49525c65ca04d6 RISC-V: Add vsll.vx C++ API tests
6c93c1fb3969648cb9b4e330c796d6520aa0c9e8 RISC-V: Add shift constraint tests
b0a2abcd79e3c5ec63ac5b94e8b834c91693f612 RISC-V: Add vsrl.vx C++ API tests
f08acad732e35396136f9fe3a23f52ec85ca56ce RISC-V: Add vsra.vx C++ API tests
d8bd2c5f22eaa96b703531c41f7c2e6685d43584 RISC-V: Add vsll.vx C++ API tests
f3a10f4fff3d6751aa65df58b8629f84a0c04545 RISC-V: Fix constraint bug for binary operation
167b04b9b8a2becfd23b8ccf7f09016bbd013e12 RISC-V: Remove unnecessary register class.
a7502c4a614238ac3f80271886b217b156bdf923 Enable 512 bit vector for zen4
cad2412cc84518195fceb2db31e82e6df7e5a2c2 cgraph: Handle simd clones in cgraph_node::set_{const,pure}_flag [PR106433]
740a3be7df29b280f39a04c441fd4917af4eef5e vect: Check gather/scatter offset types [PR108316]
6ad1c1027628f094260037536f6b6fcdb63b5add vect-patterns: Fix up vect_widened_op_tree [PR108692]
dc87e1391c55c666c7ff39d4f0dea87666f25468 tree-optimization/108724 - vectorized code getting piecewise expanded
a035d133809430d2b2019d5de6c42d358eb8c7aa RISC-V: Add binary vx C/C++ support
649107f6d1f0d5cefa623f41eb6b69f3c8f89580 RISC-V: Add vmul.vv C API tests
1b0bd520f5ab03807c0be297d2d210bed2e44cc7 RISC-V: Add vmul.vv C++ API tests
e9d5e4ac35753b0adabed4c18c5e0f417f8827e5 RISC-V: Add vxor.vx C API tests
fe9e2eccb9e9e82779fa60a8a2f5cb0f62ac399e RISC-V: Add vsub.vx C API tests
d2d6b0915e04d82ce979fbf4d7ac47c0624827b8 RISC-V: Add vrsub.vx C API tests
b65e8a1900205ab9b69c8ab24e4ea2fdfd459c47 RISC-V: Add vremu.vx C API tests
dc4d66d543b16474173b4998e87113ae773f31fb RISC-V: Add vrem.vx C API tests
76cd8e80058df1d349d88103a0ab73ec0dec29b6 RISC-V: Add vor.vx C API tests
ac843ce70e695959a2f3652c55449421f4958c64 RISC-V: Add vmul.vx C API tests
f82338eca2f754b55512bbf67a6f08e45eaa56ae RISC-V: Add vminu.vx C API tests
5255664d4ab144b35d93d67e2251b79f21d817ad RISC-V: Add vmin.vx C API tests
a524f0c44f141a90f5120589575b24f096fce91a RISC-V: Add vmaxu.vx C API tests
e6a085499cbf78c2cb877d237e0dfdc358ec52c3 RISC-V: Add vmax.vx C API tests
8f1320e09764a5855a4eaaafdd9134d6d0be8b1d RISC-V: Add vdivu C API tests
5442df6cbdf32a53fd433b6248f11a54c9ecb900 RISC-V: Add vdiv.vx C API tests
9f35eb5d51bb4a3857633690c951ecb344a18e84 RISC-V: Add vand.vx C API tests
f7bff05f5e9f0c74ae42b1c5fe657911f6708b96 RISC-V: Add vadd.vx C API tests
ce4b00f393b2c470b2c18e7fda1286d71408e41c RISC-V: Add binary op vx constraint tests
7d8c4a59fdf1dd0bd5303eb50761b114fd7bd8b7 RISC-V: Add vxor.vx C++ API tests
525274d82f3d3220e5740cfd4e23dd1e619139f4 RISC-V: Add vsub.vx C++ API tests
f0cd94672fc5a94a7ae61b7c18c4ec4d662a1452 RISC-V: Add vrsub.vx C++ API tests
1e6324f7f36fc3850032b13577b2473a6a3d64bf RISC-V: Add vadd.vx C++ API tests
d862fd1832a8a1acee12490178780316719fd6fd RISC-V: Add vremu.vx C++ API tests.
988cc529af6132242727d0501ea6d620985a6c8d RISC-V: Add vrem.vx C++ API tests
6289b83ffe2b7ea21c9fa957fc6931d49202bd67 RISC-V: Add vor.vx C++ API tests
8c971d59a7c16247954a90335b50bb5b2cc88d34 RISC-V: Add vmul.vx C++ API testcase
679ba598453d7564ae52ad1cf98adb193b325354 RISC-V: Add vminu.vx C++ API tests
0e5ae1fad00c228f701f29c84b86e3add3c03847 RISC-V: Add vmin.vx C++ API tests
66979d72eb9651ead9655fbc5e4f8f9129ad9281 RISC-V: Add vmaxu.vx C++ API tests.
ae3ea1340de976f33ef01881f2ecc579610e2fec RISC-V: Add vmax.vx C++ API tests.
8189380d868d902120c91d166c3517fa79ed28f7 RISC-V: Add vdivu.vx C++ API tests
e0e32c3397e0fa378abbcea5e689b7b7c8782e9c RISC-V: Add vdiv.vx C++ API test.
edfc4402504fd512ba469219e2ed637f2921a1c2 RISC-V: Add vand.vx C++ API test.
76ab4084d033053f430c7429c2f2f3d2a76bc6b3 gcc/testsuite: fix excess warnings for mingw-w64
c129d22de6bde38edcc3a53ed73c0cc5033bb83a RISC-V: Fix VSETVL PASS bug in exception handling
d7f8c79a57e667cfc7888784457c4a0e6f2bdcda RISC-V: Add unary C/C++ API support
2855e29548443fae92d87761c6b3a4c63f1c9a08 RISC-V: Add vnot.v C API tests
340a770d9dc32a2673094d8a53b2d3d39dffc01f RISC-V: Add vneg.v C/C++ API tests
779e441103e834c9b973ae25956e4546543aec0a RISC-V: Add unary constraint tests.
4170a0f021faa12541dc02838d928844ce8351f8 RISC-V: Add vnot.v C++ API tests
eeb50b70354aa8f198d814ae254ba29e595470a9 RISC-V: Add vneg.v C++ API tests
7ad729a0df05938fc36c3c0b0c4dd6fa4fcd5eb1 RISC-V: Add saturating Addition && Subtraction C/C++ Support
b2691c96efd74c25ba69d6cf14e9f0b3dc48053b RISC-V: Add saturating Add && Sub vx constraint tests
098e7fc10e42e3a07c3fe10cf44159ea59e7374d RISC-V: Add vsadd.vv C++ API tests
77c9ee5e22e4ff70940c2cdef58fd8c8ae82f57a RISC-V: Add vsaddu.vv C++ API tests.
cc01b5c0659500cb72187b886ef38e2b410a3e6e RISC-V: Add vsub.vv C++ API tests
ae9b600f2d5236ee3cefc93d56afe6d33348ed9e RISC-V: Add vssubu.vv C++ API tests
cd92bd48c557e86eb60f1069ec839459483ea4ef RISC-V: Add vssubu.vv C API tests
bd182ae41bc2c81171e0bd8816864b1336fa81c0 RISC-V: Add vssub.vv C API tests
e5600572a1735f4edddca437e788e471c0d3eb30 RISC-V: Add vsaddu.vv C API tests
6a04629d5a0147328e69c4b08c89bd95f760b4b9 RISC-V: Add vsadd.vv C API tests
d6c18465cbb17b177613f99bdeba5679bb048884 RISC-V: Add vssubu.vx C API tests
1b7f3e20a2f405d95b89c5e7893cd2ec0809e666 RISC-V: Add vssub.vx C API tests
ed0c99027d4a843c2857c3383aa29f154d34f65a RISC-V: Add vsaddu.vx C++ API tests
933dce55100d0b6f3cb7d6499c909890ead3dd95 RISC-V: Add vsadd.vx C++ API tests
e5dd529dcdb1463230b2e2f700f79ed95d260eba RISC-V: Add vssubu.vx C++ API tests
3762ff2450c41b4e3ea5eabdffe344259f03bb22 RISC-V: Add vssub.vx C++ API tests
a1ca758fd5e98d87d382958e92af1d5733fe066b RISC-V: Add vsaddu.vx overloaded API tests
064a2d53a38fe55cafb0e00f5c7077e2bdf5a624 RISC-V: Add vsadd.vx C++ overloaded API tests
99fa5d94c41355f82f9f83d98faeaf58c6aa85fc RISC-V: Add vsext/vzext C/C++ intrinsic support
a2da134248bbfa0cdaf196e4c859ce5cf4bb1e80 RISC-V: Add vzext.vf8 C API tests
1d66166b0f7185ac8e54b97fcf5528ec1fd430e9 RISC-V: Add vzext.vf4 C API tests
91d0120e389a6d85279dd298028e1369a369070d RISC-V: Add vzext.vf2 C API tests
decfa1d5bc5878dbd77db4c523da49868de2057a RISC-V: Add vsext.vf8 C API tests
42666defc0d9a2aa4c152874008062bb67f48f59 RISC-V: Add vsext.vf4 C API tests
7d2c4a6f07ef2b450c5df8a5a0fae46078d3d21c RISC-V: Add vsext.vf2 C API tests
00c93929571619aa30f9321167f904d1cd0a73cf RISC-V: Add vsext constraint tests
221f26c9624586b5cec6c5bb8c0a63e21359d1f6 RISC-V: Add vzext.vf8 C++ API tests
522d385831bf6ccdc34a82c3701ebaa2e3bc6b6a RISC-V: Add vzext.vf4 C++ API tests
921f11c8cc2c5a170c405286eaf931f7b2ca8428 RISC-V: Add vzext.vf2 C++ API tests
74595dd5181813e6cca9464ec7ca04dccf029d4e RISC-V: Add vsext C++ API tests
8340bbad6a1a2a9b5b33ff12ebe435472cc34b50 RISC-V: Add vmulh C/C++ support
87c557e269685b59d97d7655d2ce8718e56af840 RISC-V: Add vmulhu.vx C API tests
ce756a1392b1f77b69cb9d5c92614cb3ff2c0f63 RISC-V: Add vmulhu.vv C API tests
f95ada62f3f0935de3b9b258c3ba36c1b0e85dd8 RISC-V: Add vmulhsu.vx C API tests
956c0c8c7dc47a6c6a1b4cd6429f746d6b3277c3 RISC-V: Add vmulhsu.vv C API tests
fa07f9da8b72e4a11c96200734383b4eed5b12c3 RISC-V: Add vmulh.vx C API tests
9ecdd261f72136a070f6b71d68a549186a36312c RISC-V: Add vmulh.vv C API tests
b9eabfee8494ccf913a252134dd998762a5bc024 RISC-V: Add vmulhu.vx C++ tests
5a792199d80d7a780b1ec506e29a282a66bd554f RISC-V: Add vmulhsu.vx C++ API tests
b81d711d189238d726ee7758bff40759d08b5d6d RISC-V: Add vmulhsu.vv C++ API tests
f18e96e6188242a4e1a4b0320aad5de8ca6d15fa RISC-V: Add vmulh.vx C++ API tests
d88110b07e73f9065a2e1d7b1ef306f628e65405 RISC-V: Add vmulh.vv C++ API tests
a1e42094e7ac684e556e3a1246516bce5ed5ecee RISC-V: Add integer widening instructions
9aa6c67dea4fd4ace1eaba5c303c010cfe26e61b RISC-V: Add vwsubu.wx C API tests
f98b4bc59b8a0b7e95b06071efcb526dab40e54e RISC-V: Add vwsubu.wx C API tests
9b1807548918dd4a1c6f88493dcce440990ab03c RISC-V: Add vwsubu.vx C API tests
8aa1e133b1257e8485526c9d902a599f496a52e1 RISC-V: Add vwsubu.vv C API tests
931b3d88313661128946775f9e8517c76111d891 RISC-V: Add vwsub.wx C API tests
14ac33c8e03cd9b1006a2fbb04ec47d32f50b742 RISC-V: Add vwsub.wv C API tests
524e491ab5370b8efd37dbcae241c5a4a1cdc30e RISC-V: Add vwsub.vx C API tests
2a2ab19d5594d1a5b7d964da1432d58ceca8c617 RISC-V: Add vwsub.vv C API tests
fcbe69a096a1c1b2b2a06c2f740e32e9166e9b99 RISC-V: Add vwmulu C API tests
697a877279b0f9d3827929f08028aec6964a469e RISC-V: Add vwmulsu C API tests
ee4f91db8ee78cec4e7a70b425475ac89b9f2f86 RISC-V: Add vwmul C api tests
011ec88dd2ba2bc065c678cf20431e11dc33a531 RISC-V: Add vwcvt C API test
f14f44d92f61c57afe351e4bb7672e43f204cb8b RISC-V: Add vwaddu.w C API tests
2daeb10c609c9349734ca33ee980641ab73b5519 RISC-V: Add vwaddu.v C API tests
7df7cbaaf5ebfd1c70b92212e959356d8401299e RISC-V: Add vwadd.w C API tests
c12ea7136ad9592a0f8bb0c37a02796ed5c49df5 RISC-V: Add vwadd.v C API tests
345b2aa4eb3be99f93ab5d13e454308704293890 RISC-V: Add constraint tests
8532ae57f30b55c599fb7905a64c3df221a2589e RISC-V: Add vwsubu.w C++ api TETS
0fca6d1ac50b809a75b8c354cd66e5b044b53179 RISC-V: Add vwsubu.v C++ API test
b406b86cad2330df2973692ae4d3a2e897cb1de3 RISC-V: Add vwsub.w C++ api TESTS
c95bc128c05dc2a8ce9cef9e6764b58cf907635f RISC-V: Add vwsub.v C++ API tests
ba839fb84bcfa723332fc4b38f969bb36a0a6600 RISC-V: Add vwmulu C++ API tests
307241cbaa9d183b57076bac7be2d3876d918e0b RISC-V: Add vwmulsu.v C++ API tests
7d010731e8bd5c4346b939a313a3ec68956130b7 RISC-V: Add vwmul.v C++ api TETS
98767d253c1c05258113d71829755bcae2dc15d3 RISC-V: Add vwcvt C++ api test
b840dad84da08a1cb95a7509367c5d4e04f9c521 RISC-V: Add vwaddu.w c++ API TESTS
0006e578d0aceac9c37ebfeca7e1a8c16ec102d5 RISC-V: Add vwaddu.v C++ API tests
ccfaa507361237ad314a1e1ba335fb976e4bb1c5 RISC-V: Add vwadd.w C++ API tests
316c83b158dbae2559f130fb7e44718c99941266 RISC-V: Add vwadd v C++ api test
5e620b36cd34b85b0e28c34160245d84bc5acd68 RISC-V: allow vx instruction use "zero" as scalar register.
cb44a16d212e9d0c402340fe6627501ca2e50fb8 RISC-V: Add vadc/vsbc C/C++ API support
b5e7450a1734f01b6453c2c56c3278954825a905 RISC-V: Add vadc.vvm/vadc.vxm C API tests
c2f4dc5810517f3c5465ecea4ce3820f655a0375 RISC-V: Add vsbc.vvm/vsbc.vxm C API tests
6483b8310337917b21a8722de811bf7637a777f6 RISC-V: Add vsbc C++ API tests
b7e4f61c3e703f38c5621d5114e776d245abdf73 RISC-V: Add vadc C++ API tests
dca23bf0bbe68c3880c9793b401cfc03890e6a0d RISC-V: Add vmadc/vmsbc C/C++ API support
c8c7b4b32d86ecf5f8768a5c162484ac2a6b0130 RISC-V: Add vmadc C API tests
bd5c5d2eaf1baecac73d21350fc257aa5f50f8bd RISC-V: Add vmsbc C API tests
485c710b4e698eaef62e4a0037a173a876734c21 RISC-V: Add vmadc C++ API tests
30eedd6a4fccbd3202490ad2dd483bfd1b48201e RISC-V: Add vmsbc C++ API tests
6271a07219a7d764ef59607836c01e0084c3d50c RISC-V: Add vnsrl/vnsra/vncvt/vmerge/vmv C/C++ support
10e999a3abdb676475a0d2bcf7d83188862cc85d RISC-V: Add vnsrl C API tests
eeec45d29238262e524ed40a04ee355f68656429 RISC-V: Add vnsra C API tests
fb03f2acfb724ba224de422f107cbece3efc7c34 RISC-V: Add vncvt C API tests
c1294253310014627d4294ae67eafef10c4c77e2 RISC-V: Add vmv C API tests
4852c719a1adccf9f6b41d5cb2b542f579b9c06f RISC-V: Add vmv.v.x C API tests
c0ea34be11c0da54c18b010ab51b97fc95657a4a RISC-V: Add vmerge C API tests
0b7dd2f4799fc184a36423723ad8652bfb2cf14e RISC-V: Add vnsrl C++ API tests
484ea18ffae0ffe48c054f7a975eeb183abcfc61 RISC-V: Add vnsra C++ API tests
9a1c81afd551ac66b6cb8011a2168ddcd7887576 RISC-V: Add vncvt/vmv C++ API tests
79ef372fa419191a3eb991f6f28671d96444b97b RISC-V: Add vmerge C++ API test
e09418f21dd79517cc321b7999e586e0d1518942 RISC-V: Add fixed-point support
71a1c2c67aa13ae59eef8f2b37fd364d1d18916e RISC-V: Add vssrl.vx C API tests
4e00937ec3eedb68b76babf60b56a1a4a58277a1 RISC-V: Add vssra.vx C API tests
5ca5ca30b6a220682cf98ad04647535421b3e51e RISC-V: Add vssra.vv C API tests
bbb168daecf38a0c9f28a388e51ffa15690f08b2 RISC-V: Add vsmul.vx C API tests
c156e8d7bcfbf8fc40bcd7088750d153be915c28 RISC-V: Add vsmul.vv C API tests
367a01e6a06cecf637db819cf0c4d4cf5085c37d RISC-V: Add vnclip C API tests
1580eda6c3dfdf6c72df96cad2c00298bee1c3c7 RISC-V: Add vasubu.vx C API tests
193a125c3fef20ff81cc91385be60f1d6ad1fb02 RISC-V: Add vasubu.vv C API tests
48e24473fe196e4b2a4d8aa27f5174795a9cd202 RISC-V: Add vasub.vx C API tests
4432ef4eca4b984c83f997032b6f5ee1e876b21c RISC-V: Add vasub.vv C API tests
6ad0002f1e376872c1fcefec9cba15209ddc3dbc RISC-V: Add vaaddu.vx C API tests
119e5d9aff3a950923d333b8fb2e19ea8482cc37 RISC-V: Add vaaddu.vv C api tests
5898e1f333be366f6e6bf35e5f85002a8cdc28b0 RISC-V: Add vaadd.vx C api tests
e85cb86e338a0fd9304c338ef2b37c3145de4d02 RISC-V: Add vaadd.vv C api tests
b7795fb143c2dfd5757f3949faeb07fedf676e0b RISC-V: Add vssrl.vx C++ API tests
02b0325269b6dca8c2da32bf3db4663a9190e6d4 RISC-V: Add vssrl.vv C++ API tests
7326a694da987a025f7491046c2489836f886a41 RISC-V: Add vssra.vx C++ API tests
49e538820819657de6ac5e37449f96e5081a7b30 RISC-V: Add vssra.vv C++ API tests
73dea8e64264c2afe311bde94c58f4ae0d2be785 RISC-V: Add vsmul.vx C++ API tests
7302972bcd59be0308f8f765463153331a9e4775 RISC-V: Add vsmul.vv C++ API tests
0906435e2b6d1f226679b6eac145d9f247559cdf RISC-V: Add vnclip C++ API tests
90ea2d28d470ace7ed7a988982d270fb8d03035f RISC-V: Add vasubu.vx C++ API tests
1a8c69e7ea6df4f1bdc2d453b364f1e6434184dc RISC-V: Add vasubu.vv C++ API tests
3d65ea07b472e70ac02e7c948c91d5422aa53534 RISC-V: Add vasub.vx C++ API tests
ff4d996600b6e2abea571070a4957f093eb4ba83 RISC-V: Add vasub.vv C++ api tests
2ec753302306aee65f7a8629a4bfe168d81b7ef0 RISC-V: Add vaaddu.vx C++ Api tests
0b1f45786f4983b6894c22141548768df9b123bf RISC-V: Add vaaddu.vv C++ api tests
e8a0c9e9d41fb39d150c6c5a4bfbb8a0639b14c4 RISC-V: Add vaadd.vx C++ API tests
2cd7cbaf51f0057d570406b2540796161af756a6 RISC-V: Add vaadd.vv C++ API tests
52009fa79cdb497b9e410bb4a5b54960a4a44463 RISC-V: Change the generation mode of ADJUST_SP_RTX from gen_insn to gen_SET.
89367e794613bdeb21df3e6fc0215f0acd553ef8 RISC-V: Handle vlenb correctly in unwinding
3cac06d84f334705ed0bce12fbc3a4cec4a8fd3b lra: Replace subregs in bare uses & clobbers [PR108681]
b9c78605039f839f3c79ad8fca4f60ea9a5654ed vect: Make partial trapping ops use predication [PR96373]
26f4b055d97804666d6d144b2af9b9dee0854354 testsuite: adjust patterns in RISC-V tests to skip unwind table directives
994224236e0231807681b62e880d3c2772c69521 tree-optimization/108782 - nested first order recurrence vectorization
ec23e9e25eb64bb066dc408fd498861b8587bec8 target/108738 - STV bitmap operations compile-time hog
acb51b5c801540c7c15236f9f5a6be893216584f RISC-V: Add integer compare C/C++ intrinsic support
fca68b0bbf8a8a42db2888337325d468e6f73f16 RISC-V: Add vmsne.vx C api tests
946ed63e6161dddcde458cfb09ff168fc4e7e32c RISC-V: Add vmsne vv C api tests
13a256448a58bc80ee5b564b4edf80b5bdcfb100 RISC-V: Add vmslt vx C api tests
85a8ad0a351d6a5774da8e42f98b27ebb9e3a9dd RISC-V: Add vmslt vv C api tests
fec15ae4a3871b03696765daf8d141275b1b3379 RISC-V: Add vmsle vx C api tests
f7b8022bcd4cb736a2a3b60867e5cfb9304ec9b5 RISC-V: Add vmsle vv C api tests
6dae0aa24842570e14e27b567a740d9851db24ee RISC-V: Add vmsgt vx C api tests
fe1a6c2c8a219c12d5fb242c23cf3be58e253610 RISC-V: Add vmsgt vv C api tests
5893cfb26a15e20e0049aeb07440547a4055029b RISC-V: Add vmsge vx C api tests
52ba1d2e2358af522af1fb75155652b8ff8274d9 RISC-V: Add vmsge vv C api tests
76db33c592df22442b19bab72ee13488463c060c RISC-V: Add vmseq vx C api tests
4d06fc379093fd2353c6e09619d40bc15c89465a RISC-V: Add vmseq vv C api tests
6ec7b7b3e46da49ce9e9fb38e1c1405f988d76ae RISC-V: Add binop constraints tests for integer compare
ecdbebde7cb9ab63ae62bdf9296fe118a507b172 RISC-V: Add vmsne vx C++ tests
f87fca5d7f2568dc15387645e5126115b0b2583f RISC-V: Add vmsne vv C++ tests
18f4691e31e50fae2098c2970ee92c1385929a81 RISC-V: Add vmslt vx C++ tests
400f003ee5531d6998c53082a3f255690e63778c RISC-V: Add vmslt vv C++ api tests
6c4262a52590bb1768238090f7f9d8d0ef1e252f RISC-V: Add vmsle vx C++ api tests
d6d9206d2b652d3d2c017ab53485419f37a88fc3 RISC-V: Add vmsle vv C++ api tests
cfbcbe8e27bf9280b0242bcba746b02c566d50e5 RISC-V: Add vmsgt vx C++ tests
0d689135ffd7df101240d8c44cc6a56f2fe4aeb2 RISC-V: Add vmsgt vv C++ tests
92e575eacf0294bdb898f701c81a6caa800b9122 RISC-V: Add vmsge vx C++ api tests
5e96553eba9efca0aae6f9d67bbaaaa8f7e28192 RISC-V: Add vmsge vv C++ tests
c4e770c45218277499b2ffa22bcbfbf31bca3a07 RISC-V: Add vmseq vx C++ tests
a75fa2518d4ad997cb11145f625b4aebac5b9293 RISC-V: Add vmseq vv C++ tests
272e119d97217562803b42384db546e86b511d11 RISC-V: Finish all integer C/C++ intrinsics
a432d0d9e063940db3e1f117af0b1a9fe2748642 RISC-V: Add vwmacc vx C api tests
645bfe04ce118a462ad2b3d59a323619dea95560 RISC-V: Add vwmacc vv C api tests
51307617b4a8a6e33c9ff6159d3b9a15df60afe0 RISC-V: Add vnmsub vv C api tests
a462e612073fc2cade8ff6ab225d8b6e0dd164e2 RISC-V: Add vnmsub vx rv64 C api tests
496ae797c204bcaa8b18c7b9dc4bb60a6c941ebf RISC-V: Add vnmsub vx rv32 C api tests
3a70551148edd1774d14bdce9a2dd4ea9a959b1f RISC-V: Add vnmsac rv64 C api tests
1d403b1e79f2f5a0a30c0ff73360d56482529c1b RISC-V: Add vnmsac vx C api tests
46444e3984aad46de72633790545044a2bf3d77b RISC-V: Add vnmsac vv C api tests
0bca2036dc7a168e8a04aac7caf2f3d7a387a1a7 RISC-V: Add vmadd vx rv64 c api tests
0033ab7b923fb967dfd489d39c50182b5b31f4f9 RISC-V: Add vmadd vx c api tests
abbfd706ceebfbec4ab77428993589e18586d2bd RISC-V: Add vmadd vv C api tests
987f4bb2f8d10afd8e5a6ec1aaa578208bf0ce99 RISC-V: Add vmacc vx c api tests
dce0e53cf62665d5a65105b02f97ae8b86313b78 RISC-V: Add vmacc vx rv32 c api tests
ddd7c2e948923da7ffbed10b85f9bee2eeb42492 RISC-V: Add vmacc vv c api tests
5cf9afc5965e36acf430d0fef0bd15fe8f3454f9 RISC-V: Add ternary constraint tests
c4e2a63e4620ab85f84b06e6e5f1553caae4a576 RISC-V: Add vwmacc vx C++ api tests
a5012e90b252580306fa6ee6e0617393043f045a RISC-V: Add vwmacc vv C++ api tests
326fe0f2f557adf1a475783d9bb905b8295e4d27 RISC-V: Add vnmsub vx rv64 c++ api tests
1ff4063f25813c27a8abcbb48d4bff7452f99af5 RISC-V: Add vnmsub vx rv32 c++ api tests
249be04bb830eae753c6171bb77c03872f5cee90 RISC-V: Add vnmsub vv c++ api tests
7ce337324a8bafef59d268b647d3a03542c511bb RISC-V: Add vnmsac vx rv64 C++ api tests
0fd29de569b0644b13e437b2b4eb072c076a159f RISC-V: Add vnmsac vx C++ api tests
47919b0decb469054a784ef32c98486074808d9d RISC-V: Add vnmsac vv c++ api tests
4e43f0cb269748aa0bfab531e63196d0dd3021c2 RISC-V: Add vmadd vx C++ api test
5db1182b7ca1778a1be0856bc14d41f8707b3dbd RISC-V: Add vmadd vv c++ api test
1ec316c538aa2ae383e6b87f79616330bcf06016 RISC-V: Add vmacc vx rv32 c++ api tests
4a9a9a787b9fc8fbc23599016bcd713823e99170 RISC-V: Add vmacc vx rv64 c++ api tests
81f0945cd97cf0645c56b14827abad63164bd80c RISC-V: Add vmacc vv c++ api tests
441c466fd4d8b9afd99f585f7c4bfade911c4652 tree-optimization/108791 - checking ICE with sloppy ADDR_EXPR
cb3e0eac262e55774949b1717c64da383adbc621 don't declare header-defined functions both static and inline
b9da8f063a6c65228172528d5cbf9eff511350da RISC-V: Replace simm32_p with immediate_operand (Pmode)
3b6d44f459d28ab17d42967ce1c0490397e30e40 RISC-V: Remove "extern" for namespace [NFC]
5804c20b13f28cf6c2e464003c338104bb508906 RISC-V: Move saturating add/subtract md pattern location [NFC]
b2dec44ee77c00bab51faa8527106a01b7c796f4 RISC-V: Rearrange the organization of declarations of RVV intrinsics [NFC]
3cb0fa12126a287160dedec4fa9ab3e4425bf619 RISC-V: Normalize SEW = 64 handling into a simplified function
c2031252868015f8a8ad1c67362a8b37ce6f8030 RISC-V: Rename tu_preds to none_tu_preds [NFC]
1ed93bc7ed88d1164bcccbd38a840b8b0a67961c RISC-V: Add RVV all mask C/C++ intrinsics support
6108dc91cdaf19b495ae5f5defd31b96c0b87060 RISC-V: Fix vmnot asm check (Should check vmnot.m instead of vmnot.mm)
63471c5008819bbf6ec32a6f4d8701fe57b96fa9 tree-optimization/108816 - vect versioning check split confusion
b943d5771e1cdaba3004c4ca692ffa9e1a094f8d RISC-V: prefetch.* only take base register with zero-offset for the address
4c86188ca4ca4f25eb7ab7152439f9e81ed17a87 libstdc++: Update baseline symbols for riscv64-linux
31b77593edbf623fb8f84e35baeb927fdd7c55b6 gccrs: Ensure uniqueness on Path probe's
e7a69d4533add13ff8f5468131cc824f6fa9e154 gccrs: Fix undefined behaviour issues on macos
a0abd652e3878bd79ed802e868324ae3f617c380 RISC-V: Adjust vsetvl testcase.
c57fbdd6f11de2916fd0df6553e35117d3d12c5a RISC-V: Make the test condition more strict for gcc.target/riscv/_Float16-zhinxmin-1.c
dc244cdc05a0cc4a7c40c5c5027c12cc1dc6e4d3 RISC-V: Add floating-point RVV C/C++ api
c878c6586dee353e685364910e02ad1a611d4634 RISC-V: Add RVV reduction C/C++ intrinsics support
3da77f217c8b2089ecba3eb201e727c3fcdcd19d vect: inbranch SIMD clones
aee5ee35602e0098c2ae16fa2fc9c8845caf92ed Rust: In 'type_for_mode' langhook also consider all 'int_n' modes/types
af46073dbe83d88e2d93d967da447346b22c70bb Fix memory leak in if-conversion
2e29e2fbeb8936e5c85cefaf547cba42e17e137b libstdc++: Simplify three helper functions into one
426b0ae103894d1f1bd82e5f049ff8a53bd82a8d Fix memory leak in PTA
35a067020e41d97bc3be15b518b3dc2a64b4aae2 RTEMS: Tune multilib selection
ef22c3e90b5010a5229e70907ad2087f774fdfc0 Change vec<,,vl_embed>::m_vecdata refrences into address ()
2dd68cddbc745de2c4a4b4982673122716c8231c Avoid default-initializing auto_vec<T, N> storage, fix vec<vl_embed>
e3837b6f6c28a1d2cea3a69efbda795ea3fb8816 tree-optimization/108950 - widen-sum reduction ICE
85203d52bfa4a84da5f50e0a242891308ffa8d83 tree-optimization/108970 - ICE with vectorizer peeling
520403f324a6ed8b527f39239709dd0841b992e2 cfgexpand: Handle WIDEN_{PLUS,MINUS}_EXPR and VEC_WIDEN_{PLUS,MINUS}_{HI,LO}_EXPR in expand_debug_expr [PR108967]
a2926653ebbc88e8bba335563fa86b44651598d6 testsuite/108985 - missing vect_simd_clones target requirement on test
2a8ce4b52f5892a10a02b94d7be689e59a444ff6 vect: Fix voluntarily-masked negative conditionals [PR108430]
076d309e36c682176e9f85dc8593e6f2c9e6e75f vect: Don't apply masks to operations on invariants [PR108979]
51af8a6401eea726d3498e6b2aba456b6af246d6 d: vector float comparison doesn't result in 0 or -1 [PR108945]
929c6b8cd12a3bd338a4c250274a9d86da5b2ea7 d: Allow vectors to be compared for identity [PR108946]
97651be1b63ae79eeff12b2867454d186e4cb7e0 testsuite: Fix up syntax errors in scan-tree-dump-times target selectors
9debb240a4b1a711c0648fd9e4385dbde5ad45fd RISC-V: Fix wrong partial subreg check for bsetidisi
602cfc746e9e0447221896a3d93608c6db3a89e5 RISC-V: Allow const0_rtx operand in max/min
ec99ffabc3d32bbc0cce164e84942e176c13e75c RISC-V: Add scalar move support and fix VSETVL bugs
2a2c4c93fda928d9726a96afe0ef912d2aa53599 RISC-V: Add testcase for VSETVL PASS
f8ba8a45edcff7fe117f88deff7184dffe3af311 RISC-V: Remove void_type_node of void_args for vsetvlmax intrinsic
1bff101b7e66feed0efc7f656468647e0b5fb48c RISC-V: Add permutation C/C++ support
7caa1ae5e451e780fbc4746a54e3f19d4f4304dc RISC-V: Add RVV misc intrinsic support
7e52f4420ffb0946dfc97704d72fa8aa67251495 RISC-V: costs: miscomputed shiftadd_cost triggering synth_mult [PR/108987]
89456334473c6b1ea1713740fb5f5191cd0b2235 RISC-V: Add prototypes for RISC-V Crypto built-in functions
2c8095109b8756bebc5d0ac2cc0ded34fd6a46df RISC-V: Implement ZBKB, ZBKC and ZBKX extensions
072c558a0f181bec139d68b451e7aa4907dbc5ef RISC-V: Implement ZKND and ZKNE extensions
e6416e4323f346968533de404518b2aaf186ead1 RISC-V: Implement ZKNH extension
2554d90c6c2cf80559b918d387944da35fc6aa23 RISC-V: Implement ZKSH and ZKSED extensions
44c918b50af64d1c0f27067b2671e1a4f744841b RISC-V: Fix ICE for avl_single-86/avl_single-88/avl_single-90
ca27d765f1d88a0f9d625b3519b6a8b1f8b19cc7 testsuite: Fix up syntax error in scan-tree-dump-times target selector
c1873079b05e399355eb79e4828ed9ba2d0c6968 tree-optimization/109025 - fixup double reduction detection
247cacc9e381d666a492dfa4ed61b7b19e2d008f RISC-V: Bugfix for rvv bool mode precision adjustment
b2b841fa25513a87fcb6e8195c2ad3ea354426d4 testsuite: Fix another syntax problem in slp-3.c
2dc73876fc9a0df4c3af2766319402d14d39db33 [PATCH v2] vect: Check that vector factor is a compile-time constant
ab7bb445ee586258a6210462e92ed196d61beb9e RISC-V: Fine tune merge operand constraint for integer/load/store
a803c268c5529624bdb7d02131d4862516a63c22 Extend nops num in "maybe_gen_insn" for RISC-V Vector intrinsics
60bd33bcbb75fbe040efe681f81e864a0df2244d RISC-V: Add fault first load C/C++ support
2246d576f922bae3629da0fe1dbfcc6ff06769ad middle-end: Revert can_special_div_by_const changes [PR108583]
0b3c630fcc44063a61f6131af48a4171b1de2b37 middle-end: don't form FMAs when multiplication is not single use. [PR108583]
81fd62d1378b7ddc1fa0967cbddcdcdcdd2d8d8c middle-end: Implement preferred_div_as_shifts_over_mult [PR108583]
7ff57009bcc728044ba2de339ecd16721d48aba3 RISC-V: Fine tune RA constraint for narrow instructions
6f6eba35b9f06d35ff7bea81969fe905a5584bdc RISC-V: Fix ICE of RVV compare intrinsic
9dd51550b7d140f5fcc60f892cf68b59ff667b66 RISC-V: Remove RVV intrinsic API test
2219aed9ad6f2678eac457b7de0984dbcde18679 RISC-V: Fine tunning merge operand constraint
72b52751c60abb327c73716259485d04b8eabe4f tree-vect-patterns: Fix up ICE in upper_bound [PR109115]
0e6f87835ccabfe84afe412583544ff6e6292352 RISC-V: Avoid calloc() poisoning on musl
8351535f20b52cf332791f60d2bf22a025833516 riscv: Add basic XThead* vendor extension support
c36fb3ca9eef56bc2f597e0fee577aca96ec3754 riscv: riscv-cores.def: Add T-Head XuanTie C906
b77c32273b432db3f04175b95143b3ed5214f6f3 riscv: thead: Add support for the XTheadBa ISA extension
d328d3a6f8756ed61b3cdf3675b24051f7d3b2ef riscv: thead: Add support for the XTheadBs ISA extension
c493fa3892487c22d0bdd817361a02bd523fc2e7 riscv: thead: Add support for the XTheadBb ISA extension
8e7ffe126debfbc59e2d359ef3c37899327e2055 riscv: thead: Add support for the XTheadCondMov ISA extensions
b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6 riscv: thead: Add support for the XTheadMac ISA extension
75047aeb7e6af248dee47ee29bdcd57f93e7352e riscv: thead: Add support for the XTheadFmv ISA extension
02fcaf412ae9508b75efa9602cd4ac58bc63d6a4 riscv: thead: Add support for the XTheadMemPair ISA extension
bd2d206b7b7d32ef6f45ce23192cfaf5fe14ac3d [testsuite] fix array element count
02880e7803b19c357718abd2f0d567b4a761f318 RISC-V: Use reg_or_subregno to check regno [PR109092]
c413abed869e7e34a86855a015413418f3c6b595 RISC-V: Handle undef for vector mask patterns
b49aedf6aed4911c8473738a88e839703f51386d testsuite: Fix up vect-simd-clone1[678]*.c tests [PR108898]
49a8bce43cdc1d1b48efa5eeb2a4097cfca1dc22 testsuite: Remove obsolete comments [PR108898]
26adc870e3675591050f37edab46850b97a3c122 tree-optimization/109219 - avoid looking at STMT_SLP_TYPE
8ff3ca2d94721fab78f167d435d4ea4fa4fdca6a libstdc++: Fix simd compilation with Clang
7712736376b2ee775f88976117b4e8b4ea37841b Remove TARGET_GEN_MEMSET_SCRATCH_RTX since it's not used anymore.
ba31f9a3c8fa9405a9a58094d6dc83bab0823786 RISC-V: Add riscv_vector target check
0e2715176df3787d1470d7b9bde26b1b5e16e1e2 RISC-V: Fix wrong RTL pattern for ternary instructions.
a481eed8fd01837cdf011ea9a17853505080a888 RISC-V: Fix wrong vsetvli fusion for vmv.s.x
116a8678840f9f52ec14639ff07e302a8c429f32 RISC-V: Implement __riscv_vlenb PR109228
cd0c433e5faba9a18f64881cd761a53a530aa798 RISC-V: Fix LRA issue for LMUL < 1 vector spillings [PR109244]
37dd1f14b6e0e7775973e0f31876066f503f5b21 RISC-V: Fix loss of function to script 'multilib-generator'
3a982e07d28a46da81ee5b65b03a896d84b32a48 RISC-V: Bugfix for rvv bool mode size adjustment
484c41c747d95f9cee15a33b75b32ae2e7eb45f3 tree-vect-generic: Fix up expand_vector_condition [PR109176]
378ec7b87a5265dbe2d489c245fac98ef37fa638 [testsuite] test for weak_undefined support and add options
07fc3491260e6b5d261433c977a4e069f5ab40c1 match.pd: Fix up fneg/fadd simplification [PR109230]
50a36a9541526708881f2ac0c4f180506bcf80bb Docs, OpenMP: Correct internal documentation of OMP_FOR.
9da6f93144619b0f798c2b43d7cf4fc8d42c13a0 target/109296 - riscv: Add missing mode specifiers for XTheadMemPair
a21bd7faba67997a6da457dbda16f15bca1a9156 Fix PR target/109140
5a923516ae61ddc6dd863891db13189cbf392411 RISC-V: Define __riscv_v_intrinsic [PR109312]
c9954996cd647daf0ba03e34dd279b97982f671f tree-optimization/109154 - improve if-conversion for vectorization
8dd57939c20b5e218404a838f514429f8e414dea tree-ssa-math-opts: Move PROP_gimple_opt_math from sincos pass to powcabs [PR109301]
ad32fcb8e91ba85cb4676c6249b6adc4b0daf9df scan generic vector tests before lowering
b2f327b9be81326c9e59fc6da98074c909ac7408 RISC-V: Add Z*inx imcompatible check in gcc
fe42e7fe119159f7443dbe68189e52891dc0148e Rename ufix_trunc/ufloat* patterns to fixuns_trunc/floatuns* to align with standard pattern name.
608388486a54afe98aed0f105a6101ae7a9ff66c RISC-V: Fix missing file dependency in RISC-V back-end [PR109328]
db4f7a9b47d148b5074ac15910124c746fb7a96f RISC-V: Fix ICE and codegen error of scalar move in RV32 system.
802ab7d0db5b5aa46edc8d82526d97258c599927 RISC-V: Fix reload fail issue on vector mac instructions
63e95a83cedd95e4b054dbd602082b0622e55a33 RISC-V: Fix typo
840354060e23ff28d325af2b8422233ce14f40f8 riscv: Fix bootstrap [PR109384]
4f81edad41caea4ddd269555f88790cec28cc9d9 RISC-V: Fix typos
fdc5abbdcfb65d415af6c40230f8f07872e51e49 [PATCH] RISC-V: Fix PR109399 VSETVL PASS bug
ce1e682ca21400d9b59f08f0416d96e0bac369d8 [PATCH] RISC-V: Fix SEW64 of vrsub.vx runtime fail in RV32 system
0f816116356fec32e3a3a2fb5af790a0438c5da4 Fix typo in -param=vect-induction-float= attributes
804208a2ab817c17d1eea627b671e77a15545a01 [testsuite] enable -maltivec like vect_int for signbit-2.c
3821669164d6d925de393470447e91c31bc78074 gccrs: macros: Perform macro expansion in a fixed-point fashion.
c18b1b0bc78c27257cfc8448581564337412f567 riscv: Fix genrvv-type-indexer dependencies
101380a8394c22a7a2ea70de2060ee93716156e2 PR tree-optimization/109392
58c8c1b383bc3c286d6527fc6e8fb62463f9a877 if-conv: Restore MASK_CALL conversion [PR108888]
40fc8e3d4f600d89e6b065d6f12db7a816269c8f RISC-V: Fix regression of -fzero-call-used-regs=all [PR109104]
0c5e64c4249322a178e1a0e843874e4d6b43b992 RISC-V: avoid splitting small constant in <or_optab>i<mode>_extrabit pattern
2d7ad38707e1fd71193d440198cc0726092b9015 tree-optimization/109469 - SLP with returns-twice region start
df7f55cb2ae550adeda339a57b657ebe1ad39367 tree-optimization/109473 - ICE with reduction epilog adjustment op
31eb8f18bbe64613fd8d77c4520c00beeb13598f RISC-V: Fix supporting data type according to RVV ISA. [PR109479]
9d1a6119590ef828f9782a7083d03e535bc2f2cf combine: Fix AND handling for WORD_REGISTER_OPERATIONS targets [PR109040]
040e64b09d4422c7d3c51bee098043782112b924 Fix vect-simd-clone testcase dump scanning
bf24f2db2841b97bc5e86bf9294d61eef32f83b3 tree-optimization/109502 - vector conversion between mask and non-mask
a87d95def0dcaad7a447e365d2f4a8edd9e00b02 vect-simd-clone testcase adjustments
a647198fcf7463a42c8e035a429200e7998735dc [committed] [PR target/109508] Adjust conditional move expansion for SFB
0c4d366ef757da28800f786fb5ea02b6e4918719 RISC-V: Add test cases for the RVV mask insn shortcut.
2e6b57196dd0e1f4b308abb958f5f905f0ba6aba RISC-V: Fix testsuite fail on RV32
a1f25e04b8d10bbe5dcaf98bb7e17cdaec9f169d testsuite: update builtins-5-p9-runnable.c for BE
f66ae49bba7d3b8c999498a0e166c0a2f99ec61a tree-optimization/109524 - ICE with VRP edge removal
7ec03c41de320fb747fa2a90f5d3b6db3aa4dde1 testsuite: Fix up vect-simd-clone-1[678]f.c tests some more
0ccf520d349a82dafca0deb3d307a1080e8589a0 RISC-V: Optimze the reverse conditions of rotate shift
a782346757c54a5a3cfb9f416a7ebe3554a617d7 RISC-V: add a new parameter in riscv_first_stack_step.
8c010f6fe5ebe80d2e054b31e04ae0e9f12ae368 RISC-V: Clean up the pr106602.c testcase
e6b050da8a4513ab37fd3699c7a963421fbe4d81 RISC-V: Set the ABI for the RVV tests
c16848ed8f30be952ac0167fd464ae794fa5ac67 RISC-V: Force ilp32d for the T-Head FMV test
60524be1e3929d83e15fceac6e2aa053c8a6fb20 RISC-V: optimize stack manipulation in save-restore
3f0f4e0fa0b1f9c6217bf5018df4d0836cad84c7 RISC-V: make the stack manipulation codes more readable.
2349e69125335d4c8c5e43cf3643844519d154c3 match.pd: Improve fneg/fadd optimization [PR109240]
14c1a8dfa3eaea283ab467c2aa3a62a25d3b49cb Docs: Add doc for RISC-V vector intrinsics
b7c54e3f48086c29179f7765a35c381de5109a0a libstdc++: Export global iostreams with GLIBCXX_3.4.31 symver [PR108969]
9874ceed091a0ce17b23d8d77b5bf90b8902a3c0 Add TARGET_ZBKB to the condition of bswapsi2, bswapdi2 and rotr<mode>3 patterns
c9d7fbdf3e752be40c34855741e7c27121315744 vect: Verify that GET_MODE_UNITS is greater than one for vect_grouped_store_supported
ade0a1ee5c6707b950ba284adcfed0514866c12d tree-vect-patterns: Improve __builtin_{clz,ctz,ffs}ll vectorization [PR109011]
7838574b5aca179e347eb972880ea8376a2cc6b5 Avoid non-unified nodes on the topological sorting for PTA solving
fac24d43e68838c63bfe112c8fb63aa3df960429 Revert "libstdc++: Export global iostreams with GLIBCXX_3.4.31 symver [PR108969]"
978e8f02e8edebaf21ce32768cce603f650459e4 RISC-V: Align IOR optimization MODE_CLASS condition to AND.
9fdea28d6ace8c8e5ac64a55685d310ba8dfa3cf RISC-V: Support 128 bit vector chunk
57e7229a29ca0e9929b61051e4f5857f0b41b6c7 PR testsuite/106879 FAIL: gcc.dg/vect/bb-slp-layout-19.c on powerpc64
705b0d2b62318b3935214f08a1cf023b1117acb8 tree-vect-patterns: Pattern recognize ctz or ffs using clz, popcount or ctz [PR109011]
98ebdda3fd81c2c87ef0e73de9c94135fb49210f RISC-V: Fix simplify_ior_optimization.c on rv32
a2d12abedc89a9439fd6aadc38730fdadca0684f RISC-V: Fix wrong check of register occurrences [PR109535]
9fde76a3be8e1717d9d38492c40675e742611e45 RISC-V: Fix riscv/arch-19.c with different ISA spec version
7b206ae7f17455b69349767ec48b074db260a2a7 RISC-V: Fix RVV register order
07e2576d6f344acab338deeb051845c90c1cf6a3 [PR target/108248] [RISC-V] Break down some bitmanip insn types
87c9bae4e32b54829dce0a93ff735412d5f684f8 tree-vect-patterns: One small vect_recog_ctz_ffs_pattern tweak [PR109011]
d51f2456ee51bd59a79b4725ca0e488c25260bbf RISC-V: Add local user vsetvl instruction elimination [PR109547]
98d66b204932e343bbf940990914b949e8fccbd5 riscv: Fix <bitmanip_insn> fallout.
d06e9264b0192c2c77e07d7fb0fe090efcb510c0 RISC-V: Defer vsetvli insertion to later if possible [PR108270]
cddfe6bc40b3dc0806e260bbfb4cac82d609a258 tree-optimization/109573 - avoid ICEing on unexpected live def
c58c0771b7a3dbd2a00cd4b6ca2301d74b6cd4e2 match.pd: Fix fneg/fadd optimization [PR109583]
7a0cbaf7f802df209840d78740ffc749dadd1ce3 testsuite: Fix up pr109011-*.c tests for powerpc [PR109572]
8311c26757657fe8ffa28ca1539d02d141bb8292 Add testcases for ffs/ctz vectorization.
4eae76d10433b12bdb6944c2b3be818ccc3b5986 RISC-V: Optimize fault only first load
c5a1fa59ae3f44059a79086cbc506800d4149b69 RISC-V: Add function comment for cleanup_insns.
ff8f95449350372b584cfcd28a7d9d71f52eea50 RISC-V: Eliminate redundant vsetvli for duplicate AVL def
60bf26a412a9ec2b467c04fac1dfacef2ef09c6d This replaces uses of last_stmt where we do not require debug skipping
0530254413f8d356805442f659c6d2921739284d riscv: relax splitter restrictions for creating pseudos
392200f807fe2ee377ecc451ff75894b89335c33 avoid splitting small constants in bcrli_nottwobits patterns
2fb7df82b8edd64ea31417592619c4cee00b05bc RISC-V: Add auto-vectorization compile option for RVV
a8d5e14f524283484c2a466353f92f7eaadae9f7 RISC-V: Bugfix for RVV vbool*_t vn_reference_equal
a010f0e08501b267ecb925ff88450f58e01dd991 RISC-V: Fine tune gather load RA constraint
4f9eac2f262dfe938edf52045ef3fcdcf925af2d RISC-V: Fix redundant vmv1r.v instruction in vmsge.vx codegen
06792c142c5ac8424db1ca36d11b0b9d42de3f21 RISC-V: Optimize comparison patterns for register allocation
5fce06b868ec0d4f75530a17d6fe6b12b7c9b5f0 RISC-V: Fine tune vmadc/vmsbc RA constraint
5bdc5155138abeb244be1690998b359152445be6 Convert users of legacy API to get_legacy_range() function.
637037f4e637563c4f50ed04adfa2baf90671491 Remove some uses of deprecated irange API.
a8e1551bdb372aa3cfe754429b5efd6229ae5fdb RISC-V: Legitimise the const0_rtx for RVV load/store address
f797260adaf52bee0ec0e16190bbefbe1bfc3692 RISCV: Inline subword atomic ops
b6dea04fca6f249c553cb18d670a0845cd0579f8 Add sbr_lazy_vector and adjust (e)vrp sparse cache
0a38f677463ff8a4fb61b049263aa596ef6471a7 Create a lazy ssa_cache.
2a26872984c109a98d0ad733b0c68c3e1648ec86 RISC-V: Fix sync.md and riscv.cc whitespace errors
d94ca762f6e0e4f117c1a61aa6d6613b2abc1216 testsuite: adjust NOP expectations for RISC-V
865869dc6943eb5dee855bc1ea88b09b7dabc641 libstdc++: Add @headerfile and @since to doxygen comments [PR40380]
a82c6ab0aade4124e1903dda6f6f85c4c317fcec wrong GIMPLE from (bit_field_ref CTOR ..) simplification
f2d6beb7a4ddf18dd95fdcc336181a8702a9f55f Unloop loops that no longer loops in tree-ssa-loop-ch
e0cf929d99bebd9a740db6db45d69957514e0c12 RISC-V: Add required tls to read thread pointer test
821ef93976e750c118d42a2ad33b96dbd1b9f3a5 tree-optimization/108752 - vectorize emulated vectors in lowered form
8b84d87969ef2443516a79a80c22d2b6dba04630 RISC-V: Allow RVV VMS{Compare}(V1, V1) simplify to VMCLR
24905a4bd1375ccd99c02510b9f9529015a48315 Adjust costing of emulated vectorized gather/scatter
6d4b59a9356ac4df7f4ae370495dc3366d0daa55 Add emulated scatter capability to the vectorizer
1966741378d5f456d0245960fa09074b6320b4d6 RISC-V: Eliminate redundant zero extension of minu/maxu operands
d9df45a66b2c8f543106be0a2387bbe6195b00a6 RISC-V: Added support clmul[r,h] instructions for Zbc extension.
065be0ffbcd676b635d492f4679e635b6ece4fe4 RISC-V: Add divmod expansion support
a5b2a3bff8152aa34408d8ce40add82f4d22ff87 RISC-V: decouple stack allocation for rv32e w/o save-restore
2744dbb9ecf104a113da3a0f39115da4653bb676 gcc: Use ld -r when checking for HAVE_LD_RO_RW_SECTION_MIXING
e1366a7e4ce1d4dfe43dfa50d451ac45da00975f vrange_storage overhaul
f385252b2336a4a57a30fddf82e558c73bcc85cc tree-optimization/109672 - properly check emulated plus during vect
87c347c2897537a6aa391efbfc5ed00c625434fe RISC-V: fix build issue with gcc 4.9.x
1adb1a653d6739589b12337c974c7e741cfb187c RISC-V: ICE for vlmul_ext_v intrinsic API
9cfdd5af3efd4a7e52ae7f97f55effc436c0cf45 RISC-V: Name newly added flags in changelog
1d003da715a5cb4bc80e6ecf560f2be1ecd602e0 libstdc++: Regenerate baseline_symbols.txt files for Linux
f37a36bce81b50a43ec1613c1d08d803642f7506 RISC-V: Eliminate SYNC memory models
dcd7b2f5f7233a04c8b14b362d0befa76e9654c0 RISC-V: Enforce Libatomic LR/SC SEQ_CST
4990cf84c460f064d6281d0813f20b0ef20c7448 RISC-V: Enforce subword atomic LR/SC SEQ_CST
d199d2e56da2379004e7e0457150409c0c99d3e6 RISC-V: Enforce atomic compare_exchange SEQ_CST
a61a067b15221de981afd4df8433e96a8cf32341 RISC-V: Add AMO release bits
6a2383f47ae70c31f91775142b9fb03f697741c2 RISC-V: Strengthen atomic stores
08c5d1804a027f1e4bee4ed5fda25522d9ac8806 RISC-V: Eliminate AMO op fences
942ab49b5f8955371cf5db23608ba5f5f5244152 RISC-V: Weaken LR/SC pairs
bff7c77386447936dd614ebc7086b826c99c6642 RISC-V: Weaken mem_thread_fence
b90e030a3cef2158579618ad883783170ef58fa0 RISC-V: Weaken atomic loads
bc24c51c0ccd64617864897ad071c98004ffc0a4 RISC-V: Table A.6 conformance tests
e8511cbba692a9f3ff4d9c74e902fab03f154bbd Docs: Add vector register constarint for asm operands
12847288da55965ce684c5dd1c53cc38a2d0a8a9 RISC-V: Add tuple types support
cb7f6ec9524ced259199ea049949f05f1ed999a5 RISC-V: Add tuple type vget/vset intrinsics
6313b0457394172b13978b9772d49eea1d68d3a1 RISC-V: Support segment intrinsics
203f3060dd363361b172f7295f42bb6bf5ac0b3b riscv/linux: Don't add -latomic with -pthread
4bd434fbfc7865961a8e10d7e9601b28765ce7be riscv: fix error: control reaches end of non-void function
82cfd93ae81a5687bf2a1b12d964c630e95517a7 tree-optimization/109721 - emulated vectors
0a26a42b237bada32165e61867a2bf4461c5fab2 OpenACC: Further attach/detach clause fixes for Fortran [PR109622]
37b5f031292fbdb854ee791de3883362cf2afcff tree-optimization/109735 - conversion for vectorized pointer-diff
124bc77ba9868db07d284b4dea31797da1468515 GCN: Silence unused-variable warning
d875d75653ed67e125e70dd8530182ce7872af65 RISC-V: Fix PR109615
3365956d55a6484097ff40fb81acb2345322044c RISC-V: Allow RVV VMS{Compare}(V1, V1) simplify to VMSET
0c1eaac3fd35eafedc8fb5638af30af0aea199d3 RISC-V: Legitimise the const0_rtx for RVV indexed load/store
8421f279e9eb00a2342ee3630dcdaf735b734fe8 RISC-V: Fix incorrect demand info merge in local vsetvli optimization [PR109748]
043550bceea7881163bba5d8a0486bb100a05809 libffi: fix handling of homogeneous float128 structs (#689)
2d76f2b45d6649174748d862a31bb95c53ee1117 RISC-V: Enable basic RVV auto-vectorization support.
b3e5cb9dc33628c7fee225c6a1bab68d2679d108 RISC-V: autovec: Add new predicates and function prototypes
6ad9e5e0c7b77938348eee0ede77cb5522a914ac RISC-V: autovec: Export policy functions to global scope
bc73bf831ef512b6a1c07ae150a7cbf2daed9fd6 RISC-V:autovec: Add auto-vectorization support functions
b9b7981f3d6919518372daf4c7e8c40dfc58f49d Remove duplicated definition in risc-v vector support.
9217e0dde1b7dbcff456d513334496404e626437 RISC-V:autovec: Add target vectorization hooks
730909fa858bd691095bc23655077aa13b7941a9 RISC-V: autovec: Verify that GET_MODE_NUNITS is a multiple of 2.
4c05f966a098744db9fa1e73074d7c08ace446fd Delete duplicated riscv definition.
17d683d4d3dc95d13096ec52ad9937a2b011f9a4 RISC-V: Handle multi-lib path correclty for linux
bf839c154d6cdee62f222277fa29c38509f25912 RISC-V: Fix ugly && incorrect codes of RVV auto-vectorization
69f1a8af45d8a42003c21489019ddfb01d88d30d PHIOPT: Add diamond bb form to factor_out_conditional_conversion
dd7136cff68528c77d9346e41a75ba41dfaf95e1 RISC-V: Improve portability of testcases
c139f5e106fcdcd5e820541f357937c6edd7b161 RISC-V: Factor out vector manager code in vsetvli insertion pass. [NFC]
69f3914414a303f0e2c8246e08925f90c207846c RISC-V: Fix dead loop for user vsetvli intrinsic avl checking [PR109773]
a2676383adf31a7b4b64b7b1817428f953041d73 RISC-V: Fix incorrect implementation of TARGET_VECTORIZE_SUPPORT_VECTOR_MISALIGNMENT
046551108378a00ee09cc2a071dd83b3fc7c35cf RISC-V: Insert vsetivli zero, 0 for vmv.x.s/vfmv.f.s instructions satisfying REG_P(operand[1]) in -O0.
003f388cddbbd3c8ff936f98355a90acda619030 RISC-V: Support const series vector for RVV auto-vectorization
0918360d709a32294913aef4392cec6c1dec1857 VECT: Add tree_code into "creat_iv" and allow it can handle MINUS_EXPR IV
b75c9e10379481b1b1e9dfdcc6aa81c9ba58cb1a RISC-V: Add vectorized binops and insn_expander helpers.
84d2899638a7207bc01159553e9489de7d65b494 RISC-V: Clarify vlmax and length handling.
8c08201f06e67d80a12dca9e5dc33334631285a6 RISC-V: Split off shift patterns for autovectorization.
6cb594f3ffca461ca6df56cc389f7b278e1047af RISC-V: Add autovectorization tests for binary integer operations.
44564a4ab7b403598791ed9f0e866e94093a0b9d RISC-V: Update RVV integer compare simplification comments
6445f1224509861f2d471a66134b98f26290586e RISC-V: Allow vector constants in riscv_const_insns.
de1ac6283faee2a0705cebefdeaafc08d562a2ea RISC-V: Fix RVV binary auto-vectorizaiton test fails
c2d62cdd63f34c2f5187687d4c7b9f00f7d8fa3a RISC-V: Reorganize binary autovec testcases
1c1a9d8ed840dc7d7467b30a8547967854c6c45f RISC-V: Add basic vec_init for VLS RVV auto-vectorization
4f67400b8475ee645e63f67bbb6b81ae1ab99ca8 RISC-V: Fix fail of vmv-imm-rv64.c in rv32
7a7f6b26259d22115ee4813ce130622ad1073d16 RISC-V: Suppress unused parameter warning in riscv-common.cc
cc0e22b3f25d4b2a326322bce711179c02377e6c tree-optimization/64731 - extend store-from CTOR lowering to TARGET_MEM_REF
c919d059fcb67747d3c0bd539c7044e874b03fb7 RISC-V: Optimize vsetvli of LCM INSERTED edge for user vsetvli [PR 109743]
ea7a9f361e71b0176ae7e6b6bdaaa95789cc7942 RISC-V: Improve vector_insn_info::dump for LMUL and policy
1d339ce8d002920fe8f1c968a04bb8b0c2580b0e RISC-V: Pull out function call with side effect from gcc_assert.
1871740c7803c2aea20f651f57b413bc425a051c RISC-V: Refactor the or pattern to switch cases
f2afe68a1755fe627ae7dca9cc6c3a72bb8222f9 RISC-V: Support TARGET_VECTORIZE_PREFERRED_VECTOR_ALIGNMENT to optimize codegen of both VLA && VLS auto-vectorization
66e268eb063de32b232f6f006048e6f7bae6268f Fix gcc.dg/vect/pr108950.c
e9ea407c474b52722cb135f3f6b265ef01aede04 RISC-V: Optimize vsetvl AVL for VLS VLMAX auto-vectorization
47c4e96ad61a19ec3adb39587bf0d7d0b51a51b3 OPTABS: Extend the number of expanding instructions pattern
5ed880788ba33302de5d78574464201e0fecbc70 RISC-V: Add rounding mode operand for fixed-point patterns
8cd140d3658c29df9571e5f926464f742d87e0c4 RISC-V: Add FRM and rounding mode operand into floating point intrinsics
fa1c2ec1bb5e6363839dce55421cdc6c3dd19726 RISC-V: Adjust stdint.h to stdint-gcc.h for rvv tests
008cbecf622a413ebcc8b41a737f30fd7e2a1abf RISC-V: Fix wrong select_kind in riscv_compute_multilib
e0f2f4711794e3117db9e97164c674bd96a52fe6 RISC-V: Support RVV VREINTERPRET from v{u}int*_t to vbool1_t
a04bf39f61ce7814d197d712760f08c206daf4f1 vect: Don't retry if the previous analysis fails
01d62e9b6c3e9fd3132f1616843103ccf81778ed RISC-V: Add rounding mode enum for fixed-point intrinsics
24bd7168112f96e363cacaf593b3ac0c38c238f9 RISC-V: Introduce rounding mode operand into fixed-point intrinsics
e682d300261c0f2c8a5cc51151adabfe98e1006c RISC-V: Add mode switching target hook to insert rounding mode config for fixed-point instructions
6da6ed95c9ca247d405da3dfb737b743686fe5e6 RISC-V: Remove masking third operand of rotate instructions
7b0073c6a4c21a558936c06a06ab1c6def9769ae RISC-V: Remove trailing spaces on lines.
b14af304965c20111ebd01d0c916353c927d9151 Machine_Mode: Extend machine_mode from 8 to 16 bits
c072df1ab144506cd8bb0ac81fb8f1aad69f0bd2 Fortran: Narrow return types [PR78798]
9907413a3a6aa30a4a6db4756c445b40f04597f3 gcc/config/*: use _P() defines from tree.h
9157b213f560fc7539a429075a3f1b6826e45523 c: use _P() defines from tree.h
ca2007a9bb3074146780fc1e1382c7f73eb6d71b gcc: use _P() defines from tree.h
64d6a4dfd983377c6a91f1711ead71dc59aaefac RISC-V: Allow more loading of const vectors.
e430b32528d03fc655142525793639f6aeb31590 RISC-V: testsuite: Remove empty *-run-template.h.
c104ef4b5eb1f781bbef953e3c282ef1ca94c4f1 RISC-V: improve codegen for large constants with same 32-bit lo and hi parts [2]
259b4b7d349dd3fd560144bd4617f526458b45dc RISC-V: Remove masking third operand of rotate instructions
9000da00dd70988f30d43806bae33b22ee6b9904 RISC-V: Fix CTZ unnecessary sign extension [PR #106888]
31cc55f4ff32475f8552205cbf341d4af8bb4fb7 Add bext pattern for ZBS
55914b016de8c8514c58eb59822677a69e44135c Fix riscv_expand_conditional_move.
660754a820465583df32a5f9601df7389c941920 RISC-V: Support RVV VREINTERPRET from v{u}int*_t to vbool[2-64]_t
285e0bb95dd3edf3e3312f0e0ee940594f46f77d vect: Refactor code for index == count in vect_transform_slp_perm_load_1
7b0986acf20ebe261221b800b6196acbf87f5ca2 RISC-V: Reorganize the code of CONST_VECTOR handling in riscv.cc
16df2790a58ebbeb949ffb790ebee7f6ed31936d VECT: Fix bug of multiple-rgroup for length is counting elements
8637aecd5aea70bb13c08b5b96d3cb24f5afcead RISC-V: Fix typo of multiple_rgroup-2.h
776d94f0b14235bf85d0cce4020eea86a20c91f7 RISC-V: Add "m_" prefix for private member
a8900fe4812f6b77d1349308bb4de08f7c130225 Skip some tests that won't work for target AVR.
b9fb093e7ccaee68be659d7d9711652c57e37aca libobjc: Add local macros to support encode generation [P109913].
da579188807ede4ee9466d0b5bf51559c96a0b51 libstdc++: Add missing constexpr to simd
51fd69ec2d57721ed502344ebe68b1643d9e7f34 RISC-V: Refactor the framework of RVV auto-vectorization
751da44bd9032878e3dbebc63f20aafec8794bd2 RISC-V: Fix warning of vxrm pattern
9d5034aad9868bed45472ef5bfac22dd9ac0e0cb Generic vector op costing adjustment
f504b70eb0fc1339322960041a85606df4547897 Account for vector splat GPR->XMM move cost
b6b8870ec585947a03a797f9037d02380316e235 tree-optimization/109747 - SLP cost of CTORs
1ede03e2d0437ea9c2f7453fcbe263505b4e0def Fold _mm{,256,512}_abs_{epi8,epi16,epi32,epi64} into gimple ABS_EXPR.
658938f3a173f4f9b3c8c8d22401fb7e31433f23 RISC-V: Fix magic number of RVV auto-vectorization expander
2203da5175851c20cac3c8ce1f342519e090de37 RISC-V: Fix incorrect code of reaching inaccessible memory address
0d76b785222a9d49a54c007537b636455072d37f RISC-V: Support RVV VREINTERPRET from vbool*_t to vint*m1_t
bed61b5646f3f62861879ae361ff9022957dcc1d RISC-V: Support RVV VREINTERPRET from vbool*_t to vuint*m1_t
e0600a02fc3eda109d12bdfccf1408c5bf2994db RISC-V: Add RVV comparison autovectorization
e55c134ebeef2fa23ad5f4d8afa36b5949b2852c vect: Enhance cost evaluation in vect_transform_slp_perm_load_1
ec40410d98e57fc6650241d4e05119a1f0af6a41 RISC-V: Add RVV mask logic auto-vectorization
29a60c13f8ed9982483b477b2c44ec1c2d2f9b1f RISC-V: Add FRM_ prefix to dynamic rounding mode enum
affee7dcfa1ee272d43ac7cb68cf423dbd956fd8 target/109944 - avoid STLF fail for V16QImode CTOR expansion
efd2b55d8562c6e80cb7ee8b9b1f9418f0c00cd9 libstdc++: Fix type of first argument to vec_cntm call
2f20d6296087cae51f55eeecb3efefe786191fd6 [testsuite] tsvc: skip include malloc.h when unavailable
53bd7622de70a4ca4a25cac953da3be2a24bc3c8 RISC-V: Remove FRM_REGNUM dependency for rtx conversions
31365eda4602181acced5b0479eb50ef1213e836 ada: Add size clause to System.Address
f97572c2aeddc71b01686993b978895e55890ab6 target/109955 - handle pattern generated COND_EXPR without vcond
f574e2dfae79055f16d0c63cc12df24815d8ead6 VECT: Add decrement IV iteration loop control by variable amount support
5bd67d7abddca87198b11efccedee42f82e9f3a9 RISC-V: Fix zero-scratch-regs-3.c fail
25907509787e3ef68cd8054460893cd316a8186a RISC-V: Add autovec sign/zero extension and truncation.
a1b23dcf2337ab8666fac7d1e191ca987710d184 RISC-V: Implement autovec abs, vneg, vnot.
272f920b78f5a9ff80755861fa07ec9eb1aa4b58 RISC-V: Add ZVFHMIN extension to the -march= option
c0df96b3cda5738afbba3a65bb054183c5cd5530 RISC-V: Fix incorrect VXRM configuration in mode switching for CALL and ASM
f8af48d8755018272cdb0cf2f250cf278829d7be RISC-V: Fix ternary instruction attribute bug
c48d7a6e3209021ec3a3d9c23601250405d94d96 RISC-V: Add RVV FMA auto-vectorization support
ff313e1c74b0360688cdd4a8894486b3941366cf RISC-V: Remove redundant printf of abs-run.c
e9fd9efc8d64f944cb480322ee5ed2d0a46db87d RISC-V: Fix VSETVL PASS ICE on SLP auto-vectorization
8196b58e0a1a466a41d2fd2f3c6eb3f6ee68685c ada: Fix crash on vector initialization
a99dc11fe272f6a1214f357b82f3f7eb5c7dabc3 RISC-V: Using merge approach to optimize repeating sequence in vec_init
3f4c3c929fe6a5c3b24a886ffb8380cbe4d09896 RISC-V: Eliminate the magic number in riscv-v.cc
6b828454246c5aef7f984bb6a2888699f8dcfb2d RISC-V: Refactor comments and naming of riscv-v.cc.
10680bc36aca7bfaee542a653a78813cf0d4fb1f RISC-V: Use extension instructions instead of bitwise "and"
a1806f0918c0d3612c99b6193b9703d4b4c82c21 RISC-V: Optimize TARGET_XTHEADCONDMOV
908546602e33e8810e98acd7634b22013346aa18 RISC-V: Add RVV FNMA auto-vectorization support
b1b92e72cdad1dc51058a26f1dadddd406fb8472 RISC-V: Fix warning in riscv.md
52577a301ef1b86d0a3fda9fed2477b4d46a124a RISC-V: Add floating-point to integer conversion RVV auto-vectorization support
21a07620f4bfe38f12e6d5be8b1eeecc29fa6852 riscv: update riscv_asan_shadow_offset
456cf52c0d35bdf66f5d86cce45a6af49a9ce1d8 riscv: add work around for PR sanitizer/82501
d8545fb2c71683f407bfd96706103297d4d6e27b Detect bswap + rotate for byte permutation in pass_bswap.
32a0266cc54a404007fca0d44dc9a299bbe70c1f RISC-V: Allow all const_vec_duplicates as constants.
3e2689e568425f14d6728504ad6f5d32b90320ad libstdc++: Simplify calculation of expected value in simd test
3279b6223066d36d2e6880a137f80a46d3c82c8f Enhance NARROW FLOAT_EXPR vectorization by truncating integer to lower precision.
fefa7db2c31fee449dd46dd6ed7f5a39fa884038 RISC-V: Fix unreachable test code for init repeat sequence.
5a98afec536ccc8e4530575edc5cf3420a4416b3 RISC-V: Add ZVFH extension to the -march= option
e2a326227977dd361bb3b52b8409ebc57240a2a7 RISC-V: Remove FRM for vfncvt.rod instruction
b65458005dfb38f2efdca52e42f3dbf4760f91bd RISC-V: Remove FRM for vfwcvt.f.x<u>.v (RVV integer to float widening conversion)
57920ae9653e8ef2b3f5f68c22894f5e65a3673d RISC-V: Remove FRM for vfwcvt (RVV float to float widening conversion)
644d168385f2e90da1985ed7307be0637ea184e9 RISC-V: Add testcase for vrsub.vi auto-vectorization
e1240bda3e0bb10ea6d24b278660fb3c6797f4f2 RISC-V: Add vwadd<u>/vwsub<u>/vwmul<u>/vwmulsu.vv lowering optimizaiton for RVV auto-vectorization
fb409a15d9babc78fe1d9957afcbaf1102cce58f libstdc++: Express std::vector's size() <= capacity() invariant in code
443613caa80d807250e5fbcbee961442c0c2ffbb RISC-V: Add RVV FRM enum for floating-point rounding mode intriniscs
0b317a60abe7181713ec70c20a0ef12aeb41e703 RISC-V: Introduce vfloat16m{f}*_t and their machine mode.
b7b255e77a271974479c34d1db3daafc04b920bc libstdc++: Fix code size regressions in std::vector [PR110060]
bf9eee73f3d849e249fd7eb1fd9ebe7314bbbc62 RISC-V: Support RVV permutation auto-vectorization
91430b73a059f58de83a82bba1a9ec2b750c48f9 RISC-V: Add vwadd.wv/vwsub.wv auto-vectorization lowering optimization
d5ea84cdd9a45e83b144442cdf9eb50efea9e28e RISC-V: Add __RISCV_ prefix to VXRM and FRM enum
691805ff8aa4cba5bded97821b61750a07b31ca4 RISC-V: Add test for vfloat16*_t (non tuple) types
37ff12b96d7c1ee5fe135253c7b9db7e2ba61b71 RISC-V: Fix warning in predicated.md
265357d401fb7215e8fea820d29a48eacdd75ad1 RISC-V: Optimize reverse series index vector
a06b9435b9652ea1b0d30e6fa176c91df314954f RISC-V: Add _mu C++ overloaded intrinsics for load && viota && vid
bffc52838e393a775e13dc48162669b0f43ebe09 VECT: Change flow of decrement IV
9f926f3a0c8dee7edb6807323a1fe2a92b33bfaa doc: clarify semantics of vector bitwise shifts
2e3401bd71b59ca0e03f051c5db286c32299b940 RISC-V: Add pseudo vwmul.wv pattern to enhance vwmul.vv instruction optimizations
f5c82bff5ef2930583eccc008cf73653720987b5 RISC-V: Fix warning in predicated.md
e1d2493f5912c340b50f49e4c2d928870faa172b Remove unnecessary md pattern for TARGET_XTHEADCONDMOV
5681872057f0b725ec8a7c8a1eec8fee205ad673 [RISC-V] fix cfi issue in save-restore.
8bdfa8a67a54545be1d90c46fb88a676695f25dc RISC-V: Support RVV zvfh{min} vfloat16*_t mov and spill
8ab9fb6b8e05cf9acca7bd8282979ede53524cf1 PR target/110083: Fix-up REG_EQUAL notes on COMPARE in STV.
1330977166aa8b3035b6314f5d3bac362f77be6b RISC-V: Move optimization patterns into autovec-opt.md
5c9cffa3a4aeeac1e462dbc8a35a5c4986f3381e RISC-V: Support RVV FP16 ZVFHMIN intrinsic API
a96ba6b958a00ad59c43cae10be65b263b5d0d2d RISC-V: Remove redundant vlmul_ext_* patterns to fix PR110109
2418cdfcf60b527dbfdabdda8523bf480ff295c4 RISC-V: Split arguments of expand_vec_perm
c7fe7ad612bb6aac1d078d215d5700ec4ef70e3c RISC-V: Reorganize riscv-v.cc
71ea7a3030590567938a3884583f7c0dd885f50c RISC-V: Support RVV FP16 ZVFH floating-point intrinsic API
f7f12f0b64646968d722c2d80f149934358a7d71 Testsuite: Fix a fail about xtheadcondmov-indirect-rv64.c
fe29963d40a721d18b5f688b9d54dd9021bfb90a vect: Refactor to allow internal_fn's
2f482a07365d9f4a94a56edd13b7f01b8f78b5a0 internal-fn,vect: Refactor widen_plus as internal_fn
8ebd1d9ab9510fe693763463cfb176084f420598 Remove widen_plus/minus_expr tree codes
6d4b6f7b5368858df316a2dc154a746a83be48ec RISC-V: Fix some typo in vector-iterators.md
da2d75af6013bdbf347b0b1b1e88d8e4c2f771b2 RISC-V: Fix 'REQUIREMENT' for machine_mode 'MODE' in vector-iterators.md.
17c796c7174bfc4a13a2aa74714cd295bf228668 [RISC-V] correct machine mode in save-restore cfi RTL.
7805890428c3b3adfbf37143a262f76b1557e4f0 RISC-V: Support RVV FP16 ZVFH Reduction floating-point intrinsic API
d1344c418005927e2c39d8285ec63461d72a6717 RISC-V] add TC for save-restore cfi directives.
ce2188e4320cbb46d6246bd3f478ba20440c62f3 libstdc++: Protect against macros
9165ede56ababd6471e7a2ce4eab30f3d5129e14 libstdc++: Avoid vector casts while still avoiding PR90424
88604bd17c3d0c82792020b4b0da95627b1caa9d RISC-V: Add RVV vwmacc/vwmaccu/vwmaccsu combine lowering optmization
42eb371286fa4f1f8419ff9e8059576e574c7a2c RISC-V: Fix ICE when include riscv_vector.h with rv64gcv
631e86b7adb55fb5ce418ce4cb5a59a1a3a6faa7 RISC-V: Support RVV VLA SLP auto-vectorization
fa8b4468e0d124bec0fdbfc0a168bd8c377b08ec libstdc++: Fix some tests that fail with -fno-exceptions
ae6c2d1edf289a8a04557e8fbfd4a61841c53345 riscv: Fix insn cost calculation
7f26e76c9848aeea9ec10ea701a6168464a4a9c2 riscv: Fix scope for memory model calculation
99bfdb072e67fa3fe294d86b4b2a9f686f8d9705 RISC-V: Eliminate extension after for *w instructions
e73a307f5027aeb124fa824621ad980aa983931b [Committed] Bug fix to new wi::bitreverse_large function.
8b327e0e273d525275e6236d1048192284779732 [testsuite] bump some tsvc timeouts
1379ae33e05c28d705f3c69a3f6c774bf6e83136 RISC-V: Add more test cases for RVV FP16
07b86ab138bf8be8cb331015cd2b9775c6856ac6 Fold _mm{,256,512}_abs_{epi8,epi16,epi32,epi64} into gimple ABSU_EXPR + VCE.
dac73e4c64bf62be18bd5203e4e0f3e6bc64b4dc Explicitly view_convert_expr mask to signed type when folding pblendvb builtins.
7f4644f8c683b6a60462a5e10ab67a0598945c37 RISC-V: Fix one warning of frm enum.
cb33116afc2da3024cffdeed5d90b69c3820017b RISC-V: Refactor requirement of ZVFH and ZVFHMIN.
3e12669a0eb968cfcbe9242b382fd8020935edf8 middle-end/110182 - TYPE_PRECISION on VECTOR_TYPE causes wrong-code
45b7da5f4951c3e9e5187487d611d16ff8cf148f testsuite: fix the condition bug in tsvc s176
47203d89a0ff914406f635bf9cf34e61ed6f19c5 VECT: Add SELECT_VL support
55dcf277b5dc10702593b7c2fc0fc63917ce14f7 RISC-V: Enable select_vl for RVV auto-vectorization
a53a83b63b4c4b3f7d2d997b3a26d82abb883f9a RISC-V: Add test cases for RVV FP16 vreinterpret
20c85207abd543c76818032632a5f1b3aea5495b RISC-V: Rework Phase 5 && Phase 6 of VSETVL PASS
7fc2b9ea2c41ae28154288c0a56e3e5c53b7df5b RISC-V: Support RVV FP16 MISC vlmul ext intrinsic API
b50b9d369c74b7bd86a2b2beb93877f1e6c253ea RISC-V: Add test cases for RVV FP16 undefined and vlmul trunc
e52be6034fa0171c26f571f4ad1a5686594f32a9 Add missing vec_pack/unpacks patterns for _Float16 <-> int/float conversion.
3ad0ef34ccbe656a7a9e5962fe1173226104174a vect: Don't pass subtype to vect_widened_op_tree where not needed [PR 110142]
84cbf560ff62a57432374d8a878251234ffcb99a RISC-V: Add ZVFHMIN block autovec testcase
6631fe419c6e47121e54fa3bbcc330dc04efd9a0 RISC-V: Add RVV narrow shift right lowering auto-vectorization
8d3eb3ad5388d2f523e4a6f886c4b3364f77f51f Fix disambiguation against .MASK_STORE
145b5db151277133a2cfdb2d32d1756ff7df241b RISC-V: Support RVV FP16 MISC vget/vset intrinsic API
7a4794af9aa2d7621b67ea026f29a771590f61a1 RISC-V: Fix one potential test failure for RVV vsetvl
d150afb4791e8dff4fc1d4e4b10938b55e58cb16 RISC-V: Enhance RVV VLA SLP auto-vectorization with decompress operation
de5f3bbf95674c2e6688b2ce7e7a01cdc236ea41 RISC-V: Fix V_WHOLE && V_FRACT iterator requirement
95e2a51685d5ce977c332735ddc5ef39e777639e RISC-V: Fix one typo in full-vec-movel test
1c3661e224e3ddfc6f773b095740c0f5a7ddf5fc Fix disambiguation against .MASK_LOAD
0f3d07e16fec7bea2fd033d9ec8ff08ea7effa39 middle-end/110232 - fix native interpret of vector <signed-boolean:1>
1d4d302acd915a81f4b7d7a6db44999531f2fd31 RISC-V: Add vector psabi checking.
cbe7f069e6a1a5c4f17019f4449da35a182775fc RISC-V: Fix bug of VLA SLP auto-vectorization
325bfe220517d073ddd0f413cf95465d89f273ac RISC-V: Add more SLP tests
a07dadba85f1b15e270c227dfa70e2fdf331494f RISC-V: Add comments of some functions
06a0f07220cea449b4683f9bb9cce2e5de1e5a35 RISC-V: Remove duplicate `#include "riscv-vector-switch.def"`
40eafcd83d6ee644ec48985fd5a9696921ea10e7 Avoid duplicate vector initializations during RTL expansion.
8a3a4fb273f9c69b8f9f6c303508610d34b3ebf1 RISC-V: Bugfix for vec_init repeating auto vectorization in RV32
41738a1b3f333d0283fe911f715194f602d318f6 RISC-V: Align the predictor style for define_insn_and_split
0ec3fbb5903ac3ad735b3154e814b46724fe1a27 RISC-V: Ensure vector args and return use function stack to pass [PR110119]
9e3607e19bcd34e1fc857ca44ae30a8a1a4f5e20 RISC-V: Use merge approach to optimize vector permutation
710b8dec61a73cbbf5dadbdd2070a85e690e8184 Missed opportunity to use [SU]ABD
59a8207f83855d756a6a87fa4b9537899d88f0a2 ada: Fix wrong finalization for double subtype of bounded vector
27612ce352921d74086102d9ad4d3e011923f837 RISC-V: Fix one warning of maybe-uninitialized in riscv-vsetvl.cc
dd6e1cbac8682106c5167c105f2807014288b852 RISC-V: Fix VL operand bug in VSETVL PASS[PR110264]
d0cf0c6c8449009697ad29dd7cb60e7f655628f2 RISC-V: Bugfix for RVV integer reduction in ZVE32/64.
8a96f240d71d367a2955ab9e0f0fef3a0b0e2a74 RISC-V:Add float16 tuple type support
fcf4e50f852e6c3e7ce777573b282c26b85a7d77 RISC-V: Fix one typo for reduc expand GET_MODE_CLASS
85c39a3cf157916ac494e8e90ad1df2cb6bf5cf2 AVX512 fully masked vectorization
c3e720887eca17342b0c7870d69687caf9e5269f RISC-V: Add (u)int8_t to binop tests.
51795b91073798c718df6fafb01303861641a5af RISC-V: Implement vec_set and vec_extract.
9b24611acf2cda332378a84a1858752c51f61411 RISC-V: Add sign-extending variants for vmv.x.s.
47ffabaf669e0c3950c7b1904f0873b006664d99 RISC-V: Add autovec FP binary operations.
da6cc50819c6652e9612cf5b35886afc284afb38 RISC-V: Add autovec FP unary operations.
ccfdda34341423c6034876856cd8ba50f0ca0ef3 VECT: Support LEN_MASK_{LOAD,STORE} ifn && optabs
60c120686da91d84b970ad949073c91085a52b91 Fix build of aarc64
8968e92cc65ef4cfe9dbba86b7873490139100b0 simplify-rtx: Simplify VEC_CONCAT of SUBREG and VEC_CONCAT from same vector
c5309565d007acdeda9abcfef3854db1ba0b1e1b Remove -save-temps from tests using -flto
1f97a0b412ed0984ff4af381b222b87424c08dbd vect: vectorize via libfuncs
2ba7347aba59faa119345c7b374fbbf1f35bae85 RISC-V: Bugfix for RVV float reduction in ZVE32/64
26bb67fc4d4b4bbefe298e21c965d41bb412eeb6 RISC-V: Bugfix for RVV widenning reduction in ZVE32/64
5fad77857198981c16d9e5eae81e02a45113cca8 RISC-V: Fix VWEXTF iterator requirement
7b34cacc5735385e7e2855d7c0a6fad60ef4a99b optimize std::max early
dbcbc858c71f69da76d1f36d6bb5d72f2db11eda RISC-V: Save and restore FCSR in interrupt functions to avoid program errors.
1d2308d68571ad7f84b2319574f381c486a58a3a RISC-V: Add tuple vector mode psABI checking and simplify code
62514099cb56574d96e29e2688aca23eeba5268f RISC-V: Fix fails of testcases
37c167e89b031df77fe3133baebf5bf362151b05 RISC-V: testsuite: Fix vmul test expectation and fix -ffast-math.
4a6c44f4ad4198382b7c70f4d40eefb69e71132e RISC-V: Fix compiler warning of riscv_arg_has_vector
b26f1735cb8dcf690e9bd25f27d9f35002f3a291 RISC-V: testsuite: Add -Wno-psabi to vec_set/vec_extract testcases.
1c0b118babcd56dc886976b81727a9a77fc311c3 RISC-V: Optimize codegen of VLA SLP
cb421ffff66914e56a270dfb1cedb9bb890b43c2 RISC-V: Set the natural size of constant vector mask modes to one RVV data vector.
649c640cc4a2b4d9057613556ac989aed638c010 RISC-V: testsuite: Add missing -mabi=lp64d.
7f986e2ed9323099bf142756d282002baa869289 ipa-cp: Avoid long linear searches through DECL_ARGUMENTS
6f19cf7526168f840fd22f6af3f0cb67efb90dc8 Use intermiediate integer type for float_expr/fix_trunc_expr when direct optab is not existed.
b9401c3a323c59705eca177bf72c13c0d2f462b6 vect: Add testcases for unsigned conversions [PR110018]
1742ea94aaa758a2b0c40360f89e27770bd8ffeb Improve vector_vector_composition_type
efc7fadff587b675552cd130cffe8c96c0feb4fc Optimize vector codegen for invariant loads, fix SLP support
6b32400e19a702137fd11571d199f725add0daf6 Bogus and missed folding on vector compares
1fe09b90f856ba27c3e44dda156b28adb5d4d8ea Use element_precision for match.pd arith conversion optimization
4127e0f3313c961b4b4e5efad85a25c40c2510c2 Properly guard vect_look_through_possible_promotion
4f2fcf21d4c939831c299cb884cbeaca1d33fa8e Fix tree_simple_nonnegative_warnv_p for VECTOR_TYPEs
96854fd753868d26dd8f270fff8c3703f7cb6c86 Deal with vector typed operands in conversions
2acbbf41d4c2a3362991863ce265041f9a2feee4 Fix initializer_constant_valid_p_1 TYPE_PRECISION use
dd2eb972a5b063e10c83878d5c9336a818fa8291 libstdc++: Use RAII in std::vector::_M_realloc_insert
d39f4889cc24c5c96cf9112045298e0945b9932c VECT: Apply LEN_MASK_{LOAD,STORE} into vectorizer
b2e075a594e93a4fc89de8fa53db5c32a4de83b5 text-art: remove explicit #include of C++ standard library headers
0a3b1a095d451427571299fc78f29dec94c6931c RISC-V: Support RVV floating-point auto-vectorization
95a2e5328e5aa15724ab8da4aa622a0bfc40c9e5 RISC-V: Refactor the integer ternary autovec pattern
f9ab5d62c94547499de52c800ab914cc8e802212 RISC-V:Add float16 tuple type abi
c79476da46728e2ab17e0e546262d2f6377081aa Refine maskloadmn pattern with UNSPEC_MASKLOAD.
ae10eb041da70d39f9cd0feb1b704e5c9d6a62aa Revert "RISC-V:Add float16 tuple type support"
319e6fe96027f53719fd07b5ed057100b19ac802 Revert "RISC-V:Add float16 tuple type abi"
df80ca2d95a5f6c782b4648d375761833123203a internal-fn: Fix bug of BIAS argument index
d42d199e9ea72fb220ea00195dffb5c142226188 RISC-V: Enable len_mask{load, store} and remove len_{load, store}
b23ec2de3b992784c3e376da8f51f962daca4d86 RISC-V: fix expand function of vlmul_ext RVV intrinsic
9326a49c9e9d6316bc960505a55da2dd06bc10af RISC-V: Optimize VSETVL codegen of SELECT_VL with LEN_MASK_{LOAD, STORE}
068eba260fa362616ea82ebb37ed86eb9cc59ac6 RISC-V: Fix one test failure of dg config.
77a50c772771f681085922b493922516c3c03e9a Don't use intermiediate type for FIX_TRUNC_EXPR when ftrapping-math.
1bfe7e5352d1f4ac525317454aca45aa80a517ba Use cvt_op to save intermediate type operand instead of "subtle" vec_dest.
9f76f04be40adffb2d3498010a23051502031140 RISC-V: Remove redundant vcond patterns
c3bdee86183b3d84f269e9775b2603f8f8221417 Fix TYPE_PRECISION use in hashable_expr_equal_p
5b3d421be747386349981c6291f0af1756b1112c Avoid shorten_binary_op on VECTOR_TYPE
c7b0707ceb24fd10a726780bb42bbbde0c2e06b1 narrowing initializers and initializer_constant_valid_p_1
a024176a97b0176f526862836c33e283b8db4197 RISC-V: Remove duplicated extern function_base decl
53d6f57c1b20c6da52aefce737fb7d5263686ba3 tree-optimization/110381 - preserve SLP permutation with in-order reductions
9302b0743b366037379af0568534c23ab597b4d4 vect: Cost intermediate conversions
f0deeefebb661a1e6560e10bdb19c142792ef9c1 GIMPLE_FOLD: Fix gimple fold for LEN_{MASK}_{LOAD,STORE}
c2ebccc97190a978a44e341516b488f02a78c598 Fix profile of forwarders produced by cd-dce
2d1a3629ba3034cc16599eafb530cdada426bab3 RISC-V: Support const vector expansion with step vector with base != 0
dbf8ab449417aa24669f6ccf50be8c17f8c1278e Refine maskstore patterns with UNSPEC_MASKMOV.
dd86a5a69cbda40cf76388a65d3317c91cb2b501 tree-optimization/96208 - SLP of non-grouped loads
d915762ea9043da858d388b60b2d8093ff77eeab match.pd: Use element_mode instead of TYPE_MODE.
201c6c322f3e88367ac9b6f476cf76b755d3c4b1 RISC-V: Split VF iterators for Zvfh(min).
b95dcaa5a7491e6f97e5fac902d55e8a58e068d3 RISC-V: Implement autovec copysign.
1f3d97bdf1e2ac3770468127fb39645bb68f6291 RISC-V: Add autovec FP int->float conversion.
a9b40612baf2f936ac1d211fbc0b3e46404cefa7 RISC-V: Add autovec FP widening/narrowing.
5fad4da8d968bbb198d593ff93ab485939ca1a28 RISC-V: Add autovect widening/narrowing Integer/FP conversions.
d35702d90e559f20f6c17d55cb0276c4fc60766c RISC-V: Support floating-point vfwadd/vfwsub vv/wv combine lowering
fe48f2651334bc4d96b6df6b2bb6b29fcb732a83 Prevent TYPE_PRECISION on VECTOR_TYPEs
b7ab876fa96ce3b48120c14f327c1e199356e955 RISC-V: Support vfwmacc combine lowering
51c8cbc6bba387f953d9be48c4a4c8b657dd54a5 tree-optimization/110443 - prevent SLP splat of gathers
237e83e2158a3d9b875f8775805d04d97e8b36c1 tree-optimization/110451 - hoist invariant compare after interchange
9757e4440bd8755d327601a60a73d57d712583ed d: Fix d_signed_or_unsigned_type is invoked for vector types (PR110193)
4d1e97f5838b0b6c12d256883e24a8cb3258a134 RISC-V: Allow rounding mode control for RVV floating-point add
e714af12e3bee0032d8d226f87d92c9bc46f0269 RISC-V: Support vfadd static rounding mode by mode switching
4e9f6c14280699997a633cefd3fb315b2bd4762c A couple of va_gc_atomic tweaks
1e6f1659bd7337e91a88086f8092ada01e80ac94 middle-end/110461 - pattern applying wrongly to vectors
6d2eddf456f2d6494cac490c4aa3e7d089926098 middle-end/110452 - bad code generation with AVX512 mask splat
cd23ed2119120bd7b710fbe679fdfcb8f4461800 tree-optimization/110460 - fend off vector types from vectorizer
16e4f09a594f801f68eb0a3e35d1c6e60d402b64 tree-ssa-math-opts: Use element_precision.
9dc18fca431626404b0692c689a2e103666e7adb Compute ipa-predicates for conditionals involving __builtin_expect_p
c0439218eb79aa0293291aed92453a59db8c6e85 tree-optimization/110381 - fix testcase
1cde8e5d45d74cf7ba85772b99b41a7c81769ff4 RISC-V: Refactor vxrm_mode attr for type attr equal
aec90c8bf30cbd66e4febae2c78622dc217f3918 Mid engine setup [SU]ABDL
eab57b825bcc350e9ff44eb2fa739a80199d9bb1 Fix handling of __builtin_expect_with_probability and improve first-match heuristics
6735d66083953315c0d7d491df07d36061093a24 jit: avoid using __vector in testcase [PR110466]
02460c0b8c9000359a09440f9532664a7835f158 Fix update_bb_profile_for_threading
7e904d6c7f252ee947c237ed32dd43b2c248384d Fix profile update in copy-header
1bff9e625b4d2cd2847fcaae4a478ad33b4f86c3 d: Fix testcase failure of gdc.dg/Wbuiltin_declaration_mismatch2.d.
8cb087d869be698a86b082a7248d03e468ef1eb1 testsuite: Add vect_float_strict to testcase [PR 110381]
bd7e9856fe5bbeb487797476c4fffb660f63cf4f tree-optimization/110506 - bogus non-zero mask in CCP for vector types
000590c074615cbfffb6ad854a6474e623801460 tree-optimization/110506 - ICE in pattern recog with TYPE_PRECISION
3d95a524d4746ceb3065f92f30a5679afb88d16a RISC-V: Fix one typo of FRM dynamic definition
47e6dcb597b2d4abcab13c9dea0cc7d2131b6419 RISC-V: Support vfwnmacc/vfwmsac/vfwnmsac combine lowering
14fa8c1d651a2e9fd3d9e75ab746589a36c86986 Revert "RISC-V: Support vfwnmacc/vfwmsac/vfwnmsac combine lowering"
bc32918b063b9fa3dffc8815478a81df6ad999ca RISC-V: Support vfwmul.vv combine lowering
49485639c25c77b116d35c2f9c3dbfb8bf4cf814 RISC-V: Support vfwnmacc/vfwmsac/vfwnmsac combine lowering
b8806f6ffbe72ed8fb7aba3b3a9196ec4d13e614 Middle-end: Change order of LEN_MASK_LOAD/LEN_MASK_STORE arguments
7c521f6751e47d9dfaca2c8288c65f94e2f54d3d RISC-V: Add support for vector crypto extensions
33245d6b87a284495304c9952813b6b83d5df99f libstdc++: Qualify calls to std::_Destroy and _Destroy_aux
c26f275861378cb4e339563b22e06cc8e2dc8120 RISC-V: Optimize local AVL propagation
db3efdaff59374063bde93764a0dff3317e04b22 Machine Description: Add LEN_MASK_{GATHER_LOAD, SCATTER_STORE} pattern
eed9eeaab30fd7b9e509ec3cf78f5f3c881b0abf Revert "RISC-V: Fix one typo of FRM dynamic definition"
0682a32c026f1e246eb07bb8066abca4636f01d8 tree-optimization/110310 - move vector epilogue disabling to analysis phase
f703d2fd3f03890a180e8cc04df087c208999e81 middle-end/110495 - avoid associating constants with (VL) vectors
729aa4fa48d627c4344764676edad3b65d40a003 tree-optimization/110436 - bogus live/relevant for unused pattern
2c12ccf800fc7890925402d30a02f0fa9e2627cc PR tree-optimization/110531 - Vect: avoid using uninitialized variable
6eea7eaf11e2b04670c4bb75f48600747dd76768 Remove unnecessary check on scalar_niter == 0
0af87afb3fd10c6fcfbed3ba85d575889477a968 RISC-V:Add float16 tuple type support
8377cf1bf41a0a9d9d49de807b2341f0bf5d30cf RISC-V:Add float16 tuple type abi
4870a18ac2d5e0bd8515ea473006071e65622e52 libstdc++: Use RAII in std::vector::_M_default_append
450b9566d5888931aa6f8bee9799c0b60abf75c8 Fix typo in vectorizer debug message
a9c6db31cbe9bedd2dde1c50a7007a67750a0f50 adjust testcase for now happening epilogue vectorization
f4a2ae2338962208b8039f154f5912402e94c378 Change MODE_BITSIZE to MODE_PRECISION for MODE_VECTOR_BOOL.
34c614b7e9dcb52a23063680f3622c842a9712ec VECT: Apply LEN_MASK_GATHER_LOAD/SCATTER_STORE into vectorizer
429905d809bbf2398bf666d65322b87ac7381e43 RISC-V: Change truncate to float_truncate in narrowing patterns.
70b041684a2222b8f19200cc240a13d703b210a7 RISC-V: Use FRM_DYN when add the rounding mode operand
df9a6cbb087d674ccee545d642e688f1979dcb3a RISC-V: Allow variable index for vec_set.
573bb719bb82d1d61ca54eb4fddf82eccfd56470 RISC-V: Support variable index in vec_extract.
c30efd8cd634f8a59bc1bf52e71d8866bf52d56c gimple-isel: Recognize vec_extract pattern.
7339e725b995912747c01c3ec80ce602512f45df tree-optimization/110474 - Vect: select small VF for epilog of unrolled loop
a73b65b74105e76473cc2825bb4e7253deaf18b3 Fix PR 110554: vec lowering introduces scalar signed-boolean:32 comparisons
e1c23189abdd7bbbc066b2aa47ae4b7db0d69f2b Adjust rtx_cost for DF/SFmode AND/IOR/XOR/ANDN operations.
0d40aeb9b85db87e4a502a530db5b89027d1a3b6 RISC-V: Handle rouding mode correctly on zfinx
2ab065c3e6950bc4995fcb16cebc5164d6213708 Fix expectation on gcc.dg/vect/pr71264.c
f2b37c8a38e44696287b19856bcbbf52e8b004f8 VECT: Fix ICE of variable stride on strieded load/store with SELECT_VL loop control.
deebf06a1207bf7d84f4bebc462137d9436ee6dd tree-optimization/110563 - simplify epilogue VF checks
224fd59b2dc8a5fa78a309a09863afe9b3cf2111 Vect: use a small step to calculate induction for the unrolled loop (PR tree-optimization/110449)
d4c2e34deef8cbd81ba2ef3389fdbaf95c70e225 Improve scale_loop_profile
f58819c9aabfe23fa0e6ba422b39a00a980f991e RISC-V: Fix one typo of FRM dynamic definition
55900189ab517906efe08f8d17f3e4a310ee7fff RISC-V: Fix one bug for floating-point static frm
5966349aa7e1fcbee2558f996b2484b433a0fcf4 Fix epilogue loop profile
63ae6bc60c0f67fb2791991bf4b6e7e0a907d420 vect: Fix vectorized BIT_FIELD_REF for signed bit-fields [PR110557]
a3ad2301d2f4aab2deeb286fa5bd0282260bfd0a GCSE: Export 'insert_insn_end_basic_block' as global function
1e2e5713a6dbd36ac48e8cf78f0eeb303d820afe doc: Add doc for RISC-V Operand Modifiers
312839653b8295599c63cae90278a87af528edad testsuite: Unbreak pr110557.cc where long is 32-bit
4736ddd11874fe215662ac18877ce8eded1f5976 tree-optimization/110614 - SLP splat and re-align (optimized)
6c96d1e4e877d045f7e0c22786244653d2e1cf99 VECT: Add COND_LEN_* operations for loop control with length targets
5d9fc2aced3a2128527afd4a627424542f238471 testsuite: Require vectors of doubles for pr97428.c
9aabf81f40f0ee130646ab5e60d158218d1276cc RISC-V: Optimize permutation codegen with vcompress
13c556d6ae84be3ee2bc245a56eafa58221de86a Break false dependence for vpternlog by inserting vpxor or setting constraint of input operand to '0'
d05c8b016fb96cdcc445406469867b757776894e riscv: xtheadbb: Add sign/zero extension support for th.ext and th.extu
e15a82a1fea3a68f47d9a5a8634265eeec1562a8 riscv: xtheadmempair: Fix doc for th_mempair_order_operands()
208e10bf8a90f49aa40152ab7fcebe8cd7c5d31a riscv: thead: Adjust constraints of th_addsl INSN
b621883620b127caf20e88e59fa73e666960013e riscv: Simplify output of MEM addresses
a3480aacc4ab01651725a63e05829a43bc23d549 riscv: Define Xmode macro
96ad6ab29b3d6d8646c97760cc87a17f405e09d2 riscv: Move address classification info types to riscv-protos.h
423604278ed550f07f80c9687a441c58a6cd6e85 riscv: Prepare backend for index registers
96d32c111e63b7cde38410f4e316512771c8ecff riscv: thead: Factor out XThead*-specific peepholes
c1b3b5a056b8940f845123a8e80ef8e646f40682 RISC-V: Support integer mult highpart auto-vectorization
25f831eab368d1bbec4dc67bf058cb7cf6b721ee tree-optimization/110630 - enhance SLP permute support
a454325bea77a0dd79415480d48233a7c296bc0a genopinit: Allow more than 256 modes.
0d4dd7e07a879d6c07a33edb2799710faa95651e VECT: Apply COND_LEN_* into vectorizable_operation
5a13caf2666bdf586272cc24a08ab90499771c95 riscv: thead: Fix failing XTheadCondMov tests (indirect-rv[32|64])
44f244e4672578be6cc513104473981790a1c164 RISC-V: Support COND_LEN_* patterns
f048af2aa3dccec4d28c32056a1d5972f4049806 RISC-V: RISC-V: Support gather_load/scatter RVV auto-vectorization
574a1ea4406dd1dbf14e149a9b5d142f6cbdf32a vect: Move vect_model_load_cost next to the transform in vectorizable_load
2115c22617c88fea0470cb87de284de904ed786e vect: Adjust vectorizable_load costing on VMAT_GATHER_SCATTER && gs_info.decl
bbee29e82881c30c4f23e29db3e40de71cf49789 vect: Adjust vectorizable_load costing on VMAT_INVARIANT
090d83c25508c108756a534c765d2fa8c07eb261 vect: Adjust vectorizable_load costing on VMAT_ELEMENTWISE and VMAT_STRIDED_SLP
131943ca22e012d6ab953b1406e1fd51eac4d418 vect: Adjust vectorizable_load costing on VMAT_GATHER_SCATTER
c4a8f4414215be6bf381398fdb391afd1440c8f9 vect: Adjust vectorizable_load costing on VMAT_LOAD_STORE_LANES
5f03844b32f45224c33dcea08a20b5a2089082f7 vect: Adjust vectorizable_load costing on VMAT_CONTIGUOUS_REVERSE
a3118d7c153dc9c0af9d892903dc4ebc69f654b0 vect: Adjust vectorizable_load costing on VMAT_CONTIGUOUS_PERMUTE
43ed05a08963a5c3ccc4cc6143d2b322851edd10 vect: Adjust vectorizable_load costing on VMAT_CONTIGUOUS
43fefc1f832a80370ea142273ebc1a76005c68a0 RISC-V: Add more tests for RVV floating-point FRM.
880676d603979852f30b76b1e2a3532b95f08048 RISC-V: Refactor riscv mode after for VXRM and FRM
601a412ef0fe59ce48fb8635ebdaa58b58512a5a RISC-V: Remove the redundant expressions in the and<mode>3.
ad0518d97cfc857183e524fabc104ebeec9e8ccd RISC-V: Recognized zihintntl extensions
d8f5e349772b6652bddb0620bb178290905998b9 ifcvt: Reduce comparisons on conditionals by tracking truths [PR109154]
9ed4fcfe47f28b36c73d74109898514ef4da00fb ifcvt: Sort PHI arguments not only occurrences but also complexity [PR109154]
0d2673e995f0dd69f406a34d2e87d2a25cf3c285 RISC-V: Enable COND_LEN_FMA auto-vectorization
1815e313a8fb519a77c94a908eb6dafc4ce51ffe cprop: Do not set REG_EQUAL note when simplifying paradoxical subreg [PR110206]
c62791fa413a49fc6476ce186b324250f8ae6d40 Fix optimize_mask_stores profile update
061f74c06735e1fa35b910ae0bcf01b61a74ec23 Fix profile update in scale_profile_for_vect_loop
081c623ca88dc53abe34b5f5661e79fcde800cef vect: Initialize new_temp to avoid false positive warning [PR110652]
c29584fc29df0c5075ad57cce5bea447b1d061a3 riscv: Fix warning in riscv_regno_ok_for_index_p
da93c41c4ea124d61d41fb8629b801f74886284c RISC-V: Support non-SLP unordered reduction
70742d08832eb7db4d90f52465966111a19ce3a5 RISC-V: Ensure all implied extensions are included [PR110696]
c1244ceed99bc37069baf164d008ff91f63d3115 RISC-V: Add TARGET_MIN_VLEN > 4096 check
c7ac1de5f5c561b2d90c084a638c232d322d54e6 c++: only cache constexpr calls that are constant exprs
45dd1d91671cbc4a868ec41ada5f070aa487d02d RISC-V: Support basic floating-point dynamic rounding mode
61ec6a45ae3bb741b3afef41cef01094930adf7f RISC-V: Fix RVV frm run test failure on RV32
e6a1b23872995d5344a81cff1857bc861ffee71d RTL_SSA: Relax PHI_MODE in phi_setup
6bab2772dbc42ce7a1b29b03ae84e6e434e23c4e Tighten regexps in gcc.target/riscv/_Float16-zhinx-1.c .
615c2e555d34c2b17513c869b309b8f398376874 IBM zSystems: Optimize vec_cmpge followed by vec_sel
74dc7f1a94e06095108b0ac30ca35d98f3a4bb9c RISC-V: Remove testcase that cannot be compiled because VLEN limitation
3a407070b610a8943bd26789b4c1446d28f355ac MAINTAINERS: Add myself as riscv port reviewer.
48b7404707186856523b908f1720488bf87f6b49 RISC-V: Enable SLP un-order reduction
0a9f30c50a1ee539372fb4f6db3e8db229fc2ff8 MAINTAINERS: Add myself as riscv port reviewer.
bd93ef7f1a178079c6cdaccdf953f79a3365b028 RISC-V: Dynamic adjust size of VLA vector according to TARGET_MIN_VLEN
c5c7f1ef5ffcabb7dcbdc96571dbe1b0d675d4a5 RISC-V: Fix testcase failed when default -mcmodel=medany
c283c4774d1cbfd12c2a15b51b18347463694ad0 RISC-V: Throw compilation error for unknown extensions
c1e420549f2305efb70ed37e693d380724eb7540 testsuite: Add 64-bit vector variant for bb-slp-pr95839.c
ba49332baba622cb9af8e34629636f2586664c7e VECT: Add mask_len_fold_left_plus for in-order floating-point reduction
879c52c9dab5940a81aae8374831a6e4f78605ee RISC-V: Refactor RVV machine modes
bb0da4542df887a530d5a75e08abf5cbb821fe6b RISC-V: Align the pattern format in vector.md
ceae1400cf24f329393e96dd9720b0391afe858d middle-end/61747 - conditional move expansion and constants
bb42f05d0738bddc721e838ebe9993df39ff2e0f RISC-V: Fix one incorrect match operand for RVV reduction
c5bd0e5870aed178b7f82e7b94f59a383e7c5b4f vectorizer: Avoid an OOB access from vectorization
b6b72562d116bd0a589dce39437f9d2b3c34491f CODE STRUCTURE: Refine codes in Vectorizer
a4913a19d24a794c97f38d9c65c47c1fb9f2140c analyzer: avoid usage of TYPE_PRECISION on vector types [PR110455]
a6654c08fde11890d621fa7831180d410054568a sccvn: Correct the index of bias for IFN_LEN_STORE [PR110744]
9a8782e63790842d1bfa03e12eecf73c4aaeb1f8 tree-optimization/110742 - fix latent issue with permuting existing vectors
9f8f37f5490076b10436993fb90d18092a960922 tree-optimization/88540 - FP x > y ? x : y if-conversion without -ffast-math
bd68b33f80ae4726393dbd6e12025f99dc269c12 cleanup: Change LEN_MASK into MASK_LEN
363bb3dca429e885ce3d134fc50f8ab05aacda0f cleanup: make all cond_len_* and mask_len_* consistent on the order of mask and len
3e76bdd5fd289ac38326060bba91b0e264c50ccf cleanup: Change condition order
1d96b11e4aef1727b3bd3215d0d8140a504d8eb7 RISC-V: Fix redundant variable declaration.
ea272814c23d2b88dc846b225c041594ae6be3e3 Implement flat loop profile detection
a31ef26b056d0c4f0a9f08b6eb81456ea257298e Avoid scaling flat loop profiles of vectorized loops
6ed43713e4c894c196ee07991aa25e09322f8ab4 testsuite: Limit bb-slp-pr95839-v8.c to 64-bit vector targets
ecfa870ff29d979bd2c3d411643b551f2b6915b0 RISC-V: optim const DF +0.0 store to mem [PR/110748]
bbc1a102735c72e3c5a4dede8ab382813d12b058 Fix PR 110066: crash with -pg -static on riscv
73ff915a169bf3f4b15c75fa3b6e658f7fe86b46 RISC-V: Bugfix for allowing incorrect dyn for static rounding
d07504725973ccdec78929a09dc13e5ebd9472f6 vect: Don't vectorize a single scalar iteration loop [PR110740]
42b17d00c33dd9994dee973c001d85dc09b79b24 VECT: Support floating-point in-order reduction for length loop control
fe39eca4136bf2f9dc740c05e7957027736fc11b vect: Handle demoting FLOAT and promoting FIX_TRUNC.
8547c451aac1c1f0178cf0914243b20fa0dde0c3 Remove unused tree-vectorizer.h include
2b074dc7bdf4402c1e3e44f247e27f3ef51bd8e4 Remove SLP_TREE_VEC_STMTS in favor of SLP_TREE_VEC_DEFS
aa1e2d543869a07580f9b2112f2d7367f83a6753 [committed][RISC-V] Fix minor issues in diagnostic message
d90e81af8052e96ae3262ed3ac42682537fc42c6 [committed] Use single quote rather than backquote in RISC-V diagnostic
ad0dde0af107aaf6a91e37f3aa31249e34df6ce0 RISC-V: Fixbug for fsflags instruction error using immediate.
adbac207e917e42dac7b30553d91f3bd1196bbee RISC-V: Fix vector tuple intrinsic
5d09fb683a8abce49dc0992f5102aa0189f8f632 tree-optimization/106081 - elide redundant permute
d74aed3d7aefbb661ae629a91ca7baa4916085f0 [committed] Add check_vect in a testcase
7931a1de9ec87b996d51d3d60786f5c81f63919f libstdc++: Avoid bogus overflow warnings in std::vector<bool> [PR110807]
f30e62b0ee05befd20863466d1fb55a34d15c228 libstdc++: Require C++11 for 23_containers/vector/bool/110807.cc [PR110807]
aee2817ecd261ac2fd2717a2a36db81906ff2346 [PATCH 1/5] [RISC-V] Recognize Zicond extension
74290c664d1d4c067a996253fe505555ec671668 [PATCH 2/5] [RISC-V] Generate Zicond instruction for basic semantics
6f709f79c915a1ea82220a44e9f4a144d5eedfd1 [committed] [RISC-V] Fix expected diagnostic messages in testsuite
9890d4e8bcda1f34b8eefb481935ef0e4cd8069e vect: Treat VMAT_ELEMENTWISE as scalar load in costing [PR110776]
cdc65458334faad1a2f00cf17e64e39b25d697ca RISC-V: Fix uninitialized and redundant use of which_alternative
d0ae71c26ab9e383768160ea266f56db2e2ae43c RISC-V: Remove unnecessary vread_csr/vwrite_csr intrinsic.
33b153ff521e2f33acf7d076f8625d85319b731d RISC-V: Enable basic VLS modes support
d1c072a1c3411a6fe29900750b38210af8451eeb tree-optimization/91838 - fix FAIL of g++.dg/opt/pr91838.C
9bd1ee6d330b0441c165d889b6b25a5c85caf427 Fix profile update in tree_transform_and_unroll_loop
d023775c1180730ce15adfe191a98c174618f814 Make store likely in optimize_mask_stores
b9d7140c80bd3c7355b8291bb46f0895dcd8c3cb loop-split improvements, part 1
1d6af545bf7fa34c9bdd17b41e81abd019d073a8 RISC-V: Remove vxrm parameter for vsadd[u] and vssub[u]
b24acae8f4d315a5b071ffc2574ce91c7a0800ca loop-split improvements, part 2
fdbb0863b6111ad3f45b79f47ebfe471555b2c4a RISC-V: Specify -mabi in rv64 autovec testcase
7ed98195f3f5c23948fff7ecc720127485490397 Fix profile update after vectorize loop versioning
5ffa9d0a5e22f6f763b7f04877a940689e7abcba Fix profile update after vectorize loop versioning
92a891e869d35c940d2a7b92355af02d78c9a86e RISC-V: Enable basic VLS auto-vectorization
9f63862184b14a5f04a6e91c8c055687f2720d73 RISC-V: Bugfix for RVV floating-point rm suffix sequence
1349f530753be963043d77c1d51da161133d5afe RISC-V: Return machine_mode rather than opt_machine_mode for get_mask_mode, NFC
129feec0ba4f8ce74edf1fdf7da37b54968d3d37 [Committed] PR target/110843: Check TARGET_AVX512VL for V2DI rotates in STV.
5a770748e8eea38a4ed1f3c4dd8d807aa1640536 RISC-V: Drop unused variable
b769811e7c1b3dff2fa0ec2c37b52859d7bceed4 fur_list should not use the range vector for non-ssa operands.
85699f1d23aa71cbfeb13d72ec987e5217d410c2 RISC-V: Support RVV VFSUB and VFRSUB rounding mode intrinsic API
46a508ec7aee5038cc0a8800b756838ebef7f6d2 RISC-V: Support CALL for RVV floating-point dynamic rounding
1762957384c659a2e6827939ce4b1f1d1ad40003 Fix profile update after prologue peeling in vectorizer
7c09e7e24b0d04857d5880197959e75bda0c489e [PATCH] Add POLY_INT_CST support to fold_ctor_reference in gimple-fold.cc
e15d0b6680d10d7666195e9db65581364ad5e5df [PATCH 3/5] [RISC-V] RISC-V Conditional Move costing [was:Generate Zicond instruction for select pattern with condition eq or neq to 0]
2d73f2eb80caf328bc4dd1324d475e7bf6b56837 [committed] [RISC-V] Avoid sub-word mode comparisons with Zicond
5b501863ac7da57858fdd464dfb7a776143f22a2 [PATCH 3/5] [RISC-V] Cost model for Zicond.
f0b7a61d83534fc8f7aa593b1f0f0357a371a800 Support vec_fmaddsub/vec_fmsubadd for vector HFmode.
2e93b92c1ec5fbbbe10765c6e059c3c90d564245 Fix profile update after cancelled loop distribution
21c2815605fb0ec43ea65b1104990cf03248013e RISC-V: Support RVV VFWADD rounding mode intrinsic API
399c8dd44ff44f4b496223c7cc980651c4d6f6a0 tree-optimization/92335 - Improve sinking heuristics for vectorization
1d5bc3285e8a115538442dc2aaa34d2b509e1f6e [committed][RISC-V] Fix 20010221-1.c with zicond
cba9db950371e810e32e75425707beceb85bb0f0 RISC-V: Support RVV VFWSUB rounding mode intrinsic API
1b53748c61a8b6489ca9a56a25037131335d3cc6 RISC-V: Remove redudant extern declaration in function base
373600087df596b26c10d18eb0c5082c2788808b RISC-V: Support RVV VFMUL rounding mode intrinsic API
39663298b5934831a0125e12f113ebd83248c3be RISCV: Add -m(no)-omit-leaf-frame-pointer support.
29370f1387274ad5a35a020db6a5d06c0324e6c1 tree-optimization/110838 - vectorization of widened shifts
93fd44fde638a4d5fc34547c25aa02f346170430 RISC-V: Fix one comment for binop_frm insn
d61efa3cd3378be38738bfb5139925d1505c1325 [committed][RISC-V] Remove errant hunk of code
9e3fd332959930efd3cabf222afbac910507d2f3 [PATCH 3/5] [RISC-V] Generate Zicond instruction for select pattern with condition eq or neq to 0
d6ac3aae2a32869d9d37f3bc7783d9bbad27d72b Update loop iteration estimates after splitting
b7ab3938c638bf5aacfe926ed19aba1627702a71 RISC-V: Support RVV VFDIV and VFRDIV rounding mode intrinsic API
dd03fb9962e4776286d7654df09549c0e712465e RISC-V: Support RVV VFWMUL rounding mode intrinsic API
51e5a5cefb11d8a7b2216e866abcc225ba16d127 RISC-V: Support RVV VFMACC rounding mode intrinsic API
62d9c1dd8eb1152d8fbe0e1df101b99c9141417a RISC-V: Support RVV VFNMACC rounding mode intrinsic API
dccd7e8a7215f3f2e295e11b20680d3add08cd7e RISC-V: Support RVV VFMSAC rounding mode intrinsic API
236ec7aac051a062dc961b3c1482925893ee6e21 RISC-V: Support RVV VFNMSAC rounding mode intrinsic API
098d6fbe6477820f32e1ca3eb3de870ef4861b89 Revert "RISC-V: Support RVV VFNMSAC rounding mode intrinsic API"
b87a4739a4c043e8063f2955a706b949dcc20dae Revert "RISC-V: Support RVV VFMSAC rounding mode intrinsic API"
7a6b4d87d8aa50ef644414fe224c3540c540c2d4 Revert "RISC-V: Support RVV VFNMACC rounding mode intrinsic API"
2d2f090e67b26457596e7d5aabe629e3da58db94 Revert "RISC-V: Support RVV VFMACC rounding mode intrinsic API"
1a599caab86464006ea8c9501aff6c6638e891eb tree-optimization/110838 - vectorization of widened right shifts
73b98860767ac03aa31ad4ca8b73f40484bd7562 frontend: Add novector C++ pragma
6fb5da03107f48e0b76f123933edcc07bae7e0aa frontend: Add novector C pragma
046640f9e53ae92a255e5269b0ca33b1f041b593 middle-end: clean up vect testsuite using pragma novector
4e87c953d16377457b31b65b6c3268d932e462ab [PATCH v3] [RISC-V] Generate Zicond instruction for select pattern with condition eq or neq to 0
838237aeeba578fc2cf42bfd3ecb9d9a4fb7a2b4 Fix profile update after peeled epilogues
e3e6db43640fadc9aa41c5459d43e5541d83f29a Disable loop distribution for loops with estimated iterations 0
1fc96cdd0a3df2ba90a04dc507a44a02fbebd1f3 Add builtin_expect to predict that CPU supports cpuid to cpuid.h
73c14db6d1a8c1267137b94c41f2e2c9410dcbb1 Fix profile update after versioning ifconverted loop
aa63c20420db78ca77ec243af02c7591b88d3b89 Improve -fopt-info-vec for basic-block vectorization
8ae83274d8cc60547e8c92a41a4f4716b045f57a [committed] [RISC-V] Handle more cases in riscv_expand_conditional_move
18c453f0e633abb9b317947b011ec6e07780fba8 [committed][RISC-V]Don't reject constants in cmov condition
9cba4fce837b9fa0b52af64de0bac60ea1906900 RISC-V: Support VLS basic operation auto-vectorization
99e47791a901e71eb2475e3987c51d07f37430a5 RISC-V: Support VLS shift vectorization
8f4d2a4c984f168b8444672aa8f4a103e845dfbf RISC-V: Support neg VLS auto-vectorization
25c4b1620ebc10fceabd86a34fdbbaf8037e7e82 RISC-V: Fix a bug that causes an error insn.
02a015fa320229a057ef721eaf663f3eb22a8ace VECT: Support CALL vectorization for COND_LEN_*
d9f3ea61fe36e2de3354b90b65ff8245099114c9 tree-optimization/49955 - BB reduction with odd number of lanes
6ae5565e78c96868ea6f9a7bb38767b3800d22c9 RISC-V: Support CALL conditional autovec patterns
733e8b48cba745d80ca2d52c1e4f47d1075e30d6 RISC-V: Enhance the test case for RVV vfsub/vfrsub rounding
20659be04c2749f9f47b085f1789eee0d145fb36 [committed] [RISC-V] Fix bug in condition canonicalization for zicond
165b1f6ad1d3969e2c23417797362d0528e65c79 targhooks: Extend legitimate_address_p with code_helper [PR110248]
c4d618143048ac781f435638ef6e788ba870dc53 RISC-V: Support NPATTERNS = 1 stepped vector[PR110950]
a16dc729fda9fabd6472d50cce45791cb3b6ada8 RISC-V: Folding memory for FP + constant case
f088b768d01ae42385697584a2bcac141685dce2 RISC-V: Handle no_insn in TARGET_SCHED_VARIABLE_ISSUE.
e5fe7f2fd69d5a950d8c1e2a068669bda376b2d4 RISC-V: Remove non-existing 'Zve32d' extension
4cede0de9a19ee1a911b27dbe0916e67f1f3d7c9 RISC-V: Refactor RVV frm_mode attr for rounding mode intrinsic
6bdbf1722a312b90a48dea19af545815f0069e86 RISC-V: Add missing modes to the iterators
9b8ebdb60c463fa3641692a21ca0ce24fba89260 Remove insert location argument from vectorizable_live_operation
887f13916b18f46b563d527ad5001c6384e44a60 RISC-V: Support TU for integer ternary OP[PR110964]
07e93224f5dceb3423f38a58c2a1923c200cd5c8 RISC-V: Support RVV VFMACC rounding mode intrinsic API
6176527a7528ec626fa1e7afb381124867881388 RISC-V: Support RVV VFNMACC rounding mode intrinsic API
da7b43fb0224cdce5157a747fdd6975b7c81c6cf RISC-V: Add MASK vec_duplicate pattern[PR110962]
0ac323238e91c6093709ce8f4176c0c8fb1a693d RISC-V: Add Ztso atomic mappings
ee8a844d02e39912e0a303bcf46a0584d144ad6a RISC-V: Support RVV VFMSAC rounding mode intrinsic API
cd9150e2a821ec67a04844b7b2c1946b64994aa4 RISC-V: Support RVV VFNMSAC rounding mode intrinsic API
797334e931362174eb8ad15ded79cdf8e846e744 RISC-V: Support RVV VFMADD rounding mode intrinsic API
bcda361daaec8623c91d0dff3ea8e576373b5f50 RISC-V: Support RVV VFNMADD rounding mode intrinsic API
59d789b34810d43ddba734e4adb80c29c210e49c VECT: Add vec_mask_len_{load_lanes,store_lanes} patterns
6a8203b7dc0ab694c3f3f4aef503107975bb59aa RISC-V: Support RVV VFMSUB rounding mode intrinsic API
3a13884b23ae32b43d56d68a9c6bd4ce53d60017 Improve BB vectorization opt-info
798a880a0b1fed8a9e3b3e026dd8bd09314b7c38 tree-optimization/110979 - fold-left reduction and partial vectors
2b1b804de2687c9f705cc3625e467dfa18723a45 RISC-V: Specify -mabi for ztso testcases
5bfb5e772f6cf121563f08d27d2c652ea469bbfb VECT: Fix ICE on MASK_LEN_{LOAD, STORE} when no LEN recorded[PR110989]
e80c55e4ca68867ddb3cb3720f857bd22762768c RISC-V: Allow CONST_VECTOR for VLS modes
685abdb4a1fe46a12da5cc9ae1d5aaef9344a339 RISC-V: Fix vec_series expander[PR110985]
9890f377013cf1e4f5b9fab8a7287a5380dade1f RISC-V: Add TAREGT_VECTOR check into VLS modes
4ecc18554bbf789174efe4c9e0be40182898a8ce RISC-V: Support RVV VFNMSUB rounding mode intrinsic API
d15840aa05bc16580b2c79b356012974928e07a4 RISC-V: Support RVV VFWMACC rounding mode intrinsic API
a66873593817f72bbccd86f41128dc5ae404e8b9 RISC-V: Support RVV VFWNMACC rounding mode intrinsic API
d9577b4b4c2a7b4e8bc869d33b7de98a0e507e7c RISC-V: Support RVV VFWMSAC rounding mode intrinsic API
c944ded09595946290778a26794074e69cc65f3e RISC-V: Support RVV VFWNMSAC rounding mode intrinsic API
9be93b80585fc875a2fc6b7d490b640b7fe04365 RISC-V: Support RVV VFSQRT rounding mode intrinsic API
17c22f466162d3a1759f8c607b7e81e7dd631cd9 RISC-V: Minimal support for ZC* extensions.
6e46fcdf24f99ce1272305aac93cac51d45c04d6 RISC-V: Enable compressible features when use ZC* extensions.
7879f589af911ea6a910d08919014b0b2df1b4b1 RISC-V: Add ZC* test for failed march args being passed.
469711f06865979854e587263d3d43137f256b57 RISC-V: Support RVV VFREC7 rounding mode intrinsic API
d5ef0ee307058c5efade84e45228a7576c0141c7 Mode-Switching: Fix SET_SRC ICE for create_pre_exit
9ca0ff5e0988c62fe3080e3f4f99edecac37dff8 vect: Remove several useless VMAT_INVARIANT checks
a74d0d36a3f3373096963bb7a4c7ebbcab01221d vect: Move VMAT_LOAD_STORE_LANES handlings from final loop nest
bcdbedb3e6083ad01d844ed97cf19645c1ef6568 tree-optimization/110991 - unroll size estimate after vectorization
8a6097c7425c4b6294e11dea062df7a883343f47 Use find_loop_location from unrolling
f049868d8db773da4be61d82025e97453d6e9f2b Support constants and externals in BB reduction vectorization
f9e8072f917301f5a794b4935edc40268bf1b362 Cleanup BB vectorization roots handling
0618adfa80fcd2fd7ae03b30553c60a6b1abf573 RISC-V: Fix autovec_length_operand predicate[PR110989]
3064d1f5c48cb6ce1b4133570dd08ecca8abb52d Software mitigation: Disable gather generation in vectorization for GDS affected Intel Processors.
b2a927fb5343db363ea4361da0d6bcee227b6737 Support -m[no-]gather -m[no-]scatter to enable/disable vectorization for all gather/scatter instructions
c6f65ce9483131b1996cbddf8aaaebe0d8e5141c RISC-V: Support RVV VFCVT.X.F.V rounding mode intrinsic API
d5acdd62f090a472026c36fee3dfeb45f2de8429 VECT: Apply MASK_LEN_{LOAD_LANES, STORE_LANES} into vectorizer
fe5788862ba8d5ac4551658d842f2d038bd8d363 RISC-V: Support MASK_LEN_{LOAD_LANES,STORE_LANES}
567258f057913229084c21396b84c219f3fef05d RISC-V: Support RVV VFCVT.XU.F.V rounding mode intrinsic API
dc2529e8243859faf35c66d994756c40978f0ce5 RISC-V: Support RVV VFCVT.F.X.V and VFCVT.F.XU.V rounding mode intrinsic API
f2bec0ac481fb97fc88b976d8255cc85bff7e20e RISC-V: Support RVV VFWCVT.X.F.V rounding mode intrinsic API
ac6b74e9a5a40c28aeb715f43d117a7c4d32f43f RISC-V: Fix one build error for template default arg
1b7418ba1baf0d43fff6c6a68b8134813a35c1d9 RISC-V: Support RVV VFWCVT.XU.F.V rounding mode intrinsic API
a7dba4a1c05a76026d88dcccc0b519cf83bff9a2 Extend fold_vec_perm to handle VLA vector_cst.
c94e0f52f40310b6faeae11bae3366ccb1435199 internal-fn: Fix vector extraction into promoted subreg.
694242930906d9f7ad15977cac6dcbeae1f3d3f2 RISC-V: Implement vector "average" autovec pattern.
083b7f2833d71dd940abcf9cfba99782cb7c07fd libstdc++: Replace all manual FTM definitions and use
a32de58c9e6394e4e6aef0ac95b52d1c774ac8bc Add support for vector conitional not
e7a36e4715c7162ccfd7cd32da985d629bbd9c61 [PATCH] RISC-V: Support simplify (-1-x) for vector.
26a820dc136b00b4dc37609429576b6a914cb572 Emit a warning when AVX10 options conflict in vector width
29547511f7bae06f9f424f8c8583014878240016 RISC-V: Fix incorrect VTYPE fusion for floating point scalar move insn[PR111037]
3d18a528bfd05f0bfdb27f52c2f6c2445f15e4ca RISC-V: Support RVV VFNCVT.X.F.W rounding mode intrinsic API
72fc7e9d6aefbc4de1d3827062e47277fca83ef5 RISC-V: Support RVV VFNCVT.XU.F.W rounding mode intrinsic API
20e1db413ee8bb4d5233d97484e19e4e1d85f4ac RISC-V: Support RVV VFNCVT.F.{X|XU|F}.W rounding mode intrinsic API
3d903a26d7b6b4e32ad9f1f8c6fb5adf766c7cc7 RISC-V: Support RVV VFREDUSUM.VS rounding mode intrinsic API
3a68ef2cccb8a7f15ca188dbffd754d112d75898 RISC-V: Support RVV VFREDOSUM.VS rounding mode intrinsic API
c6259c4975e84b30d7de1f64afaece614d7c4500 RISC-V: Support RVV VFWREDOSUM.VS rounding mode intrinsic API
99b5921bfc8f9122fb7ccb0a4284179fd3a2f2ba Handle TYPE_OVERFLOW_UNDEFINED vectorized BB reductions
903d937569992a885faf8a1bf7d120e9e66f456b RISC-V: Fix XPASS slp testcases
1aaf3a64e92ada283f6d3052151858df2ad99e77 [PATCH] RISC-V: Deduplicate #error messages in testsuite
d7b6cad9d6c40f1dab907abd8e71e713bb2a5bf5 RISCV: Add rotate immediate regression test
c43916857c6586e65f10713fdc5a65909918a8cc RISC-V: Forbidden fuse vlmax vsetvl to DEMAND_NONZERO_AVL vsetvl
86d80395cf3c8832b669135b1ca7ea8258790c19 RISC-V: Revert the convert from vmv.s.x to vmv.v.i
3709ca091bec43ee3203b96146585652c5d84728 RISC-V: Add the missed half floating-point mode patterns of local_pic_load/store when only use zfhmin or zhinxmin
b4c8c551c48f5f29d9a719c4c7fc4fa4cec28fe7 RISC-V: Fix -march error of zhinxmin testcases
7cd2df4dc0b53c172d04bc7f238ce55775fbb7df vect: Move VMAT_GATHER_SCATTER handlings from final loop nest
f5f47cc1ce75b00427756939a2dab94d3d125f6a tree-optimization/111048 - avoid flawed logic in fold_vec_perm
ac8d3c7c5cd210bef20195346864307660cfa950 vect: Factor out the handling on scatter store having gs_info.decl
70c50c87273d940918225d5c6b03f1ccfb6f978e MATCH: Sink convert for vec_cond
d5dfba19aee783a6ba90fdba1993d576c7ec310b LCM: Export 2 helpful functions as global for VSETVL PASS use in RISC-V backend
e10cb804e658dbd1e9d58f528f3985362e4e72e7 tree-optimization/111082 - bogus promoted min
649388462e9a3c2de0b90ce525de8044704cc521 PR111048: Set arg_npatterns correctly.
4c5712ff47d86a742038477f945d539289c9a7a9 Fix gcc.dg/vect/bb-slp-46.c FAIL
e4e6a92407432cc19db73f8ce108243007d614f0 Fix gcc.dg/vect/bb-slp-subgroups-2.c with 256bit vectors
56c28ce7b52d181641904b4a4a441301a848cf48 [PATCH 1/2] RISC-V: Add quotes to #error messages
ab7de14eaf1d454cb8cbc37dbde89688ec6b7f5a [PATCH 2/2] RISC-V: Add quotes to #error messages (all)
39491441a3aca7725d5a6dfeea4b01229d30c899 [RISCV][committed] Remove spurious newline in ztso sequence
36788c9ff6d044210ddee23154306ba54bc3087b [PATCH] RISC-V: Add Types to Missing Bitmanip Instructions
1d17e3d66736cc8d875bf02530f3f6aa498f0d09 RISC-V: Support RVV VFWREDUSUM.VS rounding mode intrinsic API
eaabae8e305d8df244a00177b92e5d1101600ab0 RISC-V: Change fnms testcases assertion to xfail
c27f06260b248062c3b22f3963858ce3e1ee1882 VECT: Support loop len control on EXTRACT_LAST vectorization
d3b5a1bccc219680dc19281b6fd6cc798bb679eb Fortran: implement vector sections in DATA statements [PR49588]
27de9aa152141e7f3ee66372647d0f2cd94c4b90 tree-optimization/94864 - vector insert of vector extract simplification
2c27600fa79431576f47d55b9ed7b2f4790def67 Simplify intereaved store vectorization processing
f4658e025424ac281dd8b7e61f798f435dbf1cab VECT: Add LEN_FOLD_EXTRACT_LAST pattern
47f95bc4be4eb14730ab3eaaaf8f6e71fda47690 RISC-V: Add multiarch support on riscv-linux-gnu
3571cc93511b39f7a403fe5eab0e316cd7e86220 RISC-V: output Autovec params explicitly in --help ...
b817bfad31b3bb8701ad1b6bd350b841e45693df RISC-V: Add riscv-vsetvl.def to t-riscv
10a7d31dd5cdb2689272b5664627daece9b154ee RISC-V: Clang format riscv-vsetvl.cc[NFC]
d18296e844f35c529f338569622b85fc44d68b5f RISC-V: Adapt live-1.c testcase
ea1eb12a38f09e494d5ef072e55653a6463d57eb RISC-V: Add attribute to vtype change only vsetvl
5f3c8075f230309c4417b0e5256283d010ac99d2 RISC-V: Fix gather_load_run-12.c test
29487eb237b893c673e9ecc6409b175e22792f13 RISC-V: Fix VTYPE fuse rule bug
3beef5e6b5b12b5c90040c8485f1836e2dd6cf83 RISC-V: Fix potential ICE of global vsetvl elimination
82d5c7261fed3cf163945fda2c541ff985bd8dc5 vect: Remove some manual release in vectorizable_store
69a0c51ecbb7c24fb22f9caf8ea3ee89268660e4 vect: Move VMAT_LOAD_STORE_LANES handlings from final loop nest
af3820d10d706458633e9e232a989965de24aa49 vect: Move VMAT_GATHER_SCATTER handlings from final loop nest
92f2ec417c57e980b92b8966226fc2bfbf042af8 RISC-V: Add conditional unary neg/abs/not autovec patterns
18befd6f050e70f11ecca1dd58624f0ee3c68cc7 [PATCH] RISC-V:add a more appropriate type attribute
6619b3d4c15cd754798b1048c67f3806bbcc2e6d Improve quality of code from LRA register elimination
edb1a75b84e9c8e532c920b35fdf2789bb031637 Revert "Emit a warning when AVX10 options conflict in vector width"
0345152f922c3a58ae0a8ee014e37dcfab35592c RISC-V: Refactor RVV class by frm_op_type template arg
1c51805e2468bc10057bc0f2fc12fab909d21d04 RISC-V: Fix one typo in autovec.md pattern comment
308e716266787f84ba4a47546317dae83be8901c testsuite/111125 - disable BB vectorization for the test
7b67cab154d4b5ec2a6bb62755da31cefbe63536 tree-optimization/111128 - fix shift pattern recog
a28d4fce8ec2540259a257149de7081f27fb027e VECT: Apply LEN_FOLD_EXTRACT_LAST into loop vectorizer
e80f7c13f64e10c6a3354c5d6b42da60b21ed0b8 tree-optimization/111125 - properly cost BB reduction remain stmt handling
a1558e9ad856938f165f838733955b331ebbec09 tree-optimization/111115 - SLP of masked stores
2a0de833be3cb451cedf75ccae3d07f9825d7dc6 gimple_fold: Support COND_LEN_FNMA/COND_LEN_FMS/COND_LEN_FNMS gimple fold
43da77a4f1636280c4259402c9c2c543e6ec6c0b tree-optimization/111125 - avoid BB vectorization in novector loops
8c3146ce0ee14bc6747fb92947879d82d43f3bb2 RISC-V: Fix reduc_strict_run-1 test case.
e7aec3ae38ce740885e73255e12675174790758d RISC-V: Add missing conversion tests.
b6ba0cc9339f2cc81398863ae779daa6c8853ad6 RISC-V: Allow const 17-31 for vector shift.
a047513c9222f14adc6e5a015e038b207bb9a653 RISC-V: Enable pressure-aware scheduling by default.
1fbcae1c6452c9939a4be818a64cd01883abd80e RISC-V: Add COND_LEN_FNMA/COND_LEN_FMS/COND_LEN_FNMS testcases
701ce3c723623af13597c05df09a049c57c52fc0 libstdc++: Declutter std::optional and std:variant pretty printers [PR110944]
d96659e34cdcf43640541e1b7401ac546e0d1bf5 Fix confusion about load_p in vect_build_slp_tree_1
3ea624da71095cd480c31983d13db45bd9c5a738 RISC-V: Move vector-abi testcases into rvv/base folder
449ab115dece8ac8e8f27d2d7b5bc653a2c75d3a RISC-V: Add early continue for ENTRY and EXIT block
a739bac402ea5a583e43dbd01c14ebaff317c885 tree-optimization/111136 - STMT_VINFO_SLP_VECT_ONLY and stores
470da3b27e6dbeb3286b09dcb1c1b810ac75b276 Apply some TLC to vect_slp_analyze_instance_dependence
845ee9c7107956845e487cb123fa581d9c70ea1b tree-optimization/111137 - dependence checking for SLP
b41d7eb0e14785ff0ad6e6922cbd4c880e680bf9 RISC-V: Enable Hoist to GCSE simple constants
30699b999e94b66ff8706d3b07a35b2a9554d10c [PATCH v10] RISC-V: Add support for the Zfa extension
3cd2b73079bac374ce1c542b9c9e354e00a8713d [committed] RISC-V: Fix minor testsuite problem with zicond
e1f096a3cc96c71907cfbc7b8baf67a3d863cb6d RISC-V: Make stack_save_restore tests more robust
df177510665c4e1045bdaadf10d837f1bdc4ea06 RISC-V: Add Types to Un-Typed Sync Instructions:
e7545cadbedfc167749d801bd574cf9fe22ed5c5 RISC-V: Support LEN_FOLD_EXTRACT_LAST auto-vectorization
b3b13fb1cbad6e5836dee947e85d2954bcacabed RISC-V: Fix xtheadcondmov-indirect.c
6567837fd823a93f7f7948a73ff9dc1153592e8c RISC-V: Fix spill-12 test
3745feb19ed072e0865b12a891d7dbf7ba12c337 RISC-V: Fix spill-11.c testsuite failure
e030af3e6f6d3ae555d6f70047ea3a2bf5744b7e RISC-V: Refactor Phase 3 (Demand fusion) of VSETVL PASS
1671ad9ecff9f361870aeb26d5c5c6d9808826d7 RISC-V: Fix VSETVL test failures
e7b585a468aa4980955ae25fa9f4b41a3dc2995e RISC-V: Disable user vsetvl fusion into EMPTY or DIRTY (Polluted EMPTY) block
421cf6109ad23ae0f5d3da9adb582eb464e8826c RISC-V: Fix uninitialized probability for GIMPLE IR tests
c2d04dd659c499d8df19f68d0602ad4c7d7065c2 RISC-V: __builtin_riscv_pause for all environment
cf64ab18e3f820376ff20c663c7c7bf1af290f02 RISC-V: Fix documentation of __builtin_riscv_pause
973eb0deb467c79cc21f265a710a81054cfd3e8c RISC-V: Fix error combine of pred_mov pattern
818cc9f2d2f3dbbd4004ff85d3125d92d1e430c9 RISC-V: Fix AVL/VL get ICE[VSETVL PASS]
58a48781efa31e08b570f035fbceaaa8018c3412 RISC-V: Fix ASM check of vlmax_switch_vtype-16.c
97aafa9cbb68ffa23aa9f018cc5cb30648a72427 vect test: Remove xfail for riscv
b3176bdc86c04da6545a4bd8e2fb7f38d3f2db8d RISC-V: Refactor and clean expand_cond_len_{unop,binop,ternop}
8b0662254cdac3e0b670c1c54752e1d43113b0f4 RISC-V: Make PR 102957 tests more comprehensive
4053d295fdd81d3e05c4977e3cd9c647e8cc6bc2 RISC-V: Add stub support for existing extensions (privileged)
fea5442127daf8472966360279d402023dba3379 RISC-V: Add stub support for existing extensions (vendor)
f30d6a48635b5b180e46c51138d0938d33abd942 RISC-V: Add stub support for existing extensions (unprivileged)
d16af3ebea84749ac673db29a4124d2dc7cd369e RISC-V: Fix one ICE for vect test vect-multitypes-5
4b70c7c849331d45c0d6a1a4e1cf96b103be9aa6 RISC-V: Add Types to Un-Typed Vector Instructions
6e23440b5df4011bbe1dbee74d47641125dd7d16 RISC-V: generate builtin macro for compilation with strict alignment
fce74ce2535aa3b7648ba82e7e61eb77d0175546 RISC-V: Added zvfh support for zfa extensions.
94b950df6f8c46925799f642e5c44f42638f2b5e RISC-V: Use splitter to generate zicond in another case
260f743aa476abce8f88cceaca12abcb8115b02f RISC-V: Enable movmisalign for VLS modes
7accc6208befae77699a56f67a94da1e247ed069 RISC-V: Make sure we get VL REG operand for VLMAX vsetvl
a248e1cc860821b96a42be96478257c4964a7c2a RISC-V: Make arch-24.c to test "success" case
3d1d3132b9d4dc8b6069ad95dad624371124f297 RISC-V: support cm.push cm.pop cm.popret in zcmp
b27d323a368033f0b37e93c57a57a35fd9997864 RISC-V: support cm.popretz in zcmp
490bf0b9756368b34221348b0260e061634e497b RISC-V: support cm.mva01s cm.mvsa01 in zcmp
586ca3db52228ac1c5f2b5ce754928ced4e8e434 test: Add xfail for riscv_vector
ece3884b4b5d64dff1f112d0ec13c9b71dd0fc6a test: Fix XPASS of RVV
5d34a42f3b64fde9bb8be74231d8d11590c8d1db test: Adapt slp-26.c check for RVV
282c33c5f1c9b2965c18877aea8466701ab4e678 test: Add xfail into slp-reduc-7.c for RVV VLA vectorization
ac55f9710fe82a4ed8cb132f57303775ce60e5d1 RISC-V: Fix vsetvl pass ICE
15269a6b13da7f72bf78bbdd0bf7cd579b4b620c Refactor vector HF/BF mode iterators and patterns.
79ab19bcbae6e54c91bfca4ffa45cbc5eb0374bc RISC-V: Refactor and clean emit_{vlmax,nonvlmax}_xxx functions
b5900ad3a55d130ea201b178c9bddd5675743689 Fix gcc.dg/tree-ssa/forwprop-42.c
e69d050fd990f8e72e19e6dfb1bf7da2f09236f7 RISC-V: Change vsetvl tail and mask policy to default policy
4da3065a6422062b029df9660a226297802455f4 RISC-V: Add Vector cost model framework for RVV
0337555c7a2524bd334bafdc06dd801818eb34b6 RISC-V: Add vector_scalar_shift_operand
3e37e8231849ded7e214042f60f59fdcec75d7d3 RISC-V: Support rounding mode for VFMADD/VFMACC autovec
625962440ba5c737d6f35f7a1c9af1e9ef6bef3a RISC-V: Support rounding mode for VFMSAC/VFMSUB autovec
a7cefeaead68e5d89f65ba3a558eddef9b0b0f75 RISC-V: Support rounding mode for VFNMSAC/VFNMSUB autovec
af0c625f6085567522cf55b2ced05f07ec7be67a RISC-V: Support rounding mode for VFNMADD/VFNMACC autovec
16a268785f646b3d641acd8634ab487b24f51c33 MATCH: extend min_value/max_value match to vectors
3d86e7f4a8aef1b864a51660825597eafe9059b1 MATCH [PR19832]: Optimize some `(a != b) ? a OP b : c`
ed60ffd814c86a225a4586da649f6e76718490db RISC-V: Support FP ADD/SUB/MUL/DIV autovec for VLS mode
ef4e916b526a65411a577126d34c3b0bb97b6111 RISC-V: Add dynamic LMUL compile option
e40edf6499576993862801640227e076b868241b testsuite/vect: Make match patterns more accurate.
ffbb19c6afc016f6dc001ad0f567d3216ff601b1 RISC-V: Add vec_extract for BI -> QI.
5f2098cce6c75117927fef317c714dd2088b0189 RISC-V: Enable VECT_COMPARE_COSTS by default
4d1c8b04ec8731b57ddbc80d76e40a61d8fa3324 RISC-V: Adjust expand_cond_len_{unary,binop,op} api
a1e5fd2c9adc35ef435dcc96991320d69453919a RISC-V: Add conditional autovec convert(INT<->INT) patterns
75a243c7c7c7efa9f12038480b46260ada739202 RISC-V: Add conditional autovec convert(FP<->FP) patterns
258af9c7004cdc7963f783dd510404e79f0b5362 RISC-V: Add conditional autovec convert(INT<->FP) patterns
b8df57b3221aac70f22fb5c93d0b95bf22fded90 testsuite: Fix up pr110915* tests on i686-linux [PR110915]
c2d3211d580369b75200fbdd7b854d30460e0aba testsuite: Fix vectcond-1.C FAIL on i686-linux [PR19832]
419c423d3aeca754e47e1ce1bf707735603a90a3 libstdc++: fix memory clobbering in std::vector [PR110879]
a7d052b3200c7928d903a0242b8cfd75d131e374 RISC-V: Support FP MAX/MIN autovec for VLS mode
d99a868a9b100ab5a4b270a1acece60b5b6153a3 RISC-V: Support FP16 for RVV VRGATHEREI16 intrinsic
affbb7b4322a01cecddaa4dfb70faee925a2348b libstdc++: Fix filenames and comments in tests [PR26142]
99ec76eb8b0826c48709148457f2ef45819ab4ea testsuite: Remove unwanted 'dg-do run' from gcc.dg/vect tests
6f94ef6c86074a8348ec21d8aade04ce67b4e292 RISC-V: Fix Dynamic LMUL compile option
8451fbd56871267e8c1cd781db6d8f02e826f66c riscv: xtheadcondmov: Don't run tests with -Oz
509c10a62546b9b3430040e455b7258322a024e6 RISC-V: Export functions as global extern preparing for dynamic LMUL patch use
a7b048c0f42198a0f8d4244f1bd25211cf48383f RISC-V: Support FP SGNJ autovec for VLS mode
fba0f47e4617e164716d3bce587fc6948088e225 RISC-V: Emit .note.GNU-stack for non-linux target as well
e87212ead5e9f36945b5e2d290187e2adca34da5 RISC-V: zicond: Fix opt2 pattern
af5cb06ec17780736749ed51cfc6dfad9397156c riscv: xtheadbb: Enable constant synthesis with th.srri
c85db606d46774283ca4ec037dc3051719828f41 RISC-V: Add Types to Un-Typed Pic Instructions
decbf9ec81f33052be12296b89cd86ea65ae10da RISC-V: Add Types to Un-Typed Risc-v Instructions
fbc01748ba46eb26074388a8fb7b44d25a414a72 RISC-V: Expose bswapsi for TARGET_64BIT
102dd3e8067f12beee1b8b0bec6848733d107aee riscv: Synthesize all 11-bit-rotate constants with rori
ce65641354d98fc80912d5516b7fea87c344c2cc RISC-V: Fix Zicond ICE on large constants
254100a9a003a16255a58eec3fa24168e6dc7124 RISC-V: typo: add closing paren to a comment
c1597e7fb9f9ecb9d7c33b5afa48031f284375de RISC-V: Add conditional sqrt autovec pattern
94a4b93292f8ab19910c844bb9b63e4a68b55d33 RISC-V: Part-1: Select suitable vector registers for vector type args and returns
fdd59c0f73e9e681cd5f4d0eee2dd58d60d8dbe1 RISC-V: Part-2: Save/Restore vector registers which need to be preversed
4abcc5009c1ad852e235f368f535c0bf6bfa7697 RISC-V: Part-3: Output .variant_cc directive for vector function
9ee40b9a7bee83394fc7ba6fef71cb76d91b49c8 RISC-V: Keep vlmax vector operators in simple form until split1 pass
57d1c9c1fe57a0de66e5c20538f77f49b1298071 riscv: xtheadbb: Fix xtheadbb-li-rotr test for rv32
0574a19047fa66f26a38e79c1b9ae6a8207bba89 RISC-V: Fix incorrect folder for VRGATHERI16 test case
ee21f79f72980732214156bae2eb5daf7e089bda RISC-V: Remove unreasonable TARGET_64BIT for VLS modes with size = 64bit
1b4c70d4271a00514ae20970d483c3b78d9d66ef RISC-V: Fix VSETVL PASS AVL/VL fetch bug[111295]
6b96de22d6bcadb45530c1898b264e4738afa4fd RISC-V: Fix incorrect mode tieable which cause ICE in RA[PR111296]
2ce182e258d3ab11310442d5f4dd1d063018aca9 libgcc _BitInt support [PR102989]
f76ae4369cb6f38e17510704e5b6e53847d2a648 C _BitInt incremental fixes [PR102989]
af88776caa20342482b11ccb580742a46c621250 RISC-V: Add support for 'XVentanaCondOps' reusing 'Zicond' support
572abb52f5761a647035ee39d0e443c1c3622e75 RISC-V: Remove incorrect earliest vsetvl post optimization[PR111313]
6aba1fa7a4ceaf66adc587da23834d1f317f871d RISC-V: Add VLS mask modes mov patterns
daaed758517c81fc8f8bc6502be648aca51ab278 Support vpermw/vpermi2w/vpermt2w instructions for vector HF/BFmodes.
f9cb357ae962ba2922b8507f4d96227780a063b9 RISC-V: Fix incorrect nregs calculation for VLS modes
a0e042d61dadc6bdcbeaa3b712b7a83415a12547 RISC-V: Suppress bogus warning for VLS types
0c37fef39fa0a8f77ea4fc67d1bbf5067d4bddb9 riscv: bitmanip: Remove duplicate zero_extendhi<GPR:mode>2 pattern
0e25761b373f075a41d43b9462366a653dbf1121 riscv: thead: Fix mode attribute for extension patterns
d8bdc978dc9cd4a6210997edacedb954375af70d riscv: xtheadbb: Fix extendqi<SUPERQI> insn
b96b554592c5cbb6a2c1797ffcb5706fd295f4fd libstdc++: Add Filesystem TS and std::stacktrace symbols to libstdc++exp.a
7547f65f60c0bbf8de704c569c92c7a0e31a6175 Support folding min(poly,poly) to const
df9a25384e6c484643b48b59b4e6e07504889b61 RISC-V: Fix VLS floating-point operations predicate
0d50facd937bda26e3083046dc5dec8fca47e1e6 RISC-V: Fix dump FILE of VSETVL PASS[PR111311]
108779056eb4b56e715a094fac48a699d2dc91b3 RISC-V: Expand fixed-vlmax/vls vector permutation in targethook
4ab2520ec424fa097ec839f2cde33522b220e93a RISC-V: Add missing VLS mask bool mode reg -> reg patterns
d05aac047e0643d5c32b706c4c3b12e13f35e19a RISC-V: Add VLS modes VEC_PERM support[PR111311]
7f9083ffe262cb14c49d042fc6363514badea6cb RISC-V: Use dominance analysis in global vsetvl elimination
48d4ab698036de859e194edc037faed2ef9b58a5 RISC-V: Remove redundant functions
88a0a883960910530bfefa750461168f539f4a00 RISC-V: Enable RVV scalable vectorization by default[PR111311]
aa512cc0146d1be957ccc35a8f4a45ebad0de598 RISC-V: Update Types for Vector Instructions
d8751d9e32214380e6fdbb9e47f13192cc899469 RISC-V: Add Types for Un-Typed zc Instructions
4074aede45e3d8fbdb8fe28e1f084e869d3546f5 RISC-V: Add Types to Un-Typed Zicond Instructions
25c30049f5896ef6312cf45a1c058ee3e3079e6a RISC-V: Update Types for RISC-V Instructions
316d57da5bb9205b946afc56d78582fee874e4b5 RISC-V: Add Types to Un-Typed Thead Instructions
721021a18e2ac004140ddd93113c11075ea890c6 RISC-V: enable muti push and pop for Zcmp when shrink-wrap-separate is ineffective
c1e4efd8ae3488c5a2c11ac42d4670b67e1f7bf4 RISC-V: Add vcreate intrinsics for RVV tuple types
b90a4c3dd502974f352084c23a6cdfd767e1340b RISC-V: Elimilate warning in class vcreate
5e19f8991579f70aeccbe4003b7f8c914ce7f338 RISC-V: Add missed cond autovec testcases
df48285b2484eb4f8e0570c566677114eb0e553a riscv: Add support for strlen inline expansion
949f1ccf1ba9d1f33ca3809424e97429b717950a riscv: Add support for str(n)cmp inline expansion
af6d089b4ded96b529c7063bd7873e4630a3a64d RISC-V: Support Dynamic LMUL Cost model
75f069a6403b5d4217fb5b654a9c656b4dca9dc1 RISC-V: Remove unused structure in cost model
360c8cad6a727d5afd43017ca1ce9a84c6db61c5 RISC-V: Finish Typing Un-Typed Instructions and Turn on Assert
701b9309b687ed46188b9caeb7d88ad60b0212e5 RISC-V: Support VECTOR BOOL vcond_mask optab[PR111337]
fcf66bceb4670fcd6ed8efef7f64003354e609f1 RISC-V: Enable vec_int testsuite for RVV VLA vectorization
20268ad194d3c00d1182af345875ce63a4a9c762 RISC-V: Remove redundant ABI test
feb23a37e6142016c3463aa3be3e900d45bc3ea5 RISC-V: Bugfix PR111362 for incorrect frm emit
6737a51728881790b54e490494b468267f04a608 RISC-V: Support cond vfsgnj.vv autovec patterns
842e4d51c11ff5ac842d925e73f4094901f4a9be RISC-V: Support cond vnsrl/vnsra autovec patterns
c0a70df6403397a69204cba1df82114a9ddf7076 RISC-V: Support cond vmulh.vv and vmulu.vv autovec patterns
04238615bba435f0b0ca7b263ad2c6bdb596e865 tree-optimization/111387 - BB SLP and irreducible regions
d03773c8efea216c67b3ac8870fcac2662c522fe RISC-V: Support VLS modes VEC_EXTRACT auto-vectorization
7c4f6ebe54f4da0097acd07f41782ff6cc39e9a4 RISC-V: Format VSETVL PASS code
53ad1bd520759580b9a5cc590a81a1a30b9e2e28 RISC-V: Fix ICE in get_avl_or_vl_reg
8ebb02dd6c9d190c84bf40259201e8e7327291f8 RISC-V: Support VLS modes mask operations
14c481f7fc0a90de7e5b7aec109e12b7b5220d65 RISC-V: Cleanup redundant reduction patterns after refactor vector mode
6223ea766daf7c9155106b9784302442e2ff98d3 RISC-V: Refactor vector reduction patterns
3a1e9f3ed7aa49adad02190ace0614e0b37fc089 diagnostics: support multithreaded diagnostic paths
68cb873fd360dbb64f2a6dfb28e79399ff99d07d RISC-V: Support combine extend and reduce sum to widen reduce sum
e6413b5dc5b786391802368207ec86945eef2ae0 RISC-V: Refactor expand_reduction and cleanup enum reduction_type
e1ec05b800e2ee9f2dfc8f99b1c5622103f52cd5 test: Remove XPASS for RISCV
0854ebea63f59eb678ebf4440afe1d18ed5bb6d4 test: Isolate slp-1.c check of target supports vect_strided5
9b80311cdc685e6f27cf4f8625ac3d24dcc59d7f test: Block slp-16.c check for target support vect_strided6
16c5d0f0c4c6f72bdfc01c640f11a845530c4d3d test: Block vect_strided5 for slp-34-big-array.c SLP check
5c7c359c907852c4c374e85d4f8a392fd960e98e test: Block SLP check of slp-34.c for vect_strided5
b259284ee135a432e0097d923d0908350f74f468 test: Block SLP check of slp-35.c for vect_strided5
dd6e5d29cbdbed25e4e52e5f06b1bfa835aab215 RISC-V: Fix using wrong mode to get reduction insn vlmax
ba4c1f2bfc9ec063188b39d0281fae04c57b1416 MATCH: Fix `(1 >> X) != 0` pattern for vector types
d7b6020276a843e97f6135259b4ab3b53a5850e2 fix PR 111259 invalid zcmp mov predicate.
52841fb7035c0e3a6d4354fc4e61c0bd3fea81ca libstdc++: Replace dg-options "-std=c++11" with dg-add-options strict_std
7810fb3a142bed6da9eca8fde114629023fc5c4e libstdc++: Remove dg-options "-std=gnu++23" from remaining tests
b9a2dce8c45b7b35f6d5811a6c1c0ee53d2af0c3 libstdc++: Remove dg-options "-std=gnu++20" from 23_containers tests
23224f06c980533d474b3a29d2437e5537916fc0 RISC-V: Support FP SGNJX autovec for VLS mode
a1751681867a3ce760ea6924c3c632f1b81db97e RISC-V: Make bit manipulation value / round number and shift amount types for builtins unsigned
9882b81410f247604fbfd5883894a96127f461ac RISC-V: Make SHA-256, SM3 and SM4 builtins operate on uint32_t
86451305d8b2a25e7c6ea6c2f1ee69c419cba3ef RISC-V: Expand VLS mode to scalar mode move[PR111391]
5761dce5d71e3dd013ce4db4c5e9b5e49c6cba23 RISC-V: Remove redundant codes of VLS patterns[NFC]
fafd2502c5416fe4f69daf13224ab1efbf256a1c RISC-V: Support VLS modes reduction[PR111153]
4e679b9ceac22cf369a57ebb4f9175c1d02b2466 RISC-V: Remove autovec-vls.md file and clean up VLS move modes[NFC]
1f9bf6f372da48c75d42f2669ba92f3fd4370fda RISC-V: Support VLS modes vec_init auto-vectorization
d45ddc2c04e471d0dcee016b6edacc00b8341b16 tree-optimization/111294 - backwards threader PHI costing
8fbc0871da26fac1668ba939f4492876794734ac RISC-V: Fix VSETVL PASS fusion bug
71e0f38dcb73e4cdfe61fc28821551b325320302 RISC-V: Support VLS reduction
4ab744ace2478c4b986ec4ac27c0e3467b7a6419 RISC-V: Add fixed PR111255 testcase by other patch
1b03c73295266984378dd9da99a9458b591b964c RISC-V: Removed misleading comments in testcases
bdb7d85dde56b69af378adcffe45accf792cf4fd RISC-V: Fix bogus FAILs of vsetvl testcases
4260f4af4dde6dbf85c28da7e8aaf03985b3d171 RISC-V: Remove redundant vec_duplicate pattern
28f16f6d9b4fc1391275f4ba24dc2019ee64fc22 RISC-V: Bugfix for scalar move with merged operand
aad0c3e197f21fac169917e187c61764a8a3ff3d RISC-V: Support VLS mode for vec_set
f45cca26263c3563e9db15e0ba64d4a114316808 RISC-V: Add builtin .def file dependencies
7f4fc87086b5ad57edaaf628ba6cb92649d14453 RISC-V: Fix typos on comments (SVE -> RVV)
95d2ce05fb32e663bc7553438ccee7f4d4e36a35 RISC-V: Refactor and cleanup fma patterns
8e09480193ef870745f91f48a44ed0307757fb3c RISC-V: Support integer FMA/FNMA VLS modes autovectorization
28569e79e34ac8760833640abcb21c5b36add2b3 RISC-V: Support VLS floating-point FMA/FNMA/FMS auto-vectorization
5b945243c77e3ecd8dfab4b8b44f21daa3de8fe1 RISC-V: Support VLS unary floating-point patterns
e1817426e85f2181a97ac4f71a87baaa9645b1b5 RISC-V: Fix RVV can change mode class bug
c81d9b9fabaea25950a5fea91e4f541077078087 LTO: Get rid of 'lto_mode_identity_table'
131c1df8d901385c8622aa067c5890458005d1a9 RISC-V: Add FNMS floating-point VLS tests
5b554c559d0103bfc1a68777907945ec3035a2bd RISC-V: Fix --enable-checking=rtl ICE on rv32gc bootstrap
bea89f78f2f02a0dabe4993ccf1c7cdb48be040b RISC-V: Extend VLS modes in 'VWEXTI' iterator
d024a31a09d18d2586769602205a60ff3afe568c RISC-V: Fixed ICE caused by missing operand
264ff8182580c57f77c6bc60381cfb2c3842b46c RISC-V: Reorganize and rename combine patterns in autovec-opt.md
c3d2b6bc913803d3eccacb9e354f37eef1cee212 RISC-V: Fix Demand comparison bug[VSETVL PASS]
b34397857adb7b3ae72e2701879bcb4e19165d63 RISC-V: Support VLS floating-point extend/truncate
b9cb735fc1bb4ca2339ab900e2d07667d7c0f6b4 RISC-V: Support simplifying x/(-1) to neg for vector.
27282dc0931484c31fa391772499d878afcc746a internal-fn: Support undefined rtx for uninitialized SSA_NAME[PR110751]
c08ffa04d95890f39b3f99d50d0276a61a3e66bf RISC-V: Remove math.h import to resolve missing stubs failures
66c13521f56fee1ec6db7ddd9fb053cf852a84a1 RISC-V: Support VLS INT <-> FP conversions
4e35cf2ea1fbcdf798b37b2e00d9977683b17b8a RISC-V: Rename predicate vector_gs_scale_operand_16/32 to more generic names
47065ff360292c683670efb96df4b61f57dc1d9a RISC-V: Optimized for strided load/store with stride == element width[PR111450]
38048fc501b3d53fc38c701ae4625024cd93bd1d RISC-V: Fix SUBREG move of VLS mode[PR111486]
9b5b2c9f95056f97cf95f0e8d970015aa586497b RISC-V: Enable undefined support for RVV auto-vectorization[PR110751]
5ff4431675c0d0c800d4a983254e94a6b401c14d RISC-V: Adjusting the comments of the emit_vlmax_insn/emit_vlmax_insn_lra/emit_nonvlmax_insn functions
94982a6b9cf4c61357eabebd14866969ef4c2b6e RISC-V: Support VLS mult high
29862e21f6d656eca59284c927d0c4c0698eb99c RISC-V: Add more VLS unary tests
1df81f01e45c8b16cf3995cf63c766124a0729ea RISC-V: Add VLS integer ABS support
8bf5636e4fca947527a302813fdf08e1bbc82fa3 RISC-V: Support ceil and ceilf auto-vectorization
dba79ce1681828d05f6ed73ad56d8c3f3d53411a RISC-V: Leverage __builtin_xx instead of math.h for test
e99cdab81bd3df7979d9b6917c06c80d73dff1e0 RISC-V: Split VLS avl_type from NONVLMAX avl_type
5bc8c83d30b852a09eaf604464711054c11d9a51 RISC-V: Support combine cond extend and reduce sum to widen reduce sum
e446ed29f6c92dd677ec5792aada5343c9533c2c RISC-V: Remove arch and abi option for run test case.
0ed05db7cee8f92604b5d7761713b7a7161e0db0 RISC-V: Optimization of vrgather.vv into vrgatherei16.vv[PR111451]
40ac613627205dd4d24ae136917e48b357fee758 RISC-V: Rename the test macro for math autovec test
8a87ba0b4fe72acbf34e48898652d0f78b9e235e RISC-V: Add VLS conditional patterns support
6eb55cab2956d130d2e18c895e4f67fc9381199e RISC-V: Remove @ of vec_duplicate pattern
cefd4ad06b5756819b5371755bb4b2c4e3967d82 RISC-V: Move ceil test cases to unop folder
dc607a0d861c2d6e3067c6b2b5a106d07bba1980 RISC-V: Add VLS widen binary combine patterns
190ba48952b1ec4b73bb31ed150b73b055408af1 RISC-V: Add VLS mode widen ternary tests
4c496020764057453415f1ae599950724ec0e871 RISC-V: Refine the code gen for ceil auto vectorization.
63f3c0f1b59e65592f05b6f7a077d2fb25748d20 RISC-V: Remove FP run test for ceil.
83441e756734cd86b017e73a396ad8a0155a1bd1 RISC-V: Suport FP floor auto-vectorization
648347be1fdaaeb866607dbac02fba97d62b839b RISC-V: Add VLS unary combine patterns
e4aa1a49010fb55f3e90731464d21b05baeb6855 RISC-V: Support full coverage VLS combine support
deb844c67f1e2b116518f9742a6acbe6f19ea28f RISC-V: Fix fortran ICE/PR111546 when RV32 vec_init
9d5f20fc4a6b3254d2d379309193da4be2747987 RISC-V: Fix AVL/VL bug of VSETVL PASS[PR111548]
c983744307527793b09138420553bd18210c08ef RISC-V: Rename rounding const fp function for refactor
e2023d2d5ff2e703a025ab5a8d12e27d96efd002 RISC-V: Support FP nearbyint auto-vectorization
e4cf5f54cac52f937b7929ba2fac71c059a77f7a RISC-V: Support FP rint auto-vectorization
31ef3fe9e49b5446d465628830a9b6591c2168ce RISC-V/testsuite: Fix ILP32 RVV failures from missing <gnu/stubs-ilp32d.h>
d324984f9fa50e0055e3818f29d8c019df08cecf RISC-V: Support FP round auto-vectorization
dd0197fb4cdee8cd5f78fea9a965c96d7ca47229 MATCH: Optimize COND_ADD_LEN reduction pattern
277456180ea4d002675a9498a7b1ec9d483ded73 MATCH: Optimize COND_ADD reduction pattern
a5f39859d0c14a831e2826f5e5cfe036e56dcd7d RISC-V: Add zicond tests
1c4ca595d817ae1e1139145f86cfb58899d376bd RISC-V: Support FP trunc auto-vectorization
4a15bb6139431647a661dfbf670293b84650e0ea RISCV test infrastructure for d / v / zfh extensions
073849da3dfd5cabbfd4492a40a17b207b4a7630 DSE: Fix ICE when the mode with access_size don't exist on the target[PR111590]
fcbbf158ee90400877f81185bb40b5870dca1558 RISC-V: Support FP roundeven auto-vectorization
d326bb6d7588425d013791299272f913fb23e56d Harden scan patterns with a bit of scripting:
b31218bc93683554077c68dec14f4217a5e66835 vect, omp: inbranch simdclone dropping const
110ffb2d8d3a64b32dd56ac995c2e30e8f64d4dc RISC-V: Bugfix for RTL check[PR111533]
0fb176ef0486d78b1bb473f0de794f6b8cc62ac3 Replace riscv_vector with riscv_v in target selector clauses.
88d79b9b03eccf39921d13c2cbd1acc50aeda126 tree-optimization/111614 - missing convert in undistribute_bitref_for_vector
73cd319b72ca45a537688cc8cc5751d86a00a0e9 vec.h: Make some ops work with non-trivially copy constructible and/or destructible types
88d8829e4f435bfc844db5a9df730e20faf7c2c7 RISC-V: Support {U}INT64 to FP16 auto-vectorization
bcc97edf8c9e40232fa30e7f0070057b6516fd77 Simplify & expand c_readstr
59cda1f9525702d5d6560002c874f12c0103f7df use *_grow_cleared rather than *_grow on vect_unpromoted_value
51d09e67df52164c2025afa24531cf79820ff4c8 RISC-V: Replace not + bitwise_imm with li + bitwise_not
4f1e5379fd77c744111672ab3d961cecb4826b80 RISC-V: Specify -mabi=lp64d in wredsum_vlmax.c testcase
44efc743acc01354b6b9eb1939aedfdcc44e71f3 Fix INSN costing and more zicond tests
d6fe757b39297c1c0cf243acee860d045726c184 RISC-V: Add type attribute in *<optab>_not_const<mode> pattern
04e772bbdcbc1cea67cd498c1a45e4360bf5f8e1 RISC-V: Use safe_grow_cleared for vector info [PR111649]
f416a3fdbee32ae12b055b8e3e4ee11c3df7c117 Make riscv_vector::legitimize_move adjust SRC in the caller.
e4a4b8e983bac865eb435b11798e38d633b98942 RISC-V:Optimize the MASK opt generation
5f3da480e7541a9c29d655dccb2463fc5f3cf2c4 Fix typo in add_options_for_riscv_v, add_options_for_riscv_zfh, add_options_for_riscv_d .
9464e72bcc9123b619215af8cfef491772a3ebd9 cpymem for RISC-V with v extension
a70b158c270fffc40fde258bd778184fbc32b942 Replace UNSPEC_COPYSIGN with copysign RTL
645f2a7dd47aa84d94df594bbd736085e51fc637 RISC-V: Unescape chars in pr111566.f90 test
6dc44436301143a286e3b45de0673af012299eba Fix SIMD call SLP discovery
0bda3f25147203d04724fa375daf3d1110da5c3f RISC-V: Remove @ of vec_series
480648ce9ebda809c726e6f54d1bf7f652d68075 Add outgoing range vector calcualtion API
250dce25b6ca7ce63f036fc4a90b4d1e8c6517e9 RISC-V: Test memcpy inlined on riscv_v
f05b68b8f009c644521d6ff2fde940342029b830 RISC-V: Update comments for FP rounding related autovec
00e167fa50d9ade6382d67a275bded891d660d21 RISC-V: Use stdint-gcc.h in rvv testsuite
171420fdc9208198f09ff258164fc4cc1fd4bf74 ipa: Remove ipa_bits
c1bc7513b1d76812752f70cc2ef7e0173dfb0014 RISC-V: const: hide mvconst splitter from IRA
15c1530ebbbcff5ddd254988904c5d5ce72c58f4 RISC-V: Fix scan-assembler-times of RVV test case
a809a556dc0792a34fca7b754ff96ea3ea7d1e7f RISC-V: Bugfix for legitimize address PR/111634
7866984ba427dc56a12ee1b8d99feb4927b834b1 RISC-V: Add more run test for FP rounding autovec
f49886484691d6ecec38ee83353ca34cc71410b7 [APX EGPR] Handle GPR16 only vector move insns
066a43ce72ab6559ba14af9628df19daa0b85cdf Revert "RISC-V: Add more run test for FP rounding autovec"
752bfdb2bf0a4d84bc2fb2858410e9a97f4788d0 RISC-V: Enable more tests of "vect" for RVV
f1ccee6181000bde1f11f557c44d2aef3804e598 TEST: Fix XPASS of TSVC testsuites for RVV
b20e59f49b51b7baf05e1b727be5da947e617496 RISC-V: add static-pie support
91fdbd650d4bc3d1a13891095536f317e3a24d7a Support smin/smax for V2HF/V4HF
b4fc1abbd9a525e724385b91a17c0f4b8a5a6c59 Support signbit/xorsign/copysign/abs/neg/and/xor/ior/andn for V2HF/V4HF.
873586ebc565b6c8abbaaba58b900dbe984bf64f TEST: Fix dump FAIL for RVV (RISCV-V vector)
aa9bce39f1cea1f4cbdf41823c53029a8af40d50 Disable zmm register and 512 bit libmvec call when !TARGET_EVEX512
c1eef66baa8dde706d7ea6921648e6016dc7c93d Support -mevex512 for AVX512F intrins
8e79b1b45a4d74aa866de5abc7bf3ef68e617f06 Support -mevex512 for AVX512BW intrins
784deda0da6062edc0ace62fd7cf1abbcf2fb054 RISC-V Regression test: Fix FAIL of fast-math-slp-38.c for RVV
3f99b709c87acf0c76234d6d054d2813b5e1a5fd testsuite: Fix vect_cond_arith_* dump checks for RVV.
1543f3e331b317c086d9acfbdc2681e510c3d4c8 RISC-V Regression test: Fix FAIL of pr45752.c for RVV
841668aa02a05deca06e68a5931408d970f5c8b2 RISC-V: Refine bswap16 auto vectorization code gen
578aa2f80056175b902671b30cc77e38945e3ba4 THead: Fix missing CFI directives for th.sdd in prologue.
dee55cf59ceea989f47e7605205c6644b27a1f78 RISC-V: Support movmisalign of RVV VLA modes
f8498436d6dd77f3c993e68536a3f6864793829c RISC-V: Add initial pipeline description for an out-of-order core.
db20b83cfffc692691156b67caf9d0228252accb RISC-V Regression test: Fix FAIL of slp-reduc-4.c for RVV
30b76f860a46497592904ed696b9a987769dc775 RISC-V Regression test: Fix FAIL of slp-12a.c
e90eddde570b5082a61369b07894971566536d6e RISC-V Regression tests: Fix FAIL of pr97832* for RVV
dae21448b60874dd6b8501c2f33c956d6c631e5f RISC-V Regression test: Fix slp-perm-4.c FAIL for RVV
cc50337215535e17f1caa5eae34eaa650223c96b Fixes for profile count/probability maintenance
4ecb9b03d9a058925d5a5bc43bdc3a505a587b0c RISC-V: Add available vector size for RVV
4d230493f57dd11b8de9155b03088092f2ecea5c RISC-V Regression: Fix FAIL of bb-slp-pr65935.c for RVV
a704603d458b1e55b561ddfb4e513581ee863ed6 RISC-V: Add testcase for SCCVN optimization[PR111751]
70b5c6981fcdff246f90e57e91f3e1667eab2eb3 tree-optimization/111751 - support 1024 bit vector constant reinterpretation
5255273ee8b14ea565eb43f067a86370d25df114 RISC-V: Add VLS BOOL mode vcond_mask[PR111751]
8a361405375a82ed1975c72b9900a6775e0de037 RISC-V Regression: Fix FAIL of pr65947-8.c for RVV
0b0fcb272b4d6e9f7c98cfbc355ca69c8a653922 RISC-V Regression: Fix FAIL of predcom-2.c
5bb6a8766ec83e20550e1b59f2accb1ef25e3369 RISC-V Regression: Make match patterns more accurate
71f906498ada9ec2780660b03bd6e27a93ad350c RISC-V: far-branch: Handle far jumps and branches for functions larger than 1MB
cfe89942673aeb9ee58ab1a3ae9e60ddf1c698c7 RISC-V Regression: Fix FAIL of vect-multitypes-16.c for RVV
de04f73eefd856914f4a253ad2f1579239512e31 RISC-V Regression: Make pattern match more accurate of vect-live-2.c
23aabded1ff8fd73780af2be25293a2e01488aba RISC-V: Enable full coverage vect tests
d4de593d366f3bbdfe2db7baf60ae32ad876c2cc RISC-V: Remove XFAIL of ssa-dom-cse-2.c
d1e5566685ac9bf8271ccf39d69e81e7ba9ae70d RISC-V: Support FP lrint/lrintf auto vectorization
f6c5e247b2913f0a7b3be986fe96afbed29c1d5e RISC-V: Fix incorrect index(offset) of gather/scatter
400efdddf3d8499d7c7969d26bedb537a625c070 [PATCH v4 1/2] RISC-V: Add support for XCVmac extension in CV32E40P
5ef248c15ec3490f4b98cda4bc27a667a8cf8206 [PATCH v4 2/2] RISC-V: Add support for XCValu extension in CV32E40P
0363bba87feeb00464a5c2d3e7050b9d3f9f93cb options: Define TARGET_<NAME>_P and TARGET_<NAME>_OPTS_P macro for Mask and InverseMask
9452d13b1afb295c3764bb1134f3ac1a1d804989 RISC-V: Refactor riscv_option_override and riscv_convert_vector_bits. [NFC]
faae30c49560f1481f036061fa2f894b0f7257f8 RISC-V: Extend riscv_subset_list, preparatory for target attribute support
a3e50ee96dc3e25ca52608e58c4e653f9976cb4e RISC-V Adjust long unconditional branch sequence
06f36c1d83a7e8b6da47d3c5b325a963baee6aab RISC-V: Add TARGET_MIN_VLEN_OPTS to fix the build
d6b7fe11efe9c7bf44dfe57ded6c86df5ec7e2c7 RISC-V: Support FP irintf auto vectorization
6a3302a41a6bbae706a7b688c446fe60383322fc RISC-V: Support FP llrint auto vectorization
32207b15b7218a7563a36efae4845c2ac8513562 vect: Ensure vect store is supported for some VMAT_ELEMENTWISE case
3bf2366685b24108674d12d7cf91b269e9ee2161 vect: Move vect_model_store_cost next to the transform in vectorizable_store
e00820c8e5cff0c1950a200354263fe6cc13493c vect: Adjust vectorizable_store costing on VMAT_GATHER_SCATTER
7184d2257a0d927e6e3736ba0a169d557e673ad5 vect: Simplify costing on vectorizable_scan_store
8b151eb96b909094050b0be2a204b578b154ee93 vect: Adjust vectorizable_store costing on VMAT_ELEMENTWISE and VMAT_STRIDED_SLP
6a88202e5a43f7b9cafd9fbfca74e3c53ea0f911 vect: Adjust vectorizable_store costing on VMAT_LOAD_STORE_LANES
0a96eedb3477be23391f54cb1f2302fe67641188 vect: Adjust vectorizable_store costing on VMAT_CONTIGUOUS_PERMUTE
0bdb9bb5607edd7df1ee74ddfcadb87324ca00c2 vect: Get rid of vect_model_store_cost
f1a05dc180518d8dd66850833967a15d50c15db0 vect: Consider vec_perm costing for VMAT_CONTIGUOUS_REVERSE
610b845a426e26fa86724e5c9d6f74c7a4baf741 testsuite: Avoid uninit var in pr60510.f [PR111427]
05f98310b54da95e468d799f4a910174320cccbb tree-optimization/111764 - wrong reduction vectorization
2cc4f58a7c12c9b7a82194279c201ebe389f6dba RISC-V: Support FP lround/lroundf auto vectorization
0d00385eaf72ccacff17935b0d214a26773e095f wide-int: Allow up to 16320 bits wide_int and change widest_int precision to 32640 bits [PR102989]
d8c3ace8985cf9b45f7414ce7398bb1274951db9 RISC-V: Make xtheadcondmov-indirect tests robust against instruction reordering
51f7bfaac74e1311e35555c95ac056637373f112 RISC-V: Support FP lceil/lceilf auto vectorization
8f52040e5f08ae0bbc63ee49c07212f07997a59f RISC-V: Support FP lfloor/lfloorf auto vectorization
f0b05073bd3f0e5c8e55ef5a6fd16aa4518956a4 RISC-V: Leverage stdint-gcc.h for RVV test cases
0f40e59f193f96f1bb0fa3e1c2d160567ed29b32 RISC-V: Fix the riscv_legitimize_poly_move issue on targets where the minimal VLEN exceeds 512.
d53d20a940efe4262f18ac3da870eb972dcf84f0 RISC-V: Add test for FP iroundf auto vectorization
2a89656a03282c0fe80c5467c6891c067ae0007a RISC-V Regression: Fix FAIL of bb-slp-pr69907.c for RVV
6b580560a0e393e3b65567263e2cf5477d670592 RISC-V: Add test for FP llround auto vectorization
6decda1a35be5764101987c210b5693a0d914e58 tree-optimization/111779 - Handle some BIT_FIELD_REFs in SRA
fbd3923887b40c90e7da7323cd0338f23339d888 riscv: Fix -Wincompatible-pointer-types warning during libgcc build
ad0bac803ce316bfa5330156a683cced5898cfce RISC-V: Add test for FP llceil auto vectorization
2943c50a0ee5c9d0e46fd963f2282cf3748142bf RISC-V: Add test for FP iceil auto vectorization
8c5447ad67e580a9fe48abf27fd99119b0e9e0f9 RISC-V: Add test for FP llfloor auto vectorization
9a82cca91dee190d845ee1681440bc69a07c6d49 RISC-V: Refine run test cases of math autovec
8544efd6d4aea46656c37b0e002503616f09edfc RISC-V Regression: Fix FAIL of bb-slp-68.c for RVV
63eaccd114393f4692976bb78b30148e6d77a89e Add support for SLP vectorization of OpenMP SIMD clone calls
3179ad72f67f31824c444ef30ef171ad7495d274 OMP SIMD inbranch call vectorization for AVX512 style masks
78dd49f387c515a6b28ef3fcb989605a168ff752 RISC-V: Remove redundant iterators.
77faa3e198a6b6f9a55a8010bef1c394d2e3cf8e RISC-V: Fix vsingle attribute
96f12b9f9b9646deb0f7678a3f8d544e8d48cb91 Enable vectorization for V2HF/V4HF rounding operations and sqrt.
e6d063086726ccb2c5219611319285099a628878 Support 32/64-bit vectorization for conversion between _Float16 and integer/float.
a5fe9f063de64aa2755c9ae9e90ed1ff64ee0f47 RISC-V: Use VLS modes if the NITERS is known and smaller than VLS mode elements.
04c9cf5c786b94fbe3f6f21f06cae73a7575ff7a Implement new RTL optimizations pass: fold-mem-offsets
c92737722ffff85c759247f96f281438bbf1418d RISC-V/testsuite: add a default march (lacking zfa) to some fp tests
328745607c5d403a1c7b6bc2ecaa1574ee42122f RISC-V: NFC: Move scalar block move expansion code into riscv-string.cc
b25b43caf2503a160a928d61318dff837efabd97 RISC-V: Fix unexpected big LMUL choosing in dynamic LMUL model for non-adjacent load/store
8eb9cdd142182aaa3ee39750924bc0a0491236c3 expr: don't clear SUBREG_PROMOTED_VAR_P flag for a promoted subreg [target/111466]
5bb79a427adb57d4a55690f29d4f49e42d68c2a5 RISC-V: Fix failed testcase when use -cmodel=medany
323209cd73bf1d81d91637677db5883afc8ae5f6 tree-optimization/111846 - put simd-clone-info into SLP tree
9cad42786ca28461633d524bbb6480f388bfdc55 RISC-V/testsuite/pr111466.c: update test and expected output
5e4abf4233cd34212680cca700d6438445e6a16a ssa_name_has_boolean_range vs signed-boolean:31 types
cf7739d4a6ba0b88068877d14439436c22b57630 RISC-V: Enable more tests for dynamic LMUL and bug fix[PR111832]
cead92b7fc4d7a545dcf2f02397120e3c9afe1a3 Support 32/64-bit vectorization for _Float16 fma related operations.
c51040cb43404f411d4234abe7cf1a238b6e0d34 RISC-V: Optimize consecutive permutation index pattern by vrgather.vi/vx
46937e1b47274c5f5edfc22c7e70b820c6d55530 middle-end: refactor vectorizable_comparison to make the main body re-usable.
d65e38e616e7ac8157ef04b55beb6670f2c0f142 middle-end: Refactor vectorizer loop conditionals and separate out IV to new variables
0c8522870effb87f9ea0f0f5897d5b0084c32b50 middle-end: updated niters analysis to handle multiple exits.
60c231cb65807fb963624acc4f82d2935e305f93 middle-end: maintain LCSSA throughout loop peeling
b0372ef12f6f7f863606b0d2858d049b18a4cfda Re-instantiate integer mask to traditional vector mask support
4b39aeef594f311e2c1715f15608f1d7ebc2d868 middle-end: Fold vec_cond into conditional ternary or binary operation when sharing operand [PR109154]
b0fe8f2f960d746e61debd61655f231f503bccaa middle-end: ifcvt: Allow any const IFN in conditional blocks
beab5b95c581452adeb26efd59ae84a61fb3b429 tree-optimization/111131 - SLP for non-IFN gathers
217a0fcb852aeb4aa9e3fb9baec6ff947c8de3d4 middle-end: don't create LC-SSA PHI variables for PHI nodes who dominate loop
79a50a17409a39759326a494d85dccfd9008a9de omp: Replace simd_clone_subparts with TYPE_VECTOR_SUBPARTS
c9ce846763c3d220c754ac0a327e275ac00a83e1 vect: Fix vect_get_smallest_scalar_type for simd clones
8b704ed0b8f35ec1a57e70bd8e6913ba0e9d1f24 vect: don't allow fully masked loops with non-masked simd clones [PR 110485]
d8e4e7def3338344a761d841010e98d017c58b0a vect: Use inbranch simdclones in masked loops
29331e72d0ce9fe8aabdeb8c320b99943b9e067a RISC-V: Refactor and cleanup vsetvl pass
f0e28d8c13713f509fde26fbe7dd13280b67fb87 RISC-V: Fix failed hoist in LICM of vmv.v.x instruction
dd3e6f52e406a0bab787aebcb384ef6e2cf7a1e8 middle-end: Enable bit-field vectorization to work correctly when we're vectoring inside conds
88c27070c253094fb7e366583fbe09cec2371e8b ifcvt: Support bitfield lowering of multiple-exit loops
4fd09aed384df6acb141ee1f319a500c239626a4 RISC-V: Rename some variables of vector_block_info[NFC]
5dde64775baad91686a33edc020f74cfaa9078e5 Fixup vect_get_and_check_slp_defs for gathers and .MASK_LOAD
e489464acf5541e6fdb4007c49266193cc93d16e Rewrite more refs for epilogue vectorization
d70575f542f575133eb4c49eda89ab61eedf83b8 tree-optimization/111891 - fix assert in vectorizable_simd_clone_call
eb15fad3190a8b33e3e451b964ff1ecf08bbb113 middle-end: don't pass loop_vinfo to vect_set_loop_condition during prolog peeling
cd0e05b7ac3dee11287078acd00a19e52a738963 c++: remove NON_DEPENDENT_EXPR, part 2
24cf1f600b8ad34c68a51f48884e72d01f729893 ifcvt: Don't lower bitfields with non-constant offsets [PR 111882]
66c26e5cfdf65ae024fcb658629dc5a9a10f3f85 RISC-V: Support partial VLS mode when preference fixed-vlmax [PR111857]
f232391ae6dda94d8a37fc69a3ced7ab6cffcb8e RISC-V: 'Zfa' extension is now ratified
11f50716eee812c4a27b66f894e7f3ed0c870534 RISC-V: Prohibit combination of 'E' and 'H'
dbde384bd56f07bfbcae86f81fc74aa92e3786ad Avoid compile time hog on vect_peel_nonlinear_iv_init for nonlinear induction vec_step_op_mul when iteration count is too big.
f08ca5903c7a02b450b93143467f70b9fd8e0085 Expand: Enable vector mode for by pieces compares
85858c71a89dfe0d9e7d96fc9f7bdf1a18df65ba RISC-V: Bugfix for merging undefined tmp register in math
1908775f7982bd2de36df5d94396eca0865bad9a vect: Cost adjacent vector loads/stores together [PR111784]
75322a6d0cf6d611973d3730fd888ce37407c41f RISC-V: Fix AVL_TYPE attribute of tuple mode mov<mode>
7846d2288750613ce56bf02050732eb78de5c0dc RISC-V: Remove unnecessary asm check for rounding autovec
c2d41cdfeadb82d921b01c0e104d83f47e2262a2 RISC-V: Remove unnecessary asm check for binop constraint
4cd4c34acda411e4b3bd03a43d68921f38ce9822 RISC-V: Fix typo[VSETVL PASS]
996785db50a4e2df0b0e892cfe39dcf4130fb87d RISC-V: Bugfix for merging undef tmp register for trunc
09c9de06074ced7a4beb148bcf9611a5c5fb0d61 RISC-V: Remove unnecessary asm check for vec cvt
0c4bd1321a6def5eb44c530e83b01a415633b660 RISC-V: Fix ICE for the fusion case from vsetvl to scalar move[PR111927]
9ed6b22eb4188c57bb3f5cdba5a7effa95395186 middle-end: don't keep .MEM guard nodes for PHI nodes who dominate loop [PR111860]
00eb0812e6464307f9f971d2a743d720015e70cf tree-optimization/111915 - mixing grouped and non-grouped accesses
82bbbb73c67f79582d38a1aa63984987dcd0923a RISC-V: Add popcount fallback expander.
32b74c9e1d46932a4bbb1f46353bfc43c702c20a vect: Allow same precision for bit-precision conversions.
7b2984ad76cac67b962eeb39eab62b6dacf7845e RISC-V: Fix ICE of RTL CHECK on VSETVL PASS[PR111947]
b44d4ff7b43ff6a34d5c074c7ade03c4a38974fa RISC-V: Fix ICE of RVV vget/vset intrinsic[PR111935]
5e71499275525283f2255b4574599316b7ae8a78 RISC-V: Change MD attribute avl_type into avl_type_idx[NFC]
8064e7e2b5033073911c8d669638a7c61167c0e5 RISC-V: Export some functions from riscv-vsetvl to riscv-v[NFC]
4d49685d671e4e604b2b873ada65aaac89348794 RISC-V: Pass abi to g++ rvv testsuite
e37bc2cf00671e3bc4d82f2627330c0f885a6f29 RISC-V: Add AVL propagation PASS for RVV auto-vectorization
446efa52a8cadb56d1d994da5c4de394efaff462 RISC-V: Move lmul calculation into macro
7eed861e8ca3f533e56dea6348573caa09f16f5e Support vec_cmpmn/vcondmn for v2hf/v4hf.
b038e202210eb3e982c2ec802438edd523b47a02 Fortran: Fix some problems with SELECT TYPE selectors [PR104625].
3351ec2a9803cf4f0f43ef70b6925a039850d6ca RISC-V: Fix cond_sqrt tests.
9c032218107675291d05be28f8c08a32e3a17b95 RISC-V: Add rawmemchr expander.
7bcdb777e6a0d1a0159f25616c5d8e35e7cb5fb6 [PATCH] RISC-V: Fix wrong tune parameters on int_div
92fcbe8a323faee4c0fc571560f1a32317c4b26a RISC-V: Make stack_save_restore_2 more robust
b8b63e87669ef835e367f7b8ad437c6d1a6791f1 RISC-V: Fix one range-loop-construct warning of avlprop
8111b5c23bd14f80607bd35af58ec31e38a0378e Expand: Checking available optabs for scalar modes in by pieces operations
8c40b72036c967fbb1d1150515cf70aec382f0a2 Improve memcmpeq for 512-bit vector with vpcmpeq + kortest.
eb1cdb3e43f43a7311c324e0acf85ceaf79314e5 RISC-V: Fix bugs of handling scalar of SEW64 vx instruction in RV32
68880e40533c41c89eb72247c3080703ad09270c RISC-V: Make rv32i_zcmp testcase more robust
f5d33d0c790a00cb5240a966dd99df9961bf57a0 Fix wrong code due to incorrect define_split
5ee894130fd0103b3d95fbca19ea1acc4e68d828 RISC-V: Add the missed combine of [u]int64 -> _Float16 and vcond
711d703d07c8e9241361975674843cf0a3263f98 match.pd: Support combine cond_len_op + vec_cond similar to cond_op
5ee961b6f26575cb3d29572fa5653bb65330d949 RISC-V: Add assert of the number of vmerge in autovec cond testcases
184378027e92f51e02d3649e0ca523f487fd2810 genemit: Split insn-emit.cc into several partitions.
5de05bdaa7130a2fb14b90ef4e5669f418642a3c RISC-V: Add vector fmin/fmax expanders.
2d65622fda5cbfdc5f9a12822af6e54336f37cb3 riscv: thead: Add support for the XTheadMemIdx ISA extension
60d6c63df00e047ebee74b7bad9b076e55e50f28 riscv: thead: Add support for the XTheadFMemIdx ISA extension
b93fddba394cf19d8a9fd1739314b6c57425be01 RISC-V: Let non-atomic targets use optimized amo loads/stores
2b19c387696b0da9a5b02024c01cb45bfc1619ff RISC-V: Require a extension for testcases with atomic insns
f66b2fc122b8a17591afbb881d580b32e8ddb708 VECT: Support SLP MASK_LEN_GATHER_LOAD with conditional mask
c9bb20f7c90471c87236d4fe795e2099111cc746 NFC: Fix whitespace
084ea7ea5aa9054569c6bbb980ba1cfa59b3e5f1 RISC-V: Support vundefine intrinsics for tuple types
ea4a3d08f11a59319df7b750a955ac613a3f438a omp: Reorder call for TARGET_SIMD_CLONE_ADJUST
7560f2b4e387ef43ef45ee9fb06efbad6ca0fedf RISC-V: fix TARGET_PROMOTE_FUNCTION_MODE hook for libcalls
ea2e7bf80b8deead064d9b54c3caa852dfe009b3 RISC-V: Enable ztso tests on rv32
274c904471a11c493353a8b4f6e50d8fb7fef906 RISC-V: Use riscv_subword_address for atomic_test_and_set
1a0af6e5a99cd895a663f0221c25321ae802413f RISC-V: Allow dest operand and accumulator operand overlap of widen reduction instruction[PR112327]
88aca917eb705b16ec6c045ae7d499b1602a85e8 VECT: Refine the type size restriction of call vectorizer
d508a94167c186b2baacc679896e2809554c0b99 RISC-V: Support vcreate intrinsics for non-tuple types
4ea36076d66eea0f5ccb9cbb9774028a667e122c RISC-V: Fix redundant attributes
36a26298ec7dfca615d4ba411a3508d1287d6ce5 Make GCN target effective-target 'vect_gather_load_ifn'
01c18f58d37865d5f3bbe93e666183b54ec608c7 ifcvt/vect: Emit COND_OP for conditional scalar reduction.
f6284ef38701920865de3c9e18bb3f6068fde4d1 RISC-V: Fix bug of AVL propagation PASS
81a81abec5c28f2c08f986f1f17ac66e555cbd4b RISC-V: Refactor prefix [I/L/LL] rounding API autovec iterator
a29ce9bf8d87e632840bacacb663ece90a5c7710 RISC-V: Add check for types without insn reservations
1027c1c02069ef8310256d8d5521cd4703223327 Revert "RISC-V: Refactor prefix [I/L/LL] rounding API autovec iterator"
5ea3c039b784b0676323243940fd9916b1f6d540 RISC-V: Fix redundant vsetvl in fixed-vlmax vectorized codes[PR112326]
c3847ca0571e5ace2f1d6e3baed67fee13d9f93d RISC-V: Refactor prefix [I/L/LL] rounding API autovec iterator
c0cf9b78573d3d353f22e5dd1c32fecdbca703b8 tree-optimization/112366 - remove assert for failed live lane code gen
60034ecf25597bd515f8152ea85832ff95a7563b VECT: Support SLP for MASK_LEN_GATHER_LOAD with dummy mask
95cfa2cdd1b525a5b2830206692ddb9f948000d3 Cleanup vectorizable_live_operation
e902dfbea7a75affbf645d024ff8c762afd9741e Testcases for vectorizer peeling
aed00696a01ac065e9ed327434ec29d1cf50179e vect: allow using inbranch simdclones for masked loops
8d22ac6a18cf542cd541c06b2a7df8fdd293946d RISC-V: Remove HF modes of FP to INT rounding autovec
40b9af020fc2842b4e22ae06742088815400631e openmp: Add support for omp::directive and omp::sequence attributes in C2X
53010f6ff6dfbf7bcd40055cf00d9f8e653cc641 RISC-V: Fix bug of vlds attribute
9acea4376fd98696ba51e59f417c94911a4d8248 RISC-V: Support FP rint to i/l/ll diff size autovec
1a55724f7870719d51a7acc0ccada254fcfd1cda RISC-V: Implement RESOLVE_OVERLOADED_BUILTIN for RVV intrinsic
3f9ff6e81b2554ed87131b3c6d25cf72130fbbfc RISC-V: Adjust FP rint round tests for RV32
d803438e0c4016aff720fad418377c5b13567063 tree-optimization/112369 - strip_float_extensions and vectors
0c42741ad95af3a1e3ac07350da4c3a94865ed63 internal-fn: Add VCOND_MASK_LEN.
3cc9ad41db87fb85b13a56bff1f930c258542a70 tree-optimization/112404 - two issues with SLP of .MASK_LOAD
bf72d50d16f0c1fa8102ca2544d2a05772f8c273 tree-optimization/111950 - vectorizer loop copying
418bd6427e3b7e06d031fef037bbc36d529be23f RISC-V: Early expand DImode vec_duplicate in RV32 system
ffa0a73e152807a57fe4159a0d53ede25812fd1f RISC-V: Support FP round to i/l/ll diff size autovec
9125969086bfa1bf804b246ea574a2329b06d2c5 tree-optimization/112405 - SIMD clone calls with (loop) mask
942ff588ba257d530b671019716275f9ef04041d RISC-V regression test: Fix FAIL of bb-slp-39.c
ee7ba242cf43884477f09e59d9b80af4bf91d143 test: Fix FAIL of bb-slp-cond-1.c for RVV
fd56a9cc5e37bb51c725a83aa44de34b9c238e78 RISC-V: Support FP ceil to i/l/ll diff size autovec
f1e084c6c3ef1d1233e35823dacfdf9cee722430 RISC-V: Enhance AVL propagation for complicate reduction auto-vectorization
d060f8a4fff81a117923adac1e02edb64160b31b test: Fix XPASS of bb-slp-43.c for RVV
7ba2d2344c508c825db800f0218f8121887c6852 test: Fix FAIL of SAD tests for RVV
86c913ec92c1b8e871e061ff35db58c2f81780f4 test: Fix FAIL of vect-sdiv-pow2-1.c for RVV test: Fix FAIL of vect-sdiv-pow2-1.c for RVV#
71b1efd910d47362558defc31b92fc4cc80c0ec6 RISC-V: Fixed failed rvv combine testcases
ab7ccb91e592035261e1cac34d9815b6d58ca1bb RISC-V regression test: Fix FAIL bb-slp-cond-1.c for RVV
4169033178f22ff31f2aba186d441bdfeca0e674 RISC-V: Add ABI requirement for XTheadFMemIdx tests
74b35716a8eb3fef8ce2545ebdb1ff78cbeed28b RISC-V: Use stdint-gcc.h in xtheadmemidx-helpers.h
e87bc7dc08a1bd05f07781edf064db26456102d5 testsuite: check for and use -mno-strict-align where needed
204186bae107f9f54ed4ea0f94619431860c6b97 RISC-V: Add RISC-V into vect_cmdline_needed
7aacbd44ead433f5e669a1eaf160089beeb25f3f testsuite: Change expectation for bb-slp-over-widen-n.c
dd5c3ca98a86e04a316b3d90dadcfcb2b171760b testsuite/vect: Make check more accurate.
beb1e2bf1bd4b7c8fc8d3dd450667344ae8e0aca test: Fix FAIL of pr65518.c for RVV[PR112420]
fd940d248bfccb6994794152681dc4c693160919 vect/ifcvt: Add vec_cond fallback and check for vector versioning.
2b61b8063b83c1764e43b547223372faee4bcfbd test: Recover sdiv_pow2 check and remove test of RISC-V
63dc25eda71c72586b81cb1cb22e1971ba09a3d1 RISC-V: Support FP floor to i/l/ll diff size autovec
f9148120048f4508156acfcd19a334f4dcbb96f0 RISC-V: Normalize user vsetvl intrinsics[PR112092]
ecb5ddd4f09f315f76b6a02cc68b56a9a6d2be94 test: Fix bb-slp-33.c for RVV
80f466aa1cce2759112c8b0121964d1bbb158f25 RISC-V: Eliminate unused parameter warning.
c2f2351494794a86360dfc7db97848de4638f9f6 RISC-V: Fix VSETVL VL check condition bug
8cf7b936d44c37558b518cbbea4b21ed502b651e RISC-V: Removed unnecessary sign-extend for vsetvl
c49e0c57b22e68e1aa89204f300dc5d61b42d812 Fix SLP of masked loads
38168bb69f8ed2b5d3e2e66a3813435230f83293 TLC to vect_check_store_rhs and vect_slp_child_index_for_operand
39d81b667373b0033f44702a4b532a4618dde9ff Fix SLP of emulated gathers
339ced829fefe7ac3811707472768a8fdff7bfcb RISC-V: Fix dynamic tests [NFC]
e39b3e02c27bd771a07e385f9672ecf1a45ced77 libstdc++: optimize bit iterators assuming normalization [PR110807]
5b6f4e6f05d5ef64ecb918db02f5b8149cb2b0a0 RISC-V: Fix dynamic LMUL cost model ICE
f586515accd0bafffba88ab906c6c43534a2ad94 Fix SIMD clone SLP a bit more
5e9fb75840e10bff5850ee610ca94c889c9a78e5 RISC-V: Fix the illegal operands for the XTheadMemidx extension.
8863a7990e9f0cd49c8900605a2c75a0e8886e85 tree-optimization/112450 - avoid AVX512 style masking for BImode masks
83f66d90af69837f7c8fc88f8afb7074d4555394 RISC-V: Add PR112450 test to avoid regression
177ca16b615d285f419cf2ab0337bc01f7be09db RISC-V: Refine frm emit after bb end in succ edges
2d44ab221f64f01fc676be0da1a6774740d713c6 middle-end: expand copysign handling from lockstep to nested iters
6c2ac6e9ce152e120f166866c5c77924c726db99 RISC-V/testsuite: Fix several zvfh tests.
907603d4b117e82dbbde2d58a04e33f3021908e7 Internal-fn: Add FLOATN support for l/ll round and rint [PR/112432]
1fa7dde8d680f28ed66db47309ed5e8f2789054d RISC-V: Move cond_copysign from combine pattern to autovec pattern
5a410860640f0fbd0a744dd89130d7d709a0ef07 test: Fix FAIL of pr97428.c for RVV
e7f4040d9d6ec40c48ada940168885d7dde03af9 RISC-V: Support vec_init for trailing same element
040e5b0edbca861196d9e2ea2af5e805769c8d5d Revert "RISC-V: Support vec_init for trailing same element"
072a409803a270fd3e8f8aa1b4f9bb8e83789b85 RISC-V: Robustify vec_init pattern[NFC]
a5922427c29fad177251d89cc946d1c5bfc135eb vect: Don't set excess bits in unform masks
e5f1956498251a4973d52c8aad3faf34d0443169 tree-optimization/110221 - SLP and loop mask/len
b70ad8c19aa8be672cdba6afe9cbab2d1254d127 RISC-V: XTheadMemPair: Fix missing fcsr handling in ISR prologue/epilogue
d7b971cf61ae0091dbc777c9aa056e6f1293da2f vect: Look through pattern stmt in fold_left_reduction.
62e6ded7ae8582ade4e56aea10d67b9e942d8026 RISC-V: testsuite: Fix 32-bit FAILs.
6aaf72ff533550dad68362e8da308b480a9e0f30 RISC-V: Add combine optimization by slideup for vec_init vectorization
fb906061e10662280f602886c3659ac1c7522a37 Middle-end: Fix bug of induction variable vectorization for RVV
5dbaf4851bbf56b6176dca1f1e7d38a16b5b84ee Allow md iterators to include other iterators
61701b20fa268c93266ba8c18d9f209bb4317400 g++: Rely on dg-do-what-default to avoid running pr102788.cc on non-vector targets
c8bff398cf6c67753843fa39b3393d4ff3b15bcf RISC-V: Fix indentation of "length" attribute for branches and jumps
807f47497f17ed50be91f0f879308cb6fa063966 libstdc++: Do not use assume attribute for Clang [PR112467]
108e93403c461f57437da28348e5d5409ed2adc8 RISC-V: Add test for PR112469
29d3e1892ebec8abce784077d1f1a3e21d763218 mode-switching: Pass set of live registers to the needed hook
93d65f39bc5c3dc318deb6da0e3633f3a4c6c34d mode-switching: Pass the set of live registers to the after hook
7610e5cc82bd6316cfe0bfee6d9f12d8c2cfa9c3 tree-ssa-math-opts: Fix up gsi_remove order in match_uaddc_usubc [PR112430]
5dfa501d2f2e58f2448466c75d6dbebce669638f RISC-V: Support FP l/ll round and rint HF mode autovec
401dc18184af6b32a3ccbe1eaeed0c7ff9ae1d5a RISC-V: Fix RVV dynamic frm tests failure
5a0c302d2d721b9650c1e354695dbba87364c334 gimple-range-cache: Fix ICEs when dumping details [PR111967]
5c432b0efab54e81e11de7f5ec26d371a55d48e7 C99 testsuite readiness: More unverified testcase un-reductions
2794d510b979be76b0fee4521d1a454332176007 Support vec_set/vec_extract/vec_init for V4HF/V2HF.
ed3ce1c3bbab096891012968cd6b938a45d83969 RISC-V: Optimize combine sequence by merge approach
e0cacaabca30208f4ed05abddf48ff821374a0c6 RISC-V: Adapt VLS init tests
2020bce38cf2e02cbd1097faa8f1fd6586364a7e RISC-V: vsetvl: Refine REG_EQUAL equality.
bfcb6e518371bb943b77e0ef784e1de72a99aec6 RISC-V: Fix init-2.c assembly check
f28306b4fd309b579c8a4a5bf2f1b24fa40f8f7f Fix ICE in vectorizable_nonlinear_induction with bitfield.
7383cb56e1170789929201b0dadc156888928fdd Add type-generic clz/ctz/clrsb/ffs/parity/popcount builtins [PR111309]
5ea2965b499f9e491e45db19fedbccfccb75076a tree-optimization/112281 - loop distribution and zero dependence distances
948b8b6e0e50958ecf56d4d9fb7ac16f245d9cc3 Fix ICE generating uniform vector masks
a1ad62ee2fd070854d2137f35614af639c1a94f2 libstdc++: bvector: undef always_inline macro
081fddbbcf9790229f4fe885781548ba1f6a365a Revert "libstdc++: bvector: undef always_inline macro"
d85161a73b9bdd382e62ca1ba3f9f962971a9695 RISC-V: Disallow RVV mode address for any load/store[PR112535]
319bbb3693787a5493cc46793804231d1670cdee RISC-V: Refine the mask generation for vec_init case 2
e9fc877f6d4b89940dbfb9f18549b82720d0d992 RISC-V: Support trailing vec_init optimization
28219f7f99a80519d1c6ab5e5dc83b4c7f8d7251 libsanitizer: merge from upstream (c425db2eb558c263)
bcef48b59e4b4f86595929b490a8303da1239ac0 Fix ICE with SLP and -fdbg-cnt
fb4e2c1648ea4cf1b1d34205a1da519702328d92 RISC-V: elide unnecessary sign extend when expanding cmp_and_jump
d1189ceefc1da1515e039c9cfd2f5a67b5820207 RISC-V: fix vsetvli pass testsuite failure [PR/112447]
026d9454b1d9971061ad2e7d47c3ef4b0b96495d RISC-V: Fix ICE in non-canonical march parsing
fc6f7ab4e078aaf52c37739da73eb6416f5ec788 VECT: Clear LOOP_VINFO_USING_SELECT_VL_P when loop is not partial vectorized
9f35d8cd767155e9c24f5ef0944168711d38bc6b slp: Fix handling of IFN_CLZ/CTZ [PR112536]
f4ab68469ccffa83f23c321e8cb675b1eaf35f0c libstdc++: Test for feature test macros more accurately
7ffa63df8f5281bcd81bbb9842b698bc91fbb4fd libstdc++: Only declare feature test macros in standard headers
defa8681d951c6d6c43c71e3636ce4db9de04a28 RISC-V: Save/restore ra register correctly [PR112478]
5f1105612b592650566a54846dd5f9ccdfed01a9 RISC-V: Implement target attribute
7a496b7ce105185be12e023e749c90d5f7561879 middle-end: skip checking loop exits if loop malformed [PR111878]
a671095c208c7cf5eb934b6a31bd9fb6f6640a6b RISC-V: Change unaligned fast/slow/avoid macros to misaligned [PR111557]
172a72da368146e0fe34194020eb7a6636db4438 vect: Fix check_reduction_path [PR112374]
231bb992592a9e1bd7ce6583131acb1874c8e34e vect: Pass truth type to vect_get_vec_defs.
07fe07935ddb9228b4426dbfdb62d4a7e7337efe RISC-V: Refactor RVV iterators[NFC]
5f4499606ea6ab49bec30e83209db71e52d0b267 RISC-V: Fix mismatched new delete for unique_ptr
af7fa3135b6b046fe3ba869993221042a65301eb RISC-V: Fix bug of tuple move splitter
07da9b7f13c92a21d12172a9df85ad762591b998 [committed] Fix missing mode on a few unspec/unspec_volatile operands
c177f28d601408180fdb2db0d5ba89d53b370b5e [committed] RISC-V: Infrastructure for instruction fusion
bb6028b40bf19db1b42bf8c68c35eb82f40043b7 RISC-V: Optimize constant AVL for LRA pattern
e6269bb69c0734a5af716bfbded3621de6ca351d RISC-V: Implement -mmemcpy-strategy= options[PR112537]
2b59e2b4dff42118fe3a505f07b9a6aa4cf53bdf Support reduc_{plus,xor,and,ior}_scal_m for vector integer mode.
f25a5b199a0ebd4695466e665e49041339f0c6a7 vect: Add bool pattern handling for COND_OPs.
509b470dcee9795887a60ddb32ab454f22e74411 c, c++: Add new value for vector types for __builtin_classify_type
a63cbcc52e4490d365cb09d60ba32577b7134c75 RISC-V Regression: Remove scalable compile option
b3677563cd3ebc20c186650ff94171d321a52b30 RISC-V: Disallow 64-bit indexed loads and stores for rv32gcv.
a27f587816b6c3b8e46e4e46777abdc915ae00aa RISC-V: Fix intermediate mode on slide1 instruction for SEW64 on RV32
b7a1b89e60c4b492f85b47e02c12b01dd8a6e28b middle-end/112622 - convert and vector-to-float
57c028acbec4f7b594e6b024e02d6c799b51e03d tree-optimization/112618 - unused .MASK_CALL
53ba8d669550d3a1f809048428b97ca607f95cf5 inter-procedural value range propagation
7e2a429ae8f938a94c69bcab96062c9f036b721e RISC-V: Fix reduc_run-9.c test value check bug
c656d268c9dac8b6f710b9bbd399214cb11b3287 tree-optimization/111970 - fix issue with SLP of emulated gather/scatter
4d011701c074cac9bab7edfcf07c1868f0472177 ada: Fix issue with indefinite vector of overaligned unconstrained array
0a033038cdd1360f96dff171d719ea49f951ce63 RISC-V: Add missing dump check of pr112438.c
8faae311a60a552ed3d506de28c50c77fa49b229 RISC-V: Disallow COSNT_VECTOR for DI on RV32
1d82fc2e6824bf83159389729c31a942f7b91b04 optimize std::vector::push_back
ae156936cf4f15d9cc2b7d4e39f2e6b8fe22a9c3 Move VF based dependence check
aef1aaff41190d2f82cf49d8907682b6dff71c3c tree-optimization/112623 - forwprop VEC_PACK_TRUNC generation
f1b2f3a7e0638c450129ea099baa42cbf290e313 gfortran: Rely on dg-do-what-default to avoid running pr85853.f90, pr107254.f90 and vect-alias-check-1.F90 on non-vector targets
4efa929a0254b093cc31386cf7fb7c91091ca3cd RISC-V: testsuite: Do not set default arch for RVV.
686056b7965d5f6c3e7ef568e66b1435faad950d RISC-V: testsuite: Add rv64 requirement for bug-9 and bug-14.
638c2f3caf01b1b570b403235ad6a28bd8245fc6 RISC-V: testsuite: Fix popcount test.
2bbc7f4ef6329df62146fd6d0da5f30750cc72b4 vect: Allow reduc_index != 1 for COND_OPs.
932fe50a8ba980f9cd92b0dcc15485ca503df30a RISC-V/testsuite: Add cases for integer SFB cond-move operations
3bb4000c5f5f70cf5cb651314a939f1cbc65046d RISC-V: Reorder comment on SFB patterns
9f5aa4e210cbcb621ead82f4b56482deaa548c13 RISC-V: Sanitise NEED_EQ_NE_P case with `riscv_emit_int_compare'
04c9c27c6f34a1ce1cd4900ccc8dc2521852e8e6 RISC-V: Fix `mode' usage in `riscv_expand_conditional_move'
00a3bd4ccae4f7a7fd1d76db325808129208986b RISC-V: Avoid repeated GET_MODE calls in `riscv_expand_conditional_move'
5a21d507561883460411921a291bfd50a9a1d429 RISC-V: Use `nullptr' in `riscv_expand_conditional_move'
35bea66d367520e6f62fc723bca6bf9cb291e581 RISC-V: Simplify EQ vs NE selection in `riscv_expand_conditional_move'
c1e8cb3d9f9475bf99fba6f12fc9d226a7ae5f57 RISC-V: Rework branch costing model for if-conversion
dcf4395fc67a6fc83e50329d92bea82b2fdf4254 RISC-V/testsuite: Add branched cases for integer cond-move operations
28d6d6bfbde2b08ce5fde5a2f3129908881b1a29 RISC-V/testsuite: Add branchless cases for integer cond-move operations
bc40013cd6074f506f488c4717871ebcb7bb9087 RISC-V/testsuite: Add branched cases for FP cond-move operations
814485b2564a453ce9c0731344282f18e12ed0b5 RISC-V/testsuite: Add branchless cases for FP cond-move operations
db9d825b212994e89dabc710c61944552eb1fe90 RISC-V: Also invert the cond-move condition for GEU and LEU
cfa6536f29d19300d0687f4c9ae07800278ad31f RISC-V/testsuite: Add branched cases for GEU and LEU cond-move operations
3a746501f6baf88f1a1e55d94a762a737b9daf6a RISC-V/testsuite: Add branchless cases for GEU and LEU cond-move operations
cfec7fc11017f964b9b5ece5692e30c2d3f0e7a1 RISC-V: Avoid extraneous EQ or NE operation in cond-move expansion
5e884a894206735cf1909edfe8a1410ac411c392 RISC-V/testsuite: Add branched cases for equality cond-move operations
c47fb7d09ea7b152f48129fb73af1bb24d65fcc3 RISC-V/testsuite: Add branchless cases for equality cond-move operations
eeb112542f9a93974ee17d582ba649c50af95c86 RISC-V: Also accept constants for T-Head cond-move comparison operands
566a2b3baa342c7e00b7de7112d92637baba9c75 RISC-V: Also accept constants for T-Head cond-move data input operands
413ebfd660793ce16f0e6173b38ad91cd2f0cf64 RISC-V: Fold all the cond-move variants together
4f83f79d93a2c25e984d08457649c6b94f47b3e9 RISC-V/testsuite: Add branched cases for T-Head non-equality cond moves
6e3237321454a48f37c43e9b71f7c1ffd1879b96 RISC-V/testsuite: Add branchless cases for T-Head non-equality cond moves
4daeedcbaf5d596d00004ca6ec4835dc57bdd02a RISC-V: Implement `riscv_emit_unary' helper
dc95b338c04281224f5c9c058acec170e4008b5c RISC-V: Add `movMODEcc' implementation for generic targets
430b9636a55ddfadc83b76f6e46a22e0328e08e1 RISC-V/testsuite: Add branched cases for generic integer cond moves
4111bdf99bf5c54b13e7d484fe4b75661d04a4e0 RISC-V/testsuite: Add branchless cases for generic integer cond moves
40b243c4701e564d317ab35af7805ddd21a3e08f RISC-V: Add `addMODEcc' implementation for generic targets
bbfe2639e18cbaa431f82d69fb79f34562a60881 RISC-V/testsuite: Add branched cases for generic integer cond adds
5e6903ddd39e058b9a8304a77765529d64819966 RISC-V/testsuite: Add branchless cases for generic integer cond adds
7e126d8d0fbe5677070f02c32a1425849ce36298 RISC-V: Only use SUBREG if applicable in `riscv_expand_float_scc'
37ff43c27344784caed28778fb847244a49644bd RISC-V: Also allow FP conditions in `riscv_expand_conditional_move'
2f825475b2a64fce716a2628bdc631491dd3a1e1 RISC-V: Provide FP conditional-branch instructions for if-conversion
2f0c6252f4e697e187a35427b4b78ba55a830b3d RISC-V: Avoid extraneous integer comparison for FP comparisons
fe276a42a73767931cae38665851e01ae3c14927 RISC-V/testsuite: Add branched cases for generic FP cond moves
9d02897e885e547ac7af11883717b1539154db61 RISC-V/testsuite: Add branchless cases for generic FP cond moves
2278c6443aa6aaa12b3682afb8ad0774575ae1b4 RISC-V/testsuite: Add branched cases for generic FP cond adds
0f4ce86eebd031d1d8ad5bd8fc92333030ce56a1 RISC-V/testsuite: Add branchless cases for generic FP cond adds
9a1a2e9857b144872798973fc83ef6e8648cfb08 RISC-V: Handle FP NE operator via inversion in cond-operation expansion
4c69b5fbb98343ccd9a9f18069847b195b4b7cc7 RISC-V/testsuite: Add branched cases for FP NE cond-move operations
f96e5fdeb65f841f99ef763f0e53a680106a8760 RISC-V/testsuite: Add branched cases for FP NE cond-move operations
23207facbbe6da8659608b3d69544a608152a415 RISC-V/testsuite: Add branched cases for FP NE cond-add operation
6300e672c86236720952227bc4fd6a6dc4eeb55a RISC-V/testsuite: Add branchless cases for FP NE cond-add operation
ae098dfeeefe74968530289d9f5e3ae6f78097bb RISC-V: Remove duplicate `order_operator' predicate
d13e59b86c5cbeec6135ada3f6dc983289cac610 RISC-V: Fix permutation indice mode bug
de6f3e12bd188fee30bc79a5e323e16e0dbbe8ca RISC-V: Fix incorrect use of vcompress in permutation auto-vectorization
990769a343f090088f5025ad233f88824b2c6263 DSE: Allow vector type for get_stored_val when read < store
97ddebb6b4f6b132b0a8072b26d030077b418963 RISC-V: Refine some codes of riscv-v.cc[NFC]
35a688f434159a923420310860c5bc721e29a741 RISC-V: Disable AVL propagation of vrgather instruction
ef296fb37cac12a5a10e83c16ae021a624e1238c RISC-V: Add wrapper for emit vec_extract[NFC]
af7a422da457aa13df8eb1feb601dffafb76ed7c RISC-V: Disable BSWAP optimization for NUNITS < 4
d83013b88b74d1f1f774d94ca950d3b6dba26e5d RISC-V: Optimize a special case of VLA SLP
9f63a8898154473f7b773c3e2ed71e4959719b71 tree-optimization/112677 - stack corruption with .COND_* reduction
eebcad0ac22010fc59de9d856bb02017fccab282 match.pd: Avoid simplification into invalid BIT_FIELD_REFs [PR112673]
aea337cf740ec33022f3cabfa7dd4333d5ba78ee RISC-V: Fix inconsistency among all vectorization hooks
aae723d360ca26cd9fd0b039fb0a616bd0eae363 sra: SRA of non-escaped aggregates passed by reference to calls
c2dcfb6ba6e9a84a16e63ae73a822ae2a843170c Use memcpy instead of memmove in __relocate_a_1
4e88c4809a3e050fccd21a4fd6248160d2d0376d RISC-V: Fix typo
ec84a1e7a18f65858a1b129ff80cb32e64cf151b RISC-V: Disable AVL propagation of slidedown instructions
006e90e13441c3716b40616282b200a0ef689376 RISC-V: Initial RV64E and LP64E support
e02772344815e505c8c146ce48b1427dc9e9d190 RISC-V: Remove incorrect function gate gather_scatter_valid_offset_mode_p
061a82fa2b751b42d0d8ddfcd45367c848d3ee64 vect: Avoid duplicate_and_interleave for uniform vectors [PR112661]
2065438db4ac13af7e0de2f934959413647f74a7 PR111754: Rework encoding of result for VEC_PERM_EXPR with constant input vectors.
9c16ca93641ad460a576a9ed7daf2aadf596193c RISC-V: Fix VSETVL PASS regression
f1b03fa964527678f15e6ef416bfe37e60b3dc54 match.pd: Fix parity (X) ^ parity (Y) simplification [PR112719]
e6c01334ccfca8bc748c8de90ba2a636d1662490 testsuite: Fix up pr111754.c test
9f3f0b829b62f11f350867d2350e2af8639ec890 RISC-V: Disallow poly (1,1) VLA SLP interleave vectorization
f26d68d5d128c86faaceeb81b1e8f22254ad53df middle-end/112732 - stray TYPE_ALIAS_SET in type variant
25a51e98fdd504826a40775a5e5b9ffb336b5aa1 RISC-V: Bugfix for ICE in block move when zve32f
862867eab78d7731f725cf7fa4ba02ed5e503db1 Introduce hardbool attribute for C
73a63efcdae4b979b4a1dcff2da7d68b905453a0 RISC-V: Add explicit braces to eliminate  warning.
bdad036da32f72b84a96070518e7d75c21706dc2 RISC-V: Support highpart register overlap for vwcvt
b09b879e4e9cc24a5d2b0344c1930020c218a104 middle-end/110237 - wrong MEM_ATTRs for partial loads/stores
62685890d8861b72f812bfe171a20332df08bd49 RISC-V: Support highpart overlap for vext.vf
e65aaf8efe1900f7bbf76235a078000bf2ec8b45 RISC-V: Rename vconstraint into group_overlap
8614cbb253484e28c3eb20cde4d1067aad56de58 RISC-V: Support highpart overlap for floating-point widen instructions
fc7b70fa3497664a58b3c0b36fa94f9ec87d4f22 RISC-V: Fix 'E' extension version to test
a1a3939bea5b0d9cbd3465d96e7e4a5222ae6c48 Use vec_extact_lo instead of subreg in reduc_<code>_scal_m.
b4a7c1c8c59d191bff64a720cca61d1d308af531 Support sdot_prodv*qi with emulation of sdot_prodv*hi.
5a35152f87a36db480693884dfb27ff6a5d5d683 RISC-V: Remove earlyclobber for wx/wf instructions.
303195e2a6b6f0e8f42e0578b61f9f37c6250beb RISC-V: Support widening register overlap for vf4/vf8
923a67f17badcbe6e2b2e5d3570a265443258c8e RISC-V: Fix VSETVL PASS regression
9715c545d33b3a32ddc1ae817ba9356ade1fb9df c: Turn -Wincompatible-pointer-types into a permerror
8332b991e42dbffd1f2a7b7aa9a23f5aa242e602 Fix ambiguity between vect_get_vec_defs with/without vectype
4418d55bcd1b7e0ef823981b6a781d7de5c38cce RISC-V: Support highpart overlap for indexed load with SRC EEW < DEST EEW
e5bbeedcf7020dfa3870d11cf2b85bc048655698 RISC-V: Bugfix for legitimize move when get vec mode in zve32f
1461b431da51f80c90c3bea03d587d76e3e50843 RISC-V: Fix incorrect combine of extended scalar pattern
193ef02a7f4f3e5349ad9cf8d3d4df466a99b677 RISC-V: Improve style to work around PR 60994 in host compiler.
7fa24687aa3a683fd105ce5ff6b176f48dca3b6c Allow target attributes in non-gnu namespaces
806789e6daa39ab0503d91c71b3faeb5d5cdd317 RISC-V: Fix typo in test abi configuration
d3544cea63d0a642b6357a7be55986f5562beaa0 RISC-V: Robostify the W43, W86, W87 constraint enabled attribute
26b1599d83ddd5b5ac6fb845549e66acc45981f6 RISC-V: Refine riscv_subset_list::parse [NFC]
9e12010b5e724277ea44c300630802f464407d8d RISC-V: Refactor riscv_implied_info_t to make it able to handle conditional implication [NFC]
ba94969bad24d57895b02cc2d4663462f8fb5bc5 RISC-V: Add sifive-x280 to -mcpu
fc98a41c8def1cab4f9b8359be84e8623eab88e2 prefer Zicond primitive semantics to SFB
9448428b6871a4f7cbc9a1971077c3f9f3742e0d RISC-V: Update crypto vector ISA info with latest spec
462ccc3b9d5625cdc6104322a417bcd1ff1a8ff4 RISC-V: Add test case for bug PR112813
7804b4e24cd16283067225d4c2c4a4483a2b31bc RISC-V: Remove earlyclobber from widen reduction
969d4e25e7dccaf9f3a32126545b73725b5b455d RISC-V: Rename bug-01.C to bug-1.C
80d67d8f682a6050a3bf4dcfa18a83f321986f2a tree-optimization/112818 - re-instantiate vector type size check for bswap
27fde325d64447a3a0d5d550c5976e5f3fb6dc16 RISC-V: Support highest-number regno overlap for widen ternary
018ba3ac952bed4ae01344c060360f13f7cc084a RISC-V: Fix overlap group incorrect overlap on v0
82576a6e77e0a284975dda87efe4b2d5bc5b9b1c RISC-V: Document optimization parameter riscv-strcmp-inline-limit
4ae5a7336ac8e1ba57ee1e885b5b76ed86cdbfd5 RISC-V: Rename and unify stringop strategy handling.
cdb34bf5dd10df967b7f72a502a48cc34e284ef0 RISC-V: Fix rawmemchr implementation.
1067e9d347a9d9ff8e1cd3df9e60bca3da85a734 RISC-V: Fix two testscases related to -std changes.
d9b51588e960239337c964e5ddd87ac5c4c2f086 RISC-V: testsuite: Remove redundant vector_hw and zvfh_hw.
1f1c432226cf3db399b2a2a627e3c5720b02b1d6 c++: implement P2564, consteval needs to propagate up [PR107687]
b1cb2d993cc1148281fb4922a7ae26a4ae9ecf6f Take register pressure into account for vec_construct/scalar_to_vec when the components are not loaded from memory.
8b93a0f3eb46cbc4ba8eece8eba58aaade4399b6 RISC-V: Add blocker for gather/scatter auto-vectorization
33c1f7233af84f003a574650d0f8878acb84cdf3 RISC-V: FAIL:g++.dg/torture/vshuf-v[2|4]di.C -Os (execution test) on RV32
f542df026cd24e604eb40426a83ce072ef34e15a RISC-V: Check if zcd conflicts with zcmt and zcmp
e9d2ae6b9816e61a6148040149c63faa83f54702 Allow prologues and epilogues to be inserted later
2e7abd09621a4401d44f4513adf126bce4b4828b RISC-V: Block VLSmodes according to TARGET_MAX_LMUL and BITS_PER_RISCV_VECTOR
8a5ef148bbab3b5397e293cbc28f6d6ebc5bb596 RISC-V: Remove useless modes
056cce412862f8d9b56a40dfbcbc3f9fa7f92883 RISC-V: Add vec_init expander for masks [PR112854].
c1e54c82a9e1855499ef7bb8827540e6a097532b c++: partial ordering of object parameter [PR53499]
c9d5b46a25547035e381b0246de5cb553ca8b02d RISC-V: Fix VSETVL PASS bug
1bd15d87031e8bf8fe9585fbc166b315303f676c RISC-V: Remove xfail from ssa-fre-3.c testcase
db642d60ee81cd99d55f4e228d01de704b5b7cfa RISC-V: Fix PR112888 ICE
8c09c73adf4c537876e8ef418378d6581b768a64 RISC-V: xtheadfmemidx: Disable if xtheadmemidx is not available
570d74119d2daaa9ea909b6326a3756f548097d0 RISC-V: xtheadmemidx: Document inline asm issue with memory constraint
abded9bf3e1ebc1789d47ac2c445f5b613981a0e RISC-V: Fix AVL propagation ICE for vleff/vlsegff
249404649d26f544d1ad6808625807532c2b6a42 testsuite: require avx_runtime for some tests
71a5ac6703d1b7a0409936fcdec4e592d7cc06b0 RISC-V: Support interleave vector with different step sequence
9f7ad5eff3bf1e42aac0825b37d2c9ab43eaafd2 [PATCH 1/5][V3][ifcvt] optimize x=c ? (y op z) : y by RISC-V Zicond like insns
2efe3a7de0107618397264017fb045f237764cc7 tree-optimization/112774: extend the SCEV CHREC tree with a nonwrapping flag
b241d91f1e344a7324f66b216f11b40bbb65cf2e RISC-V: Remove redundant check of better_main_loop_than_p in COST model
39a1ab9c33b6067b1cc843408886e7ba709fbb62 Add IntegerRange for -param=min-nondebug-insn-uid= and fix vector growing in LRA and vec [PR112411]
8f60f5499e10d19218cada082e0909516ebf0e74 haifa-sched: Avoid overflows in extend_h_i_d [PR112411]
51b8259212791dbea846706bc5e9db5310f1fc10 RISC-V: Fix ICE for incorrect mode attr in V_F2DI_CONVERT_BRIDGE
2664964b2f695e947faea4c29dbddd3615cc4b0b RISC-V: Add vectorized strlen.
d468718c9a097aeb8794fb1a2df6db2c1064d7f7 RISC-V: Add vectorized strcmp and strncmp.
9363d91956931bb28735bed97035b9ec965c850f RISC-V: Fix VLS mode movmiaslign bug
5a4faf915575c690a25f0522dccc5b8d82909f10 [PATCH 2/5] [ifcvt] optimize x=c ? (y shift_op z):y by RISC-V Zicond like insns
ec201e2a6021d144797f5558e4d08a2385de7a63 [PATCH 3/5] [ifcvt] optimize x=c ? (y AND z) : y by RISC-V Zicond like insns
a536d235d2204f3ff9be126fec3acbc032db3086 RISC-V: Remove poly selftest when --preference=fixed-vlmax
330bb06485b18bae3effe83b45b97dbdcd543367 RISC-V: Fix ICE in extract_single_source
7e854b58084c131fceca9e8fa9dcc7469972e69d RISC-V: Support highest overlap for wv instructions
037f57025921e026d520c1eda26a54853e4cb245 Simplify vector ((VCE (a cmp b ? -1 : 0)) < 0) ? c : d to just (VCE ((a cmp b) ? (VCE c) : (VCE d))).
d9dd06ad51b7479f09acb88adf404664a1e18b2a RISC-V: Recognize stepped series in expand_vec_perm_const.
63194a0e8ede9e15dfa01c6ec7aeea8f7702d3b7 RISC-V: Rename test[NFC]
4db744149b6ed46314107187bb25e142c729f442 RISC-V: Robostify shuffle index used by vrgather and fix regression
0a569f87cd8436abaa6ac8c0da6e441152904e67 RTL-SSA: Fix ICE on record_use of RTL_SSA for RISC-V VSETVL PASS
b1474da1bb9cc829cbf597f9a51393795108419f RISC-V: testsuite: Fix strcmp-run.c test.
fda2e1ab60377ca1a6aff093355b29115cff5880 RISC-V: Move RVV POLY VALUE estimation from riscv.cc to riscv-v.cc[NFC]
ce7e66787b5b4ad385b21756da5a89171d233ddc RISC-V: Add avail interface into function_group_info
8b832bfb4f9e50c2793463d9756499124de2f3e6 RISC-V: Disable RVV VCOMPRESS avl propagation
878cb5acf0c499702ffd315e273f55e8bd0970b8 tree-optimization/112961 - include latch in if-conversion CSE
6d0b0806eb638447c3184c59d996c2f178553d45 tree-optimization/112736 - avoid overread with non-grouped SLP load
26250632df1526bad2af9f2620204427008ac433 RISC-V: Refactor Dynamic LMUL codes
8501edba91ea63bdfc045f1cb66fb1c242e44e80 RISC-V: Apply vla vs. vls mode heuristic vector COST model
b9baead90d74e9211fc94d655ecd5d3af3858158 tree-optimization/112990 - unsupported VEC_PERM from match pattern
f6d787c231905063dc3b55ce7028e348b74719be Middle-end: Adjust decrement IV style partial vectorization COST model
90be333ad515b6126ce6dfe37aff6eb6b442b4ed RISC-V: Fix dynamic lmul tests depended on abi
ef21ae5c45f3b79a36fadc1cb5723c095e2965ad RISC-V: Postpone full available optimization [VSETVL PASS]
6a737ec24a98b3aa13605988c54c827f1bdae308 RISC-V:Add crypto vector implied ISA info.
d702387b1b765f85e19961a0b2a29df14df89bfd RISC-V: Refine test cases for both PR112929 and PR112988
5fdb150cd4bf8f2da335e3f5c3a17aafcbc66dbe OpenMP/OpenACC: Rework clause expansion and nested struct handling
5e0f67b84a615ba186ab234a9bc43df0df5a50b6 RISC-V: Add RVV builtin vectorization cost model
d16479170066b7606dea8dc25a7527a081a90a0b testsuite: Fix up target-enter-data-1.c on 32-bit targets
e9f0af150358d93b4c4c5f65d662748ae87bd3d0 RISC-V: Add failed SLP testcase
be0ff0866a6f072ccfbbb3a3c2079adf1db51aa1 Force broadcast constant to mem for vec_dup{v4di,v8si,v4df,v8df} when TARGET_AVX2 is not available.
203efd5097b86a1eb0e41ca1a6be357721d5f14d Revert "RISC-V: Add avail interface into function_group_info"
d782ec8362eadc3169286eb1e39c631effd02323 tree-optimization/112793 - SLP of constant/external code-generated twice
4e9b2c94e45f5991a472fb639fb2baa6aa42b76b tree-optimization/113018 - ICE with BB reduction vectorization
7d00a59229ee17af009a3c6c6208b0611740ed49 libstdc++: Make __gnu_debug::vector usable in constant expressions [PR109536]
0a5170b5f596bb5fcedf25d93952b979d02d1f56 expmed: Use GET_MODE_PRECISION and expander's output mode.
e5e1999aa664333f766f3e6cc6996f769d50ae7a expmed: Compare unit_precision for better mode.
7b15959f8e35b821ebfe832a36e5e712b708dae1 Update 'gcc.dg/vect/vect-simd-clone-*.c' GCN 'dg-warning's
c7ef2189855a8cf12427a778cd5a31d42ddf6260 Middle-end: Do not model address cost for SELECT_VL style vectorization
4bfafea6922dffea145d1aa1d5f5fa4814e66173 RISC-V: Tweak generic vector COST model
afead7fb9b3113dbc3dc84e514847f8b688742bf RISC-V: Adjust test
7304e85ffff8cd832bb520f2b4f341fca286d510 RISC-V: Remove xfail for some of the SLP tests
5ddf651ad91d34b754dbe280e5ab2b19cf90f8ee RISC-V: Fix vmerge optimization bug in vec_perm vectorization
1ddf65c5fc6ba7cf5826e1c02c569c923a541c09 [PATCH] RISC-V: Add Zvfbfmin extension to the -march= option
082835836cf763e74ed2fdf9645ac4f1f94d6d4f Re: [PATCH] RISC-V: fix scalar crypto patterns
723d62feae96fb528d5faf715fe2ff47233670a0 [PATCH] RISC-V: Add -fno-vect-cost-model to pr112773 testcase
14876d6aa73b9e9385313c857ab6f399e4823bf8 [PATCH v4 1/3] RISC-V: Add support for XCVelw extension in CV32E40P
e0fe3ab96848633e1e09f20ddbf32bdb6552db11 [PATCH v4 2/3] RISC-V: Update XCValu constraints to match other vendors
2c3e4d18b2f75cce287c8566c4231c677a243161 RISC-V: Fix POLY INT handle bug
73aeec31c5ef15b5a3877370353164a2a6aaa8a6 RISC-V: Add viota missed avl_type attribute
7b4d6734b87ed1002e24d8bf6d4fd1dfb4fda383 testsuite: Fix cpymem-1.c dump checks under different riscv-sim for RVV.
2c0c3368de5f8e3951f14a21d2d9183f6998ead5 RISC-V: Bugfix for the RVV const vector
10493cd4c1e852a4e89742b5c81e6d8bc2eef9a5 RISC-V: Fix natural regsize for fixed-vlmax of -march=rv64gc_zve32f
8c5d1d13882a0e58c308b95b1b51484721eafded RISC-V: Enable vect test for RV32
b3b2799b872bc4c1944629af9dfc8472c8ca5fe6 RISC-V: Support one more overlap for wv instructions
ac9c81dd76cfc34ed53402049021689a61c6d6e7 RISC-V: Rename the rvv test case.
88a398a487ee37f1fc7850740f2d94d895657646 middle-end/111975 - dump -> GIMPLE FE roundtrip improvements
15cb5204e4c5f79d1b7179ae2590bb65e24b745f RISC-V: Add required_extensions in function_group
605d21f8ef1f0f0ff784adc05cbeea229a6b5ddf testsuite: Fix cpymem-2.c dump checks under different riscv-sim for RVV.
caa2d2a588c028393fa153ddddb893040f8f9833 RISC-V: Remove 256/512/1024 VLS vectors
b61e849bd39e55509bc383514a9f4333ea88b3d2 testsuite: Fix dump checks under different riscv-sim for RVV.
746e7b214d61879c3531c0f0fe34656764a26906 RISC-V: Fix FAIL of dynamic-lmul2-7.c
a0cc5eb21de80136ddb104cfb3c6994b5de87bbe RISC-V: Force scalable vector on all vsetvl tests
1555a5e24cc3b6231491d9760e916a4193255b09 RISC-V: Refine some codes of expand_const_vector [NFC]
aa2a48984c3d8c7a6a6da10d924e030b141b44cd tree-optimization/113073 - amend PR112736 fix
71bc7c6fa116dec13ca0c636c2755d26f3341b33 RISC-V: Fix FAIL of bb-slp-cond-1.c for RVV
672db38c6f0723ca57fe8ff4c43422341e7fb857 -finline-stringops: allow expansion into edges [PR113002]
bfdadcb2991c8601671944e5a7834194d73d2c14 RISC-V: Bugfix for the const vector in single steps
3dd6f73a231362a67ff6dee05510bb4fe6253820 RISC-V: Fix calculation of max live vregs
a8f0278ade1353e3e6389aa7a00525b6e9b723ab Improve DCE of dead parts of a permute chain
a3ff76278efe006dc0b50249c8e5baf565bff56b veclower: improve selection of vector mode when lowering [PR 112787]
eef65d60a8bb2e9328fd9d2b6cd869618be4f08e [PATCH] RISC-V: Fix RISCV_FUSE_ZEXTWS fusion condition
d07d0e992232d668ba6c27e15433f7616a69e5b5 RISC-V: Support -mcmodel=large.
08ab2293dcce442e139b163ba22f65a32e7ebd6c cse: Fix handling of fake vec_select sets [PR111702]
d82bb518fa372cc30cc3352e0a124d0bd6deb36f RISC-V: Fix bug of VSETVL fusion
008b80e42eb7cb55c6a2ef55728241b8733dfd17 RISC-V: Optimize SELECT_VL codegen when length is known as smaller than VF
41a5f67db3cd625d2f3cfba6a87d3530a3291f33 RISC-V: Add dynamic LMUL test for x264
135bb9e37167ef70501a888bd3db195b11b37ae3 omp: Fix simdclone arguments with veclen lower than simdlen [PR113040]
619a9539ee378e635ba3a26300dff746a9ff4ba2 c++: fix -Wparentheses for bool-like class types
cefae511ed7fa34ef6d24b67a7bc305459bf10e8 combine: Don't optimize paradoxical SUBREG AND CONST_INT on WORD_REGISTER_OPERATIONS targets [PR112758]
290230034092898981488d0716ddae43bd36c09f RISC-V: Make PHI initial value occupy live V_REG in dynamic LMUL cost model analysis
bd901d76734c1fb73cd2fa73d7f0427261a2541a RISC-V: XFail the signbit-5 run test for RVV
0994ddd86f9c3d829b06009d9e706ff72b07001a testsuite: Add more pragma novector to new tests
f1dcc0fe371e3cb10d2cbe3f6c88db6f72edddda middle-end: prevent LIM from hoising vector compares from gconds if target does not support it.
01f4251b8775c832a92d55e2df57c9ac72eaceef middle-end: Support vectorization of loops with multiple exits.
c5232ec14937a34e599e9e386a5975fab9a5e283 testsuite: Add tests for early break vectorization
a657c7e3518fcfc796f223d47385cad5e97dc9a5 testsuite: un-xfail TSVC loops that check for exit control flow vectorization
0beeddd6b1b1cb41104c4df925323e8fc0437ba8 RISC-V: Add one more ASM check in PR113112-1.c
fd032cce216e003d58b2394f7e61b03dee27e81a middle-end: explicitly initialize vec_stmts [PR113132]
ed60b2868abdb7932bda1dd08477c12fe62a49cb RISC-V: Move RVV V_REGS liveness computation into analyze_loop_vinfo
f83cfb8148bcf0876df76761a9a4545bc939667d RISC-V: Some minior tweak on dynamic LMUL cost model
87dfd70723385486645de3b8c93fa1e19143fa46 RISC-V: Fix typo
c4ac073d4fc7474e29d085bbd10971138ee7478e RISC-V: Make known NITERS loop be aware of dynamic lmul cost model liveness information
76f5542c48315cca5dfcbff2f22c94f8d145bde6 RISC-V: Make dynamic LMUL cost model more accurate for conversion codes
d1eacedc6d9ba9f5522f2c8d49ccfdf7939ad72d RISC-V: Disallow transformation into VLMAX AVL for cond_len_xxx when length is in range [0, 31]
7dc868cb31c41d6d237d01be67469c2e9576c99d RISC-V: Robostify testcase pr113112-1.c
200531d5b9fb99eca2b0d6b8d1e42d176413225f Fix gen-vect-26.c testcase after loops with multiple exits [PR113167]
9a29b00365a07745c4ba2ed2af374e7c732aaeb3 RISC-V: Count pointer type SSA into RVV regs liveness for dynamic LMUL cost model
d3d6a96d45108d30395b6506fe4b3a91cd40f573 RISC-V: Add crypto machine descriptions
d2e40f2867da1d2c6a42122c057ee980e74a5440 RISC-V: Declare STMT_VINFO_TYPE (...) as local variable
6be6305fb6f1a0bf0c088302cc57cbd8aa411873 RISC-V: Modify copyright year of vector-crypto.md
76f069fef7dc12166fa65a664f03f82e7d2d9a78 RISC-V: Add simplification of dummy len and dummy mask COND_LEN_xxx pattern
ae11ee8f85c359714a15d234a577486acb8e8987 libsanitizer: Enable LSan and TSan for riscv64
152cd65bf468c378e1e06ac72e443453137034b5 RISC-V: Use vector_length_operand instead of csr_operand in vsetvl patterns
a43bd8255451227fc1cd3601b1f0265b21fafada RISC-V: Make liveness be aware of rgroup number of LENS[dynamic LMUL]
97c1f176278ddf42931d8ff8ca86c044227e77e3 RISC-V: Fix indent
4a0a8dc1b88408222b88e10278017189f6144602 RISC-V: Fix bug of earliest fusion for infinite loop[VSETVL PASS]
83869ff4bcd694634fca969993af4c0dbc51e2bb RISC-V: Refine LMUL computation for MASK_LEN_LOAD/MASK_LEN_STORE IFN
73a4f67b9c8c497d87fda44160953293bc4e11e5 RISC-V: Fix misaligned stack offset for interrupt function
b1342247a44c410ad6a44dfd82813fafe2ea7c1d RISC-V: Make liveness estimation be aware of .vi variant
4831ad982c08a7d926263666c62cd6e52674f885 Revert "RISC-V: Make liveness estimation be aware of .vi variant"
057dc349021660c40699fb5c98fd9cac8e168653 RISC-V: Nan-box the result of movhf on soft-fp16
5bb18475a10d05d2aebf37db73ebf36c6912104d Add generated .opt.urls files
3ab4c3816bd5c340b98147ffce13a7f3c161b6cd RISC-V: Make liveness estimation be aware of .vi variant
960c2620db254a1edc2cd61e608df73073b3de0d RISC-V: Add crypto vector builtin function.
b3ec98d458f2b285bb7b3fa4fcd93fd830fee069 RISC-V: Add crypto vector api-testing cases.
fd946ecba7d2ec7090408b8b3ddd9d389db606e5 Revert "RISC-V: Add crypto vector builtin function."
fc75b733dc4db9e6b73991917bc704f16be47166 Revert "RISC-V: Add crypto vector api-testing cases."
05415dba984639cc2ca897786738d76dadd0cfb6 RISC-V: Clean up unused variable [NFC]
085585e97610c1ca4e38d65fdad80f766001a915 RISC-V: Clean up testsuite for multi-lib testing [NFC]
397bdd1ac59a556a9619c2b2bf203f88ff5e97c2 RISC-V: Fix wrong fix in last clean up
c659dd8bfb55e02a1b97407c1c28f7a0e8f7f09b Implement ASM_DECLARE_FUNCTION_NAME using ASM_OUTPUT_FUNCTION_LABEL
9873f13d833b536b46cd6ff46d72e62407b048a8 RISC-V: Allow simplification non-vlmax with len = NUNITS reg to reg move
19c76b5a91837cdb3e7aa4cb484dd4cfdebca8ae RISC-V: Teach liveness computation loop invariant shift amount
6cf47447f6fba84a17864fc7a19a532a62b6e736 RISC-V: Update MAX_SEW for available vsevl info[VSETVL PASS]
e74c37aab51d2350a3417f442c3a7d119b755378 RISC-V: Use MAX instead of std::max [VSETVL PASS]
c97436f84cef191618f61912520bc0f0d62d8146 RISC-V: Fix avl-type operand index error for ZVBC
4d31d6606201b339825c370c2e1969b2dcd17f39 RISC-V: Fix testsuite
b3cc5a1efead520bc977b4ba51f1328d01b3e516 tree-optimization/113026 - avoid vector epilog in more cases
e50a1ed3d36dee5baee5d89126a80419b119a7c5 RISC-V: Add crypto vector builtin function.
411b210797d139811bffa15471523162db6f5f89 RISC-V: Add crypto vector api-testing cases.
2e4607666c3238a62d08468720549e70e71417c3 RISC-V: Fix comments of segment load/store intrinsic [NFC]
b1d4e5b51375efd285378173375d634ad6ba8462 vect: Ensure both NITERSM1 and NITERS are INTEGER_CSTs or neither of them [PR113210]
db584633e600840619bfb821d8293094ef26a668 RISC-V: Fix loop invariant check
cbf569486b2decbde0308f9f4d0f0837e4cfefd9 middle-end: rejects loops with nonlinear inductions and early breaks [PR113163]
109f2316725bd74d85279fa749e5ea59686ad320 frontend: don't ice with pragma NOVECTOR if loop has no condition [PR113267]
c22cf7a7a77bf9245bd0790b21695440208c3aa5 tree-optimization/113026 - fix vector epilogue maximum iter bound
80bb94e88faaadd4d6f008fececb46214dc89e9f middle-end: check if target can do extract first for early breaks [PR113199]
27194610d269d28f1800592e9c1fd39c2b51b809 middle-end: removed unused variable in vectorizable_live_operation_1
cf4dcf83a7df7805186aca7db0595bbf59cd40eb RISC-V: Robostify dynamic lmul test
0141ee79d72a3bccf040e02cd047fe585b96fa8d RISC-V: Refine unsigned avg_floor/avg_ceil
9e7c77c7933b1bb0dd07214333e52a9a896fa349 middle-end: Fix dominators updates when peeling with multiple exits [PR113144]
5daf9104ed5d4ef21b01e9564e5325adb157e5d8 pretty-print: support urlification in phase 3
cac9d2d2346bf06b29b34e12cf0a005c37eacdc9 tree-optimization/113078 - conditional subtraction reduction vectorization
91fd5c94965b4077490c6bfcc9aa4b0e4146b38a middle-end: correctly identify the edge taken when condition is true. [PR113287]
6c3365e715faa20d8adefe244531f778578a9326 RISC-V: Also handle sign extension in branch costing
3353e7d28447f4591a752859ddea96b308561c0a RISC-V/testsuite: Fix comment termination in pr105314.c
7cbe41d35e6a60776484e04e42e408de9fc82954 middle-end: Don't apply copysign optimization if target does not implement optab [PR112468]
52e809d5cf345ce01fc81be716a57f5b6d5b4545 RISC-V: T-HEAD: Add support for the XTheadInt ISA extension
2aa83f0ad8a613fc46bf13cdd3403445d5c85b69 RISC-V: Minor tweak dynamic cost model
3b8ef3f25ed68790f77eea8ea445b7c9144c8ca6 RISC-V: Switch RVV cost model.
6686e16fda419067b91614835dd743ebb82717ea Optimize A < B ? A : B to MIN_EXPR.
1a51886a79c97e53ba945c1926ab215ed6a9f5ed RISC-V: VLA preempts VLS on unknown NITERS loop
e1f2d58a1e2536f13d3f2ea2d7373ae62cec9125 middle-end/112740 - vector boolean CTOR expansion issue
b89ef3d40afc4604c279e8802bf279f6e4060f67 LOOP-UNROLL: Leverage HAS_SIGNED_ZERO for var expansion
897b95a12b7fe549ec2cb8ef3a3f0e4fbabf9737 tree-optimization/113126 - vector extension compare optimization
ec345df53556ec581590347f71c3d9ff3cdbca76 tree-optimization/112505 - bit-precision induction vectorization
da1e651e9c00b9c6100b2ea915631eba0e0d07ba testsuite: remove -save-temps from many tests [PR113319]
a2be4e155992151b60fca6969a97d6efd91e82b5 expr: Limit the store flag optimization for single bit to non-vectors [PR113322]
b79cd204c780ee27e240616ac07e8201b85aeb92 RISC-V: THEAD: Fix ICE caused by split optimizations for XTheadFMemIdx.
72609f5591b751b34fca3730acaf274c0ba32dab RISC-V: Modify ABI-name length of vfloat16m8_t
d79629b316f48c45c0a38d10b8fef1a84beceb46 RISC-V: Update the comments of riscv_v_ext_mode_p [NFC]
7ec177ecdb237f4ca9547e36420ec7ed3fe43fe2 RISC-V: Enhance a testcase
160799b366c33246ca16b84020ec49c3feabb0a3 middle-end/113344 - is_truth_type_for vs GENERIC tcc_comparison
a2d66158541c0923620b044098bf66a73b51c463 lower-bitint: Fix a typo in a condition [PR113323]
0acb63670bf1058fce00a75bd318c40be3bfa222 RISC-V: Adjust scalar_to_vec cost
6cb155a6cf314232248a12bdd395ed4151ae5a28 middle-end: make memory analysis for early break more deterministic [PR113135]
411de96dbf2bdafc7a90ebbfc63e68afd6388d29 middle-end: maintain LCSSA form when peeled vector iterations have virtual operands
99c0a540d6689ede068f9ba98af6f38c3cd71362 middle-end: thread through existing LCSSA variable for alternative exits too [PR113237]
e79c5855ab39d96baa7c6bec63eb97715abcf68d middle-end: fill in reduction PHI for all alt exits [PR113178]
a8dbae45926db1ebc94c0cc32647c3a45ca62eef middle-end: remove more usages of single_exit
d14ef0987de2f6f2dac64f4f0f068b929078a01d testsuite: Make bitint early vect test more accurate
7012a252528233ca3ced5b9230013c50b604da9b testsuite: Fix up vect-early-break_100-pr113287.c testcase [PR113287]
9935667a69896865b848dfa690f94c9c693a48a3 Fortran: annotations for DO CONCURRENT loops [PR113305]
0627d1f5340c693699ad36fa2b741ff11d6f026a RISC-V: Fix attributes bug configuration of ternary instructions
baa931cc2e007be762ae48f9b1f7898d1d817d50 RISC-V: Add optimized dump check of VLS reduc tests
e037a0fa040ee1a3500c8523f3ffa713069ac283 RISC-V: Remove m_num_vector_iterations[NFC]
afac1bd33657a5054f5e6ea6746c25bbb70b82f2 tree-optimization/113385 - wrong loop father with early exit vectorization
405096f908e1ceb0d6a1b5420ded20ad85ddae9e RISC-V: Adjust loop len by costing 1 when NITER < VF
7be87b7d2e330afd14a7cc028f64d88f80e12f40 RISC-V: Fix regression (GCC-14 compare with GCC-13.2) of SHA256 from coremark-pro
4d7c4288a90ab949f70c47a4b3e97c52f4f39f11 RISC-V: Remove the Scalar Bitmanip and Crypto Built-In function testsuites
c7ad6bf5b9e478d87294230318db675d7c8f3ce4 RISC-V: Add C intrinsic for Scalar Crypto Extension
04f22670d32f6a0b765969997269107b6b7e8c21 RISC-V: Add C intrinsic for Scalar Bitmanip Extension
b2e06d71613ba0a01d6f91b2600725aac9fb761b RISC-V: delete all the vector psabi checking.
04c5b9e4ab6f86305a3cc45682d0b4f5b528b190 RISC-V: delete vector abi checking in all relevant tests.
39fa71a0882928a25bd170580e3e9e89a69dce36 testsuite: Fix vect_long_mult on Power [PR109705]
5134d3074ad7a462b4c8e2c0bc904b5ba40b7373 RISC-V: Report Sorry when users enable RVV in big-endian mode [PR113404]
57f611604e8bab67af6c0bcfe6ea88c001408412 Do not count unused scalar use when marking STMT_VINFO_LIVE_P [PR113091]
98b83ea8a41763d1a760a79a27132fbc610b93d4 gccrs: Fix assignment operator overloads for AST and HIR patterns
9761160120e96c4507e29f626f3333e0a97ab9f8 gccrs: ast: Add TokenStream collect function
0c985f7d309d321482833d409df8864820c778eb gccrs: expand: Add inner attribute expansion stubs
e755e6e407be2ed3d6d3d93a215a9237c681026d gccrs: Fix memory corruption at peek_context
71249c646b77a73002ea9f1061c492c76ac5bda5 gccrs: ast: Rename TokenStream in the AST module
ec5f8090a17dede3165650b0db362afbfa5819e0 gccrs: ast: Move token converter out of ast module
2099a757e22b8cfeebc8b40e06c071dde201b3cb gccrs: converter: Return a vector to const pointers
95103ba9cda60274c4402fcdcb625b3af72cbb1a gccrs: converter: Const conversion to tokenstream
cf58150bea85a633247c77f1989c6389c8eb7974 gccrs: libproc_macro: Fix Tokenstream growth
663c4102a8ad43ec409e04d5ab834d38f161bdb5 gccrs: expand: Add prc macro expander and registration
7d59ce850c10c2162e54b4f115ec0cb34536d8e7 gccrs: expand: Add in order trait expansion
93866b6a930170302778d23e034619c8f669547b gccrs: rust-unreachable: Add specific behavior for rust_unreachable
d31b401c8cd72a1c81c9be489a1f4f54bd6850dc gccrs: import: Change package opening prototypes
cfb98788f0afd404dcc6d675c8b8971a8a6b1603 gccrs: import: Store procedural macros in extern crate
37451ad09f7edc081700909208f90b9eea1eb592 gccrs: import: Load procedural macros into external crate
ed866110ef0f90f24c60a91a7141565b706ad185 gccrs: resolve: Add mappings for proc macros and resolving
8b1e1faa7f2eec13df511fa76d181337efb14f4d gccrs: better handling of incorrect file loading in include_* builtin macros
750ac3263c8db064b1d6b3ae33ec6a2036e38bb8 gccrs: Improve byte vector to string conversion
ad1c244dd607fd7607ef95eecc2718e98578a70c gccrs: Fix bad uninit intrinsic
c00624a6c8b9a08b10674abff7826ac990e9248a gccrs: Fix invalid call to vector::front in TypeBoundPredicate constructors
90ee631428f0af1d91ee297ea114755d7f0563c7 gccrs: Change trait getter to return references
1caf0e8ffed0d4e454470550950cc99eb4bce13a gccrs: Change early resolver visit_attributes arguments
86a3d1582f98dec4f663b1170e2f63bd7c3d2b85 gccrs: Move proc macro definition to mappings
513b0154ab1f00e92d2072a5858f585510599b9b gccrs: Rework function special parameters
3359942417b02de88ae84d50aac232ac01ff9e15 tree-optimization/113371 - avoid prologue peeling for peeled early exits
de4c9a27ba51e409e9d9e2a2827da53b1c979b09 RISC-V: Fix asm checks regression due to recent middle-end change
7ee7e07d0fb996d9632178f5b9790842096351ae RISC-V: RVV: add toggle to control vsetvl pass behavior
3340878009acfc69f5315386437841a277174c83 RISC-V: fix some vsetvl debug info in pass's Phase 2 code [NFC]
e935c0662fe6301d524c54bb5bd75e923abb61e9 RISC-V: Add has compatible check for conflict vsetvl fusion
a689c1f4865ea6d4c7d2a928a17894671642fa34 test regression fix: Add vect128 for bb-slp-43.c
cc34fc9ffde60815b6571a60129199ddc5a07ca2 test regression fix: Add !vect128 for variable length targets of bb-slp-subgroups-3.c
0f38666680d6ad0e40c4a8b6d94b2c93931cdf42 tree-optimization/113374 - early break vect and virtual operands
b981d5c60b8ef78e2adecd6b5d7e36f9e5e61c54 tree-optimization/113431 - wrong dependence with invariant load
1203fc2e6a40c65896763554f62cacfb4bd6a836 opts: Fix up -ffold-mem-offsets option keywords
484f48f03cf9a382b3bcf4dadac09c4ee59c2ddf testsuite: Fix up scev-16.c test [PR113446]
3c7add6af4641e0e8a812596d59606aeb8a84b3f riscv: Remove Bool keywords from riscv.opt
38d8facddfd891e15b287e5f19c5139272900346 RISC-V: Support vi variant for vec_cmp
1c1853a70f9422169190e65e568dcccbce02d95c Fix memory leak in vect_analyze_loop_form
5b421c2a5b429fcebd7ee6444a5677633df0f28a Fix memory leak in vectorizable_store
895a2138265fd9cace3588404523122f73626d2a tree-optimization/113475 - fix memory leak in phi_analyzer
d05b5265110709996fa19af1267c6669b7992879 RISC-V: Introduce XTheadVector as a subset of V1.0.0
9a55cc625c5f4b0318b16173b20dcab80cff03a1 RISC-V: Adds the prefix "th." for the instructions of XTheadVector.
2d7205eb2c3b175a86aab92bb652314f308f9c05 RISC-V: Handle differences between XTheadvector and Vector
0a41c3e49af36cde6792413051c7054eeccb63fb RISC-V: Add support for xtheadvector-specific intrinsics.
cdf4729f0889501c622cc1ad2df9377f2819cc07 RISC-V: Fix register overlap issue for some xtheadvector instructions
9e1b554cc75e25fe96baf9b8d7963b932cb2c36d RISC-V: Rewrite some instructions using ASM targethook
d190a5553a1a8e8c279f96a998a5343fdd3feb8b Another memory leak in vectorizable_store
3d3145e9e1461e92bef02d55d36990261dd0444d libstdc++/debug: Fix constexpr _Safe_iterator in C++20 mode [PR109536]
d5604febcfb09445eb738dcb8c675a4cb9671519 analyzer: fix ICE on strlen ((char *)&VECTOR_CST) [PR111361]
173852ab68a461bbee07f6420a927c16d9019081 RISC-V: Raname UNSPEC_CLMUL in vector-crypto.md.
565935f93a7da629da89b05812a3e8c43287598f RISC-V: Tweak the wording for the sorry message
1c51d0109a4730827c40c3bbd3a59d459828017e Fix testcase failure on many platforms which don't support vect_int_max.
4e8fef35f7c4553529e92a0d9f501b94481ede0b RISC-V: Extract part parsing base ISA logic into a standalone function [NFC]
006ad3e7f7847eb53c837aa1a581af0f822b7616 RISC-V: Relax the -march string for accept any order
e752a1ee00fef0244079a4c044d151e3be8073ab RISC-V: Remove unused function in riscv_subset_list [NFC]
7fd11421959c14c82fb03d148f14375d3b975584 RISC-V: Update testsuite due to -march string relaxation
5a22bb250d8f4ad239e12fea9828c18a0aa23e38 RISC-V: Document the syntax of -march
730a801f950e7817696067906cf40d590688387a RISC-V: Add the Zihpm and Zicntr extensions
6ce7008cfa1a240895ecca0898e7dbaecd975567 tree-optimization/113494 - Fix two observed regressions with r14-8206
01260a823073675e13dd1fc85cf2657a5396adf2 RISC-V: Fix RVV_VLMAX
19260a04ba6f75b1fae52afab50dcb43d44eb259 RISC-V: Documnet the list of supported extensions
54519030b05e2a85565cd65c88afe7da4670dd86 RISC-V: Update testcase due to message update
63736351ec4d1e49261a483ea55e0f5ecfc591c8 libgccjit: Make is_int return false on vector types
615e25c82de97acc17ab438f88d6788cf7ffe1d6 RISC-V: Suppress warning
0366231967776653b7c297055e6eac090549310e Remove several xfails for 32-bit hppa*-*-*
b1829de17bdf9770b276756ead49eba6f408ecd1 [committed] [NFC] Fix riscv_init_cumulative_args for unused arguments
5efd98c6f818ce2c55f54c34008557d0a3f953aa Install right version of last change.
3a6b650689b9bd43eaf8911045e1852fd45bad44 [PATCH v3 2/2] RISC-V: Fix XCValu test
46a664dd59ec6c1121914d6857d6edb94501c517 RISC-V: Bugfix for resolve_overloaded_builtin[PR113420]
a618b3c65745a6992ced4df60c186241c2da6eae RISC-V: Fix vfirst/vmsbf/vmsif/vmsof ratio attributes
86f3cbdaa6f60eaff1cdb4ab2f1a9bc796b67207 tree-optimization/113373 - add missing LC PHIs for live operations
f625c017e60b6e05675b7d6280f2c7677ce691c3 RISC-V: Fix regressions due to 86de9b66480b710202a2898cf513db105d8c432f
f9df00340e307e52be7e025689d6c8bcbb8bcd55 RISC-V: Lower vmv.v.x (avl = 1) into vmv.s.x
5015015ae6b29b3f1734c7693ba25b88cdd531a1 fold-const: Fold larger VIEW_CONVERT_EXPRs [PR113462]
02e683894942da1620c07bd7e3e8b1d5950d91aa Refactor exit PHI handling in vectorizer epilogue peeling
d5d43dc399bb0f15084827c59a025189c630afdd tree-optimization/113552 - fix num_call accounting in simd clone vectorization
3132d2d36b4705bb762e61b1c8ca4da7c78a8321 RISC-V: Fix large memory usage of VSETVL PASS [PR113495]
7f7d9c525c694e36ae525ed93ccd5b6ffad0f1d8 RISC-V: Add regression test for vsetvl bug pr113429
72429448fd16733f876b282bb37a0653049c446d middle-end: fix epilog reductions when vector iters peeled [PR113364]
59004711660065a731be07c92150d45de430a550 middle-end: rename main_exit_p in reduction code.
fb54b9772816968032518d4008be5090e0d95109 [PATCH v3] RISC-V: Add split pattern to generate SFB instructions. [PR113095]
0d1b0f2ad391217a43e9239ca017958f89e8f076 RISC-V: Don't make Ztso imply A
ba2c1a45dd58f10483efe6150bfb36d049a76024 Fix check_effective_target_vect_long_mult
578c7b91f418ebbef1bf169117815409e06f5197 tree-optimization/113576 - non-empty latch and may_be_zero vectorization
1a8bebb1c59960590e7e2bc1a52757dfdd94210a RISC-V: Add optim-no-fusion compile option [VSETVL PASS]
36c1384038f3b9f01124f0fc38bb3c930b1cbe8a docs: Fix 2 typos
e7d7c9e889ae8553b9aac79e6944d70702f8ee53 Fix a few vect gimple testcases for LLP64 targets (e.g. mingw) [PR113548]
5ee45f5e2838caf9180af1702349daa017a032f5 RISC-V: Remove redundant full available computation [NFC]
c6c2a1d79eb333a00124bf67820a7f405d0d8641 RISC-V: Add LCM delete block predecessors dump information
acc22d56e140220e7dc6c138918cb6754b6d1c0b RISC-V: remove param riscv-vector-abi. [PR113538]
5739d5fb5417e3e4303533ae464829e43ad3b47c RISC-V: Add support for XCVsimd extension in CV32E40P
90880e117aa70a5ecd9b7df4381410c2ea0dcfdb testsuite/vect: Add target checks to refined patterns.
660e17f00658b68115282e6de38243e3c6cc1ee2 fold-const: Handle AND, IOR, XOR with stepped vectors [PR112971].
d40b3c1e439db05c835b6bd4fd5bba58fda71dd6 RISC-V: Fix incorrect LCM delete bug [VSETVL PASS]
bfd6b36f08021f023e0e9223f5aea315b74a5c56 testsuite/vect: Fix pr25413a.c expectations [PR109705]
bf23a62ee08fdc114a517dc4af148f15fa5d6545 RISC-V: Refine some codes of VSETVL PASS [NFC]
f9b143d239db775318a29e9ff63f232b9501a22a tree-optimization/113602 - datarefs of non-addressables
a0596173c8975073dba8288598a483bfa97605ee RISC-V/testsuite: Widen coverage for pr105314.c
d4e15084e2155c7e7c5e872b3a88e64df27aa4e6 RISC-V/testsuite: Add RTL pr105314.c testcase variants
5a874dec6006357cca4e5f10a1c399157b96b837 RISC-V/testsuite: Add RTL cset-sext.c testcase variants
ec57d183d35412aa5e0bcd7a448ccb75a4e1eab7 c++: Stream additional fields for DECL_STRUCT_FUNCTION [PR113580]
5b393ac7f1715328ee92236071edc3885bf53317 testsuite: Fix vect_long_mult for 32-bit Power [PR109705]
1a8261e047f7a2c2b0afb95716f7615cba718cd1 vect: Tighten vect_determine_precisions_from_range [PR113281]
25cd22bf02d55d0778ee7b883eb698204a120a16 RISC-V: Add require-effective-target to pr113429 testcase
0ac37563fa41c72e499abd620c652ba5debe7fb9 RISC-V: Fix regression
4ac00b7c809ca70775a04708863b9101d94af5c2 RISC-V: THEAD: Fix improper immediate value for MODIFY_DISP instruction on 32-bit systems.
47b81161c98cf2ff5495d4aa6386cc3c87f9d27b testsuite: Fix up pr113622-{2,3}.c for i686-linux [PR113622]
d7250c1e02478586a0cd6d5cb67bf4d17249a7e7 tree-ssa-strlen: Fix up handle_store [PR113603]
87ed338808f8d56b1270724584218cf7d801fe5b riscv: Move UNSPEC_XTHEAD* from unspecv to unspec
4c2169d2f4061e72e1e61e9a175d16f7ff50f5c0 tree-optimization/113659 - early exit vectorization and missing VUSE
7bfea0aedbce3f33a783bbb47f39724a58d19f73 RISC-V: Bugfix for vls mode aggregated in GPR calling convention
9dd10de15b183f7b662905e1383fdc3a08755f2e RISC-V: Fix VSETLV PASS compile-time issue
924137b9012cee5603482242de08fbf0b2030f6a tree-optimization/113670 - gather/scatter to/from hard registers
8123f3ca3fd891034a8366518e756f161c4ff40d match: Fix vcond into conditional op folding [PR113607].
26c34b809cd1a6249027730a8b52bbf6a1c0f4a8 RISC-V: Add non-vector types to dfa pipelines
e56fb037d9d265682f5e7217d8a4c12a8d3fddf8 RISC-V: Add vector related pipelines
4b799a16ae59fc0f508c5931ebf1851a3446b707 RISC-V: Use default cost model for insn scheduling
23cd2961bd2ff63583f46e3499a07bd54491d45c RISC-V: Enable assert for insn_has_dfa_reservation
be697c0ab187466a0a76ef228055b591718e3e4d Revert "RISC-V: Enable assert for insn_has_dfa_reservation"
017b4c2a4977a8e50a336e4fef8c4ef817765033 Revert "RISC-V: Use default cost model for insn scheduling"
2a30dd3a763a3a5f517bd923607b6081157eeaac Revert "RISC-V: Add vector related pipelines"
fd4829dde46b9836c40c9ab27bde98521e692119 Revert "RISC-V: Add non-vector types to dfa pipelines"
5c18df44fd1387653595869c9145c63fffb8cfac RISC-V: Add minimal support for 7 new unprivileged extensions
ec217f7282cd4284cecda1c65a1e04323e6c8354 RISC-V: Support scheduling for sifive p600 series
4571b4d413a4ba5f1e2d429a2623180ad1c73c0f middle-end: Fix ICE in poly-int.h due to SLP.
22622a5a314114fa2c6033fd7b4f7a2060e55284 RISC-V: Remove vsetvl_pre bogus instructions in VSETVL PASS
e0701f8f7b6dcddb299eb5345e510cf9ea419150 RISC-V: Cleanup the comments for the psabi
74489c19070703361acc20bc172f304cae845a96 RISC-V: Allow LICM hoist POLY_INT configuration code sequence
3e0b495311e982d349a28322fa305083ef25f866 Revert "RISC-V: Allow LICM hoist POLY_INT configuration code sequence"
922e4599e6261644d336b009b6901cd221ec95fd RISC-V: Expand VLMAX scalar move in reduction
48148a0bb6c05b68b9c8f867f5c5ee9d8f4dd996 Fix some of vect-avg-*.c testcases
85094e2aa6dba7908f053046f02dd443e8f65d72 middle-end: check memory accesses in the destination block [PR113588].
777df37a12e55ecbc135efbed2749a8a8a756d4d [committed] Reasonably handle SUBREGs in risc-v cost modeling
7c190f93cd53a8391d78da2ba39d98dba9211faa RISC-V: Support scheduling for sifive p400 series
91e09b3a7e9c86bb29fc138744fd2e087216733c RISC-V: Add sifive-p450, sifive-p67 to -mcpu
9d139c036547a4b3b43439b82f94a9c350d4fa2f Vectorizer and address-spaces
8ca585e56c1d6837f96ddd88c13ed1e815c74f93 libitm: small update for C++20
184978cd74f962712e813030d58edc109ad9a92d riscv: Fix compiler warning in thead.cc
d29136ad3282905145e24d7ec10b6efe4ab5d2f1 RISC-V: Fix infinite compilation of VSETVL PASS
db5c3f6d952bc3950d23c0a6be4e8ec9147ef752 RISC-V: Bugfix for RVV overloaded intrinisc ICE when empty args
194d0956ef5992d4e453bde3eb5772dc077f610c middle-end: add additional runtime test for [PR113467]
8f6ed71d8fff3c3c6249651a72aee084e31ffb9e middle-end: fix ICE when moving statements to empty BB [PR113731]
5c3ba60024fedc6b3d374ebb071bcf5b3e27cd62 middle-end: fix ICE when destination BB for stores starts with a label [PR113750]
830d4659604e4d0f6e908d1cdb5bf1638a60bb21 Apply TLC to vect_analyze_early_break_dependences
1c649ac36f1eab8094fb0a697c001e064c031ac1 gccrs: Fix ICE accessing empty vector without check
99200573096c03120c8d4514383951acecdd5ab1 PR target/113690: Remove TImode REG_EQUAL notes in STV.
9ec08782b45869b33fec2a8772c25118221208e3 RISC-V: Bugfix for RVV overloaded intrinsic ICE in function checker
56adcd4878ee4078d6c674dc77713248f8397c06 testsuite: fix pointer conversion error in testcase vect-early-break_110-pr113467.c
5bd96fed4ff5bc480c7af2e650b16198e7e527cc Revert part of vect_analyze_early_break_dependences changes
3f69db1812106cb5bab203e17a60300ac51cdc68 middle-end: don't cache restart_loop in vectorizable_live_operations [PR113808]
70b9dd8b388668df96f457b3c6ee33fc5b35f94c testsuite: address Jakub's comments on vect-early-break_1-PR113808.f90
d2d5ef6e22082d945c4d255b44194155680a93bd ranger: Grow BBs in relation oracle as needed [PR113735]
232ffb61ceb63c4a86a8bc67f1db989c2124db5f RISC-V: Fix rvv intrinsic pragma tests dejagnu selector
1e3f78dbb328a2f2db8def241372cb947d9cb7eb tree-optimization/113863 - elide degenerate virtual PHIs when moving ee stores
016fbd2d89972e0c44d9cd8375d2332108e447c4 RISC-V: Fix misspelled term args in error_at message
76fb83559dc85d9a6de92c0505cf5c4dfa698430 testsuite: Fix up gcc.dg/pr113693.c for ia32
491e57451df47cda88f658601a92d6d006ae09d7 middle-end: update vector loop upper bounds when early break vect [PR113734]
7eac19be5f7dd92fcbcfe13f6edbb4f9bd45c15c Re: [PATCH] RISC-V: Fix macro fusion for auipc+add, when identifying UNSPEC_AUIPC. [PR113742]
5352ede92483b949e811cbdcdfaec5378f3e06d6 middle-end/113576 - zero padding of vector bools when expanding compares
948dbc5ee45f9ffd5f41fd6782704081cc7c8c27 vect/testsuite: Fix vect-simd-clone-1[02].c when dg-do default is compile [PR113899]
16ae5efedd389e8952f35bb10665518c22a9251c middle-end: inspect all exits for additional annotations for loop.
98e931de9adce41fba0e7f187e31ac1dfcbb8a00 Skip gnat.dg/div_zero.adb on RISC-V
b312cf21afd62b43fbc5034703e2796b0c3c416d tree-optimization/111156 - properly dissolve SLP only groups
7af0f1e107a480fbfe882cb985603960114aefb5 RISC-V: Add new option -march=help to print all supported extensions
325d5dd53270fe8fd62b36c92c8f8b87c2938bf1 RISC-V: Fix *sge<u>_<X:mode><GPR:mode> pattern
5f1438db419c9eb8901d1d1d7f98fb69082aec8e c++: Add testcase for this PR [PR97990]
cd503b0616462445381a8232fb753239d319af76 Add -Wstrict-aliasing to vector-struct-1.C testcase
6082024891e421bfd81d8f708a7411f4019d0d97 RISC-V: Suppress the vsetvl fusion for conflict successors
2bfdeca19d96239479488cd07b1e952d95a02f72 match.pd: Fix ICE on BIT_INSERT_EXPR of BIT_FIELD_REF folding [PR113967]
641b50bffc06123853a1421c0dd5a318c353fd85 GCN: Conditionalize 'define_expand "reduc_<fexpander>_scal_<mode>"' on '!TARGET_RDNA2_PLUS' [PR113615]
d70facd54a576faca1bfba96e92e1475e0da22a3 analyzer: Fix maybe_undo_optimize_bit_field_compare vs non-scalar types [PR113983]
ecfcc362b7f3f796c72f3525c4e3a6dd8ab3beac testsuite: Fix up analyzer/torture/vector-extract-1.c test for i686 [PR113983]
c8742849e22d004b6ab94b3f573639f763e42e3a ipa: Convert lattices from pure array to vector (PR 113476)
3232ebd91ed55b275b9d5a6e8355336382c4afd5 RISC-V: Specify mtune and march for PR113742
57b95223cb0ee472c86b34fc79d1193f3561451d RISC-V: Add non-vector types to dfa pipelines
6ec84c45a19403d3435b2affe4ec60e518fc1f97 RISC-V: Add vector related pipelines
67a29f99cc81384b9245ac5997e47bcf3ff84545 RISC-V: Use default cost model for insn scheduling
bc6b42666cfe1467774b942c7afabe480e3b5ccb RISC-V: Quick and simple fixes to testcases that break due to reordering
d7d79c466dd4f2763974cc33545275fa37cafc1f RISC-V: Enable assert for insn_has_dfa_reservation
9ca4c1bf082a4691482ca9f4814fea68f04e2cb3 RISC-V: Add tests for constraints "i" and "s"
3688c2b1a604a16b9ff46935770976960016b15c RISC-V: Upgrade RVV intrinsic version to 0.12
549f251f055e3a0b0084189a3012c4f15d635e75 tree-optimization/114027 - conditional reduction chain
1c5da882bf77400748aeb0b01bf9a7faba1a4f32 doc: RISC-V: Document that -mcpu doesn't override -march or -mtune
23f5da91ccb4927562ea4d1c245639bfd4a0088b RISC-V: Point our Python scripts at python3
818094a07a0b550643ecd0090647dc29cc9e153a testsuite: vect: Actually skip  gcc.dg/vect/vect-bic-bitmask-12.c etc. on SPARC
85c12ae8b80902ed46c97f33dbb61533e07f2905 RISC-V: Fix vec_init for simple sequences [PR114028].
5e7a176e88a2a37434cef9b1b6a37a4f8274854a bitint: Handle VIEW_CONVERT_EXPRs between large/huge BITINT_TYPEs and VECTOR/COMPLEX_TYPE etc. [PR114073]
0394ae31e832c5303f3b4aad9c66710a30c097f0 vect: Tighten check for impossible SLP layouts [PR113205]
8293df8019adfffae3384cb6fb9cb6f496fe8608 tree-optimization/114068 - missed virtual LC PHI after vect peeling
fb68e2cac1283f731a3a979cb714621afb1ddfcc tree-optimization/114099 - virtual LC PHIs and early exit vect
8a5d9409584aeb777b06f9c19c7d1a3552d496ad tree-optimization/114081 - dominator update for prologue peeling
a0b1798042d033fd2cc2c806afbb77875dd2909b tree-optimization/114074 - CHREC multiplication and undefined overflow
cc383e9702897dd783657ea3dce4aecf48318441 gimple-fold: Use bitwise vector types rather than barely supported huge integral types in memcpy etc. folding [PR113988]
82ebfd35da49e5df87da132a7b8c41baeebc57b4 Only emulate integral vectors.
2d8cd712b17e88f2935237665799d0c72b7ce1b6 libstdc++: Add more nodiscard uses in <vector>
fd07a29e39f5347d6cef3e7042a32306f97a1719 RISC-V: Fix __atomic_compare_exchange with 32 bit value on RV64
d3d0fcb652748191714e4c0b2541e977a7fc7bd7 bitint: Handle VCE from large/huge _BitInt SSA_NAME from load [PR114156]
c6f5f773323ab689a665bc208c3b221db42fe624 function: Fix another TYPE_NO_NAMED_ARGS_STDARG_P spot
0a01d1232ff0a8b094270fbf45c9fd0ea46df19f RISC-V: Introduce gcc option mrvv-vector-bits for RVV
4547628c78618616595f4b5e1bef2b582c77793d RISC-V: Add riscv_vector_cc function attribute
f9c30ea737b806caac917d8f501305151a2cbd57 middle-end/114070 - VEC_COND_EXPR folding
867cbadb912ab75d0eaf919a3f992595e508482b c++: Fix up decltype of non-dependent structured binding decl in template [PR92687]
b7b387e1200fd182599195979d5d21656fa8969d [14 regression] Fix insn types in risc-v port
889fbc9454e2d4e2b9a11a9e02b3b7e698edcd1c testsuite: Make pr104992.c irrelated to target vector feature [PR113418]
324d2907c86f05e40dc52d226940308f53a956c2 tree-optimization/114192 - scalar reduction kept live with early break vect
a19ab1c42aba47fbfb122a6160f504565aef0943 tree-optimization/114164 - unsupported SIMD clone call, unsupported VEC_COND
8fdac08b4d5f65973164a476bd255533ed97a766 tree-optimization/114197 - unexpected if-conversion for vectorization
71244316cf714725930c2de61c79d635238595bf Regenerate opt.urls
77eb86be8841989651b3150a020dd1a95910cc00 vect: Fix integer overflow calculating mask
1a8dde963590b415768b070bd309b188858dc589 RISC-V: Cleanup unused code in riscv_v_adjust_bytesize [NFC]
7890836de20912bd92afaf5abbeaf9d8c5b86542 tree-optimization/114231 - use patterns for BB SLP discovery root stmts
